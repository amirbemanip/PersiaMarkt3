

====================
فایل: main.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\main.dart
====================

// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:persia_markt/core/config/app_router.dart';
import 'package:persia_markt/core/config/service_locator.dart';
import 'package:persia_markt/core/cubit/locale_cubit.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_cubit.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart';
import 'package:persia_markt/features/checkout/presentation/cubit/checkout_cubit.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_event.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/order_history/presentation/cubit/order_history_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_cubit.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await setupServiceLocator();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(create: (_) => sl<LocaleCubit>()),
        BlocProvider(
            create: (_) => sl<MarketDataBloc>()..add(FetchMarketDataEvent())),
        BlocProvider(create: (_) => sl<LocationCubit>()..fetchLocation()),
        BlocProvider(create: (_) => sl<CartCubit>()..loadCartProducts()),
        BlocProvider(create: (_) => sl<FavoritesCubit>()..loadLikedProducts()),
        BlocProvider(create: (_) => sl<SearchCubit>()),
        BlocProvider(create: (_) => sl<AuthCubit>()),
        BlocProvider(create: (_) => sl<CheckoutCubit>()),
        BlocProvider(create: (_) => sl<OrderHistoryCubit>()),
      ],
      child: BlocListener<LocaleCubit, Locale>(
        listener: (context, state) {
          context.read<MarketDataBloc>().add(FetchMarketDataEvent());
        },
        child: BlocBuilder<LocaleCubit, Locale>(
          builder: (context, locale) {
            return MaterialApp.router(
              onGenerateTitle: (context) =>
                  AppLocalizations.of(context)!.persiaMarkt,
              debugShowCheckedModeBanner: false,
              routerConfig: AppRouter.router,
              locale: locale,
              localizationsDelegates: const [
                AppLocalizations.delegate,
                GlobalMaterialLocalizations.delegate,
                GlobalWidgetsLocalizations.delegate,
                GlobalCupertinoLocalizations.delegate,
              ],
              supportedLocales: const [
                Locale('fa'),
                Locale('en'),
                Locale('de'),
              ],
              theme: _buildTheme(Brightness.light),
              darkTheme: _buildTheme(Brightness.dark),
              themeMode: ThemeMode.system,
            );
          },
        ),
      ),
    );
  }

  ThemeData _buildTheme(Brightness brightness) {
    final isLight = brightness == Brightness.light;
    final surfaceColor = isLight ? Colors.white : const Color(0xFF1E1E1E);
    final scaffoldColor =
        isLight ? const Color(0xFFF5F5F5) : const Color(0xFF121212);
    final colorScheme = ColorScheme.fromSeed(
      seedColor: const Color(0xFFF57C00),
      brightness: brightness,
      primary: const Color(0xFFF57C00),
      secondary: const Color(0xFFFF9800),
      surface: surfaceColor,
      onSurface: isLight ? Colors.black87 : Colors.white,
      outline: isLight ? Colors.grey.shade300 : Colors.grey.shade700,
    );
    final baseTheme = ThemeData(
      useMaterial3: true,
      brightness: brightness,
      colorScheme: colorScheme,
    );
    return baseTheme.copyWith(
      scaffoldBackgroundColor: scaffoldColor,
      appBarTheme: AppBarTheme(
        backgroundColor: colorScheme.surface,
        elevation: 0,
        iconTheme: IconThemeData(color: colorScheme.onSurface),
        titleTextStyle: GoogleFonts.lalezar(
          color: colorScheme.onSurface,
          fontSize: 20,
        ),
      ),
      textTheme: GoogleFonts.vazirmatnTextTheme(baseTheme.textTheme)
          .copyWith(
            headlineMedium: GoogleFonts.vazirmatn(
                fontWeight: FontWeight.bold, color: colorScheme.onSurface),
            titleLarge: GoogleFonts.vazirmatn(
                fontWeight: FontWeight.bold, color: colorScheme.onSurface),
            bodyMedium: GoogleFonts.vazirmatn(
                fontSize: 15, color: colorScheme.onSurface),
            labelLarge: GoogleFonts.vazirmatn(fontWeight: FontWeight.bold),
          )
          .apply(
            bodyColor: colorScheme.onSurface,
            displayColor: colorScheme.onSurface,
          ),
      cardTheme: CardThemeData(
        elevation: 0,
        shape: RoundedRectangleBorder(
          borderRadius: const BorderRadius.all(Radius.circular(16)),
          side: BorderSide(
            color: colorScheme.outline.withAlpha((255 * 0.5).round()),
            width: 1,
          ),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 0.5,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          backgroundColor: colorScheme.primary,
          foregroundColor: colorScheme.onPrimary,
          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: colorScheme.surface,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        hintStyle: TextStyle(color: Colors.grey.shade500),
      ),
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        backgroundColor: colorScheme.surface,
        selectedItemColor: colorScheme.primary,
        unselectedItemColor: Colors.grey,
        elevation: 5,
      ),
    );
  }
}

====================
فایل: app_router.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\config\app_router.dart
====================

// lib/core/config/app_router.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/config/service_locator.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_cubit.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_state.dart';
import 'package:persia_markt/features/auth/presentation/view/login_view.dart';
import 'package:persia_markt/features/auth/presentation/view/register_view.dart';
import 'package:persia_markt/features/cart/presentation/view/cart_view.dart';
import 'package:persia_markt/features/category/view/category_detail_view.dart';
import 'package:persia_markt/features/checkout/presentation/view/checkout_view.dart';
import 'package:persia_markt/features/home/presentation/view/home_view.dart';
import 'package:persia_markt/features/home/presentation/view/main_tab_bar_view.dart';
import 'package:persia_markt/features/map/view/map_view.dart';
import 'package:persia_markt/features/order_history/presentation/view/order_history_view.dart';
import 'package:persia_markt/features/profile/presentation/view/favorites_view.dart';
import 'package:persia_markt/features/profile/presentation/view/profile_view.dart';
import 'package:persia_markt/features/search/presentation/view/search_view.dart';
import 'package:persia_markt/features/seller_panel/view/seller_panel_view.dart';
import 'package:persia_markt/features/settings/view/settings_view.dart';
import 'package:persia_markt/features/store/presentation/view/store_detail_view.dart';
import 'package:persia_markt/features/support/view/user_support_view.dart';
import 'app_routes.dart';

final _rootNavigatorKey = GlobalKey<NavigatorState>();
final _shellNavigatorHomeKey = GlobalKey<NavigatorState>(debugLabel: 'shellHome');
final _shellNavigatorMapKey = GlobalKey<NavigatorState>(debugLabel: 'shellMap');
final _shellNavigatorCartKey = GlobalKey<NavigatorState>(debugLabel: 'shellCart');
final _shellNavigatorProfileKey =
    GlobalKey<NavigatorState>(debugLabel: 'shellProfile');

class AppRouter {
  static final router = GoRouter(
    initialLocation: AppRoutes.home,
    navigatorKey: _rootNavigatorKey,
    refreshListenable: GoRouterRefreshStream(sl<AuthCubit>().stream),
    redirect: (BuildContext context, GoRouterState state) {
      final authState = context.read<AuthCubit>().state;
      final isLoggedIn = authState is Authenticated;

      // لیست مسیرهایی که نیاز به لاگین ندارند
      final publicRoutes = [
        AppRoutes.login,
        AppRoutes.register,
        AppRoutes.sellerPanel,
        // فرض می‌کنیم صفحه اصلی و نقشه برای کاربران مهمان هم قابل مشاهده است
        AppRoutes.home,
        AppRoutes.map,
        AppRoutes.search,
      ];

      final isGoingToPublicRoute = publicRoutes.any((route) => state.matchedLocation.startsWith(route));
      
      // اگر کاربر لاگین نکرده و می‌خواهد به صفحه‌ای غیرعمومی برود، او را به صفحه لاگین بفرست
      if (!isLoggedIn && !isGoingToPublicRoute) {
        return AppRoutes.login;
      }
      
      // اگر کاربر لاگین کرده و می‌خواهد به صفحه لاگین یا ثبت‌نام برود، او را به صفحه اصلی بفرست
      if (isLoggedIn &&
          (state.matchedLocation == AppRoutes.login ||
              state.matchedLocation == AppRoutes.register)) {
        return AppRoutes.home;
      }
      return null;
    },
    routes: [
      StatefulShellRoute.indexedStack(
        builder: (context, state, navigationShell) {
          return MainTabBarView(navigationShell: navigationShell);
        },
        branches: [
          _buildBranch(
            navigatorKey: _shellNavigatorHomeKey,
            routes: [
              GoRoute(
                path: AppRoutes.home,
                pageBuilder: (context, state) => _buildPageWithTransition(
                  key: state.pageKey,
                  child: const HomeView(),
                ),
                routes: [
                  GoRoute(
                    path: AppRoutes.storeDetail,
                    pageBuilder: (context, state) {
                      final storeId = state.pathParameters['storeId']!;
                      final initialProductId =
                          state.uri.queryParameters['productId'];
                      return _buildPageWithTransition(
                        key: state.pageKey,
                        child: StoreDetailView(
                          storeId: storeId,
                          initialProductId: initialProductId,
                        ),
                      );
                    },
                  ),
                  GoRoute(
                    path: AppRoutes.categoryDetail,
                    pageBuilder: (context, state) {
                      final categoryId = state.pathParameters['categoryId']!;
                      return _buildPageWithTransition(
                        key: state.pageKey,
                        child: CategoryDetailView(categoryId: categoryId),
                      );
                    },
                  ),
                ],
              ),
            ],
          ),
          _buildBranch(
            navigatorKey: _shellNavigatorMapKey,
            routes: [
              GoRoute(
                path: AppRoutes.map,
                pageBuilder: (context, state) {
                  final lat = state.uri.queryParameters['lat'];
                  final lng = state.uri.queryParameters['lng'];
                  final focus = state.uri.queryParameters['focus'];
                  return _buildPageWithTransition(
                    key: state.pageKey,
                    child: MapView(lat: lat, lng: lng, focus: focus),
                  );
                },
              ),
            ],
          ),
          _buildBranch(
            navigatorKey: _shellNavigatorCartKey,
            routes: [
              GoRoute(
                path: AppRoutes.cart,
                pageBuilder: (context, state) => _buildPageWithTransition(
                  key: state.pageKey,
                  child: const CartView(),
                ),
              ),
            ],
          ),
          _buildBranch(
            navigatorKey: _shellNavigatorProfileKey,
            routes: [
              GoRoute(
                path: AppRoutes.profile,
                pageBuilder: (context, state) => _buildPageWithTransition(
                  key: state.pageKey,
                  child: const ProfileView(),
                ),
              ),
            ],
          ),
        ],
      ),
      GoRoute(
        path: AppRoutes.search,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const SearchView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.login,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const LoginView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.register,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const RegisterView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.sellerPanel,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => const MaterialPage(
          fullscreenDialog: true,
          child: SellerPanelView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.settings,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const SettingsView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.userSupport,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const UserSupportView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.favorites,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const FavoritesView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.checkout,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const CheckoutView(),
        ),
      ),
      GoRoute(
        path: AppRoutes.orderHistory,
        parentNavigatorKey: _rootNavigatorKey,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const OrderHistoryView(),
        ),
      ),
    ],
  );

  static StatefulShellBranch _buildBranch({
    required GlobalKey<NavigatorState> navigatorKey,
    required List<RouteBase> routes,
  }) {
    return StatefulShellBranch(
      navigatorKey: navigatorKey,
      routes: routes,
    );
  }

  static CustomTransitionPage _buildPageWithTransition<T>({
    required LocalKey key,
    required Widget child,
  }) {
    return CustomTransitionPage<T>(
      key: key,
      child: child,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        return FadeTransition(opacity: animation, child: child);
      },
    );
  }
}

class GoRouterRefreshStream extends ChangeNotifier {
  GoRouterRefreshStream(Stream<dynamic> stream) {
    notifyListeners();
    _subscription = stream.asBroadcastStream().listen((_) => notifyListeners());
  }
  late final StreamSubscription<dynamic> _subscription;
  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }
}

====================
فایل: app_routes.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\config\app_routes.dart
====================

// lib/core/config/app_routes.dart

class AppRoutes {
  // مسیرهای اصلی Shell
  static const String home = '/';
  static const String map = '/map';
  static const String cart = '/cart';
  static const String profile = '/profile';

  // مسیرهای خارج از Shell اصلی (صفحات کامل)
  static const String search = '/search';
  static const String login = '/login';
  static const String register = '/register';
  static const String sellerPanel = '/seller-panel';
  static const String settings = '/settings';
  static const String userSupport = '/support';
  static const String favorites = '/favorites';
  static const String checkout = '/checkout';
  static const String orderHistory = '/order-history'; // <<< مسیر جدید اضافه شد

  // مسیرهای داینامیک (فرزندان مسیر خانه)
  static const String storeDetail = 'store/:storeId';
  static const String categoryDetail = 'category/:categoryId';

  // متدهای کمکی
  static String storeDetailPath(String storeId, {String? productId}) {
    String path = '/store/$storeId';
    if (productId != null) {
      path += '?productId=$productId';
    }
    return path;
  }

  static String categoryDetailPath(String categoryId) {
    return '/category/$categoryId';
  }
}

====================
فایل: service_locator.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\config\service_locator.dart
====================

// lib/core/config/service_locator.dart
import 'package:get_it/get_it.dart';
import 'package:http/http.dart' as http;
import 'package:persia_markt/core/cubit/locale_cubit.dart';
import 'package:persia_markt/core/services/api_service.dart';
import 'package:persia_markt/core/services/location_service.dart';
import 'package:persia_markt/features/auth/data/services/auth_service.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_cubit.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart';
import 'package:persia_markt/features/checkout/data/services/checkout_service.dart';
import 'package:persia_markt/features/checkout/presentation/cubit/checkout_cubit.dart';
import 'package:persia_markt/features/home/data/repositories/market_repository_impl.dart';
import 'package:persia_markt/features/home/domain/repositories/market_repository.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/order_history/data/services/order_history_service.dart';
import 'package:persia_markt/features/order_history/presentation/cubit/order_history_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_cubit.dart';
import 'package:shared_preferences/shared_preferences.dart';

final sl = GetIt.instance;

Future<void> setupServiceLocator() async {
  // External
  final sharedPreferences = await SharedPreferences.getInstance();
  sl.registerLazySingleton(() => sharedPreferences);
  sl.registerLazySingleton(() => http.Client());

  // Core Cubits
  sl.registerLazySingleton(() => LocaleCubit());

  // Services
  sl.registerLazySingleton(() => ApiService(client: sl()));
  sl.registerLazySingleton(() => LocationService());
  sl.registerLazySingleton(() => AuthService(client: sl(), prefs: sl()));
  sl.registerLazySingleton(() => CheckoutService(client: sl(), authService: sl()));
  sl.registerLazySingleton(() => OrderHistoryService(client: sl(), authService: sl()));

  // Repositories
  sl.registerLazySingleton<MarketRepository>(
      () => MarketRepositoryImpl(apiService: sl()));

  // Feature Cubits & Blocs
  sl.registerFactory(() => MarketDataBloc(marketRepository: sl()));
  sl.registerFactory(() => LocationCubit(locationService: sl()));
  // <<< اصلاح اصلی: CartCubit به یک نمونه واحد و پایدار تبدیل شد
  sl.registerLazySingleton(() => CartCubit(sharedPreferences: sl()));
  sl.registerFactory(() => FavoritesCubit(sharedPreferences: sl()));
  sl.registerFactory(() => SearchCubit());
  sl.registerFactory(() => AuthCubit(authService: sl()));
  sl.registerFactory(() => CheckoutCubit(checkoutService: sl(), cartCubit: sl(), orderHistoryCubit: sl()));
  sl.registerLazySingleton(() => OrderHistoryCubit(orderHistoryService: sl()));
}

====================
فایل: locale_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\cubit\locale_cubit.dart
====================

// مسیر: lib/core/cubit/locale_cubit.dart

import 'package:flutter/material.dart'; // <<<--- مشکل اصلی اینجا بود و برطرف شد
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LocaleCubit extends Cubit<Locale> {
  // زبان پیش‌فرض را فارسی قرار می‌دهیم
  LocaleCubit() : super(const Locale('fa')) {
    _loadLocale();
  }

  // این متد در ابتدای کار، زبان ذخیره شده را از حافظه می‌خواند
  void _loadLocale() async {
    final prefs = await SharedPreferences.getInstance();
    // اگر زبانی ذخیره نشده بود، همان فارسی باقی می‌ماند
    final languageCode = prefs.getString('language_code') ?? 'fa';
    emit(Locale(languageCode));
  }

  // این متد زبان برنامه را تغییر داده و در حافظه ذخیره می‌کند
  void changeLocale(String languageCode) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('language_code', languageCode);
    emit(Locale(languageCode));
  }
}

====================
فایل: api_service.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\data\data_sources\api_service.dart
====================

// مسیر: lib/core/data/data_sources/api_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:persia_markt/core/config/service_locator.dart';
import 'package:persia_markt/core/cubit/locale_cubit.dart';
import 'package:persia_markt/core/data/models/market_data_model.dart'; // ۱. import مدل MarketData اضافه شد
import 'package:persia_markt/core/error/exceptions.dart';

class ApiService {
  final http.Client client;
  // ۲. آدرس پایه سرور دوباره تعریف شد
  final String _baseUrl = 'http://192.168.178.68:3000/api/v1/public';

  ApiService({required this.client});

  Future<MarketData> getMarketData() async {
    try {
      // ۳. زبان فعلی از LocaleCubit خوانده می‌شود
      final currentLocale = sl<LocaleCubit>().state;
      final languageCode = currentLocale.languageCode;

      final response = await client.get(
        Uri.parse('$_baseUrl/market-data'),
        headers: {
          'Content-Type': 'application/json',
          'Accept-Language': languageCode, // هدر زبان به درخواست اضافه شد
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        // ۴. پاسخ سرور به مدل MarketData تبدیل می‌شود
        return MarketData.fromJson(data);
      } else {
        throw ServerException('Failed to load market data: ${response.statusCode}');
      }
    } catch (e) {
      throw ServerException('Failed to connect to the server: $e');
    }
  }
}

====================
فایل: api_service.zart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\data\data_sources\api_service.zart
====================

// مسیر: lib/core/data/data_sources/api_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:persia_markt/core/config/service_locator.dart';
import 'package:persia_markt/core/cubit/locale_cubit.dart';
import 'package:persia_markt/core/data/models/market_data_model.dart'; // ۱. import مدل MarketData اضافه شد
import 'package:persia_markt/core/error/exceptions.dart';

class ApiService {
  final http.Client client;
  // ۲. آدرس پایه سرور دوباره تعریف شد
  final String _baseUrl = 'http://192.168.178.68:3000/api/v1/public';

  ApiService({required this.client});

  Future<MarketData> getMarketData() async {
    try {
      // ۳. زبان فعلی از LocaleCubit خوانده می‌شود
      final currentLocale = sl<LocaleCubit>().state;
      final languageCode = currentLocale.languageCode;

      final response = await client.get(
        Uri.parse('$_baseUrl/market-data'),
        headers: {
          'Content-Type': 'application/json',
          'Accept-Language': languageCode, // هدر زبان به درخواست اضافه شد
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        // ۴. پاسخ سرور به مدل MarketData تبدیل می‌شود
        return MarketData.fromJson(data);
      } else {
        throw ServerException('Failed to load market data: ${response.statusCode}');
      }
    } catch (e) {
      throw ServerException('Failed to connect to the server: $e');
    }
  }
}

====================
فایل: market_data_model.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\data\models\market_data_model.dart
====================

// مسیر: lib/core/data/models/market_data_model.dart

import 'package:persia_markt/core/models/category_item.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';

class MarketData {
  final List<CategoryItem> categories;
  final List<Store> stores;
  final List<Product> products;
  final List<Product> specialOfferProducts;
  final List<Product> affordableProducts;
  final List<dynamic> banners; // Assuming banners can be of any type for now

  MarketData({
    required this.categories,
    required this.stores,
    required this.products,
    required this.specialOfferProducts,
    required this.affordableProducts,
    required this.banners,
  });

  factory MarketData.fromJson(Map<String, dynamic> json) {
    return MarketData(
      categories: (json['categories'] as List)
          .map((i) => CategoryItem.fromJson(i))
          .toList(),
      stores: (json['stores'] as List).map((i) => Store.fromJson(i)).toList(),
      products: (json['products'] as List).map((i) => Product.fromJson(i)).toList(),
      specialOfferProducts: (json['specialOfferProducts'] as List)
          .map((i) => Product.fromJson(i))
          .toList(),
      affordableProducts: (json['affordableProducts'] as List)
          .map((i) => Product.fromJson(i))
          .toList(),
      banners: json['banners'] as List,
    );
  }
}

====================
فایل: exceptions.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\error\exceptions.dart
====================

// مسیر: lib/core/error/exceptions.dart

class ServerException implements Exception {
  final String message;
  ServerException(this.message);
}

class CacheException implements Exception {}

====================
فایل: failures.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\error\failures.dart
====================

// lib/core/error/failures.dart
import 'package:equatable/equatable.dart';

/// Base class for all failures in the application.
/// A Failure represents an unexpected error (e.g., server error, network error).
abstract class Failure extends Equatable {
  final String message;
  const Failure(this.message);

  @override
  List<Object> get props => [message];
}

/// Represents a failure that occurs when communicating with the server.
class ServerFailure extends Failure {
  const ServerFailure(String message) : super(message);
}

/// Represents a failure related to network connectivity issues.
class NetworkFailure extends Failure {
  const NetworkFailure(String message) : super(message);
}

====================
فایل: category_item.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\models\category_item.dart
====================

import 'package:equatable/equatable.dart';

class CategoryItem extends Equatable {
  final String id;
  final String name;
  final String nameEn;
  final String? description;
  final String? iconUrl;

  const CategoryItem({
    required this.id,
    required this.name,
    required this.nameEn,
    this.description,
    this.iconUrl,
  });

  @override
  List<Object?> get props => [id, name];

  factory CategoryItem.fromJson(Map<String, dynamic> json) {
    return CategoryItem(
      // FIXED: Safely convert the integer ID from the API to a String.
      id: json['id'].toString(),
      name: json['name'] as String,
      nameEn: json['name_en'] as String,
      description: json['description'] as String?,
      iconUrl: json['icon_url'] as String?,
    );
  }
}


====================
فایل: location.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\models\location.dart
====================

// lib/core/models/location.dart
import 'package:equatable/equatable.dart';

class Location extends Equatable {
  final double lat;
  final double lng;

  const Location({required this.lat, required this.lng});

  @override
  List<Object> get props => [lat, lng];

  factory Location.fromJson(Map<String, dynamic> json) {
    return Location(
      lat: (json['lat'] as num).toDouble(),
      lng: (json['lng'] as num).toDouble(),
    );
  }
}

====================
فایل: market_data.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\models\market_data.dart
====================

import 'package:equatable/equatable.dart';
import 'category_item.dart';
import 'product.dart';
import 'store.dart';

class MarketData extends Equatable {
  final List<Store> stores;
  final List<CategoryItem> categories;
  final List<Product> products;

  const MarketData({
    required this.stores,
    required this.categories,
    required this.products,
  });

  @override
  List<Object> get props => [stores, categories, products];

  /// Creates a MarketData instance from a JSON object.
  /// It safely handles potential errors during parsing of its child lists.
  factory MarketData.fromJson(Map<String, dynamic> json) {
    // Helper function to safely parse a list of items
    List<T> _parseList<T>(String key, T Function(Map<String, dynamic>) fromJson) {
      try {
        if (json[key] is List) {
          return (json[key] as List).map((item) => fromJson(item)).toList();
        }
      } catch (e) {
        print('Error parsing list for key "$key": $e');
      }
      return []; // Return an empty list on failure
    }

    return MarketData(
      stores: _parseList('stores', Store.fromJson),
      categories: _parseList('categories', CategoryItem.fromJson),
      products: _parseList('products', Product.fromJson),
    );
  }
}


====================
فایل: order.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\models\order.dart
====================

// lib/core/models/order.dart
import 'package:equatable/equatable.dart';

class Order extends Equatable {
  final int id;
  final String status;
  final DateTime createdAt;
  final double totalAmount;
  final Map<String, dynamic> seller;
  final List<OrderItem> items;

  const Order({
    required this.id,
    required this.status,
    required this.createdAt,
    required this.totalAmount,
    required this.seller,
    required this.items,
  });

  factory Order.fromJson(Map<String, dynamic> json) {
    return Order(
      id: json['id'],
      status: json['status'],
      createdAt: DateTime.parse(json['created_at']),
      totalAmount: double.parse(json['total_amount'].toString()),
      seller: json['seller'] as Map<String, dynamic>,
      items: (json['items'] as List)
          .map((item) => OrderItem.fromJson(item))
          .toList(),
    );
  }

  @override
  List<Object?> get props => [id, status];
}

class OrderItem extends Equatable {
  final String productName;
  final String productImageUrl;
  final int quantity;

  const OrderItem({
    required this.productName,
    required this.productImageUrl,
    required this.quantity,
  });

  factory OrderItem.fromJson(Map<String, dynamic> json) {
    final productInfo = json['storeProduct']['product'];
    return OrderItem(
      productName: productInfo['name'],
      productImageUrl: (productInfo['images'] as List).isNotEmpty
          ? productInfo['images'][0]
          : '',
      quantity: json['quantity'],
    );
  }

  @override
  List<Object?> get props => [productName, quantity];
}

====================
فایل: product.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\models\product.dart
====================

import 'package:equatable/equatable.dart';

class Product extends Equatable {
  final String id;
  final String storeID;
  final String name;
  final String description;
  final String brand;
  final List<String> images;
  final double price;
  final double? discountPrice;
  final int stock;
  final bool isPerishable;
  final String categoryID;

  const Product({
    required this.id,
    required this.storeID,
    required this.name,
    required this.description,
    required this.brand,
    required this.images,
    required this.price,
    this.discountPrice,
    required this.stock,
    required this.isPerishable,
    required this.categoryID,
  });

  /// A helper getter to return the primary image URL.
  String get primaryImageUrl => images.isNotEmpty ? images.first : '';

  /// A helper getter to determine the effective price (discounted or original).
  double get effectivePrice => discountPrice ?? price;

  /// A helper getter to check if the product is on sale.
  bool get isOnSale => discountPrice != null && discountPrice! < price;

  @override
  List<Object?> get props => [id, storeID, name, effectivePrice];

  /// Creates a Product instance from a JSON object received from the API.
  /// This factory is designed to parse the new nested API structure safely.
  factory Product.fromJson(Map<String, dynamic> json) {
    // Safely access the nested 'product' object.
    final productData = json['product'] as Map<String, dynamic>? ?? {};

    // Helper function to safely parse string prices to double.
    double? _parseDouble(dynamic value) {
      if (value == null) return null;
      return double.tryParse(value.toString());
    }

    return Product(
      id: json['id']?.toString() ?? 'unknown_id',
      storeID: json['storeID']?.toString() ?? 'unknown_store',
      price: _parseDouble(json['price']) ?? 0.0,
      discountPrice: _parseDouble(json['discount_price']),
      stock: json['stock'] as int? ?? 0,
      name: productData['name'] as String? ?? 'Unnamed Product',
      images: (productData['images'] as List<dynamic>?)?.map((e) => e.toString()).toList() ?? [],
      brand: productData['brand'] as String? ?? 'Unknown Brand',
      description: productData['description'] as String? ?? '',
      isPerishable: productData['is_perishable'] as bool? ?? false,
      // Safely parse category_id which comes as an integer from the backend.
      categoryID: productData['category_id']?.toString() ?? 'uncategorized',
    );
  }
}


====================
فایل: store.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\models\store.dart
====================

import 'package:equatable/equatable.dart';

class Store extends Equatable {
  final String storeID;
  final String name;
  final String address;
  final String storeImage;
  final double latitude;
  final double longitude;
  final double rating;

  // فیلدهای اضافی که ممکن است در آینده از API بیایند
  final String? city;
  final String? phone;

  const Store({
    required this.storeID,
    required this.name,
    required this.address,
    required this.storeImage,
    required this.latitude,
    required this.longitude,
    required this.rating,
    this.city,
    this.phone,
  });

  /// برای مواقعی که نیاز به Store خالی داریم
  factory Store.empty() {
    return const Store(
      storeID: '',
      name: 'Not Found',
      address: '',
      storeImage: '',
      latitude: 0.0,
      longitude: 0.0,
      rating: 0.0,
    );
  }

  @override
  List<Object?> get props => [storeID, name, address];

  /// Creates a Store instance from a JSON object.
  /// This factory is now updated to match the backend API response keys.
  factory Store.fromJson(Map<String, dynamic> json) {
    // Helper to safely parse numbers
    double _parseDouble(dynamic value) {
      if (value is num) return value.toDouble();
      if (value is String) return double.tryParse(value) ?? 0.0;
      return 0.0;
    }

    return Store(
      // FIXED: Mapped API keys to model properties
      storeID: (json['id'] as int).toString(),
      name: json['store_name'] as String? ?? 'Unnamed Store',
      address: json['store_address'] as String? ?? 'No address',
      storeImage: json['store_image_url'] as String? ?? '',
      latitude: _parseDouble(json['latitude']),
      longitude: _parseDouble(json['longitude']),
      rating: _parseDouble(json['rating']),
      city: json['city'] as String?, // Optional field
      phone: json['phone'] as String?, // Optional field
    );
  }
}


====================
فایل: api_service.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\services\api_service.dart
====================

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:async'; // For timeout
import 'package:persia_markt/core/config/service_locator.dart';
import 'package:persia_markt/core/cubit/locale_cubit.dart';

/// A service class for handling all network requests to the PersiaMarkt API.
/// It is optimized to fetch initial data with a single, efficient request.
class ApiService {
  final String _baseUrl = 'https://persia-market-panel.onrender.com';
  
  final http.Client _client;
  final _timeoutDuration = const Duration(seconds: 90);

  ApiService({required http.Client client}) : _client = client;

  /// Fetches all market data (stores, products, categories) in a single API call.
  Future<Map<String, dynamic>> fetchMarketDataAsJson() async {
    // ==================== اصلاح اصلی اینجاست ====================
    // یک پارامتر تصادفی برای جلوگیری از کش شدن درخواست در iOS اضافه شد
    final cacheBuster = DateTime.now().millisecondsSinceEpoch;
    final Uri url = Uri.parse('$_baseUrl/api/v1/public/market-data?v=$cacheBuster');
    // ==========================================================
    
    try {
      // ۱. زبان فعلی از LocaleCubit خوانده می‌شود.
      final currentLocale = sl<LocaleCubit>().state;
      final languageCode = currentLocale.languageCode;

      print("Fetching all market data for language: $languageCode from endpoint: $url");
      
      // ۲. زبان در هدر 'Accept-Language' به همراه درخواست ارسال می‌شود.
      final response = await _client.get(
        url,
        headers: {
          'Accept-Language': languageCode,
        },
      ).timeout(_timeoutDuration);

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(utf8.decode(response.bodyBytes));
        print("Market data fetched successfully!");
        return data;
      } else {
        print('Failed to load market data. Status code: ${response.statusCode}, Body: ${response.body}');
        throw Exception('سرور با خطای ${response.statusCode} پاسخ داد.');
      }
    } on TimeoutException {
        print("Error: The request to the server timed out. This can happen on the first load.");
        throw Exception('سرور پاسخ نمی‌دهد. لطفاً چند لحظه بعد دوباره تلاش کنید.');
    } catch (e) {
      print('Error fetching market data: $e');
      throw Exception('خطا در اتصال به سرور. لطفاً از اتصال اینترنت خود مطمئن شوید.');
    }
  }
}


====================
فایل: location_service.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\services\location_service.dart
====================

// lib/services/location_service.dart
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';

class LocationService {
  /// موقعیت فعلی دستگاه را با بررسی کامل دسترسی‌ها مشخص می‌کند.
  Future<Position> getCurrentPosition() async {
    // 1. بررسی فعال بودن سرویس موقعیت‌یاب دستگاه
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      return Future.error('سرویس موقعیت مکانی غیرفعال است.');
    }

    // 2. بررسی و درخواست دسترسی موقعیت مکانی از کاربر
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        return Future.error('دسترسی به موقعیت مکانی رد شد.');
      }
    }

    if (permission == LocationPermission.deniedForever) {
      return Future.error('دسترسی به موقعیت مکانی برای همیشه رد شده است.');
    }

    // 3. در صورت تایید دسترسی، موقعیت فعلی را برمی‌گرداند
    return await Geolocator.getCurrentPosition();
  }

  /// یک موقعیت جغرافیایی را به یک آدرس خوانا تبدیل می‌کند.
  Future<String> getAddressFromPosition(Position position) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(position.latitude, position.longitude);

      if (placemarks.isNotEmpty) {
        final placemark = placemarks.first; 
        
        // بخش‌های مختلف آدرس را استخراج می‌کند
        final city = placemark.locality ?? ''; 
        final street = placemark.thoroughfare ?? ''; 
        
        // آدرس را به صورت خوانا ترکیب می‌کند
        final addressParts = [city, street].where((part) => part.isNotEmpty).toList();
        if (addressParts.isNotEmpty) {
          return addressParts.join(', ');
        }
      }
      // اگر هیچ آدرسی یافت نشد
      return 'موقعیت نامعلوم'; 
    } catch (e) {
      // دستور print برای محیط نهایی (production) حذف شد.
      // در صورت بروز خطا، یک پیام مناسب به کاربر نمایش داده می‌شود.
      return 'خطا در تبدیل موقعیت';
    }
  }
}

====================
فایل: address_form.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\widgets\address_form.dart
====================

import 'package:flutter/material.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

// این کنترلرها برای مدیریت مقادیر فرم آدرس استفاده می‌شوند
class AddressFormController {
  final TextEditingController streetController = TextEditingController();
  final TextEditingController houseNumberController = TextEditingController();
  final TextEditingController postalCodeController = TextEditingController();
  final TextEditingController cityController = TextEditingController();

  void dispose() {
    streetController.dispose();
    houseNumberController.dispose();
    postalCodeController.dispose();
    cityController.dispose();
  }
}

class AddressForm extends StatelessWidget {
  final AddressFormController controller;

  const AddressForm({super.key, required this.controller});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return Column(
      children: [
        // دکمه برای انتخاب آدرس از روی نقشه
        OutlinedButton.icon(
          icon: const Icon(Icons.map_outlined),
          label: const Text('انتخاب آدرس از روی نقشه'),
          onPressed: () {
            // TODO: Implement map address picker
            // در اینجا باید یک صفحه نقشه باز شود که کاربر بتواند پین را حرکت دهد
            // و پس از تایید، فیلدهای زیر به صورت خودکار پر شوند.
          },
          style: OutlinedButton.styleFrom(
            minimumSize: const Size(double.infinity, 40),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
        ),
        const SizedBox(height: 16),
        // فیلد خیابان
        TextFormField(
          controller: controller.streetController,
          decoration: const InputDecoration(
            labelText: 'خیابان',
            prefixIcon: Icon(Icons.signpost_outlined),
          ),
          validator: (value) =>
              (value?.isEmpty ?? true) ? 'نام خیابان را وارد کنید' : null,
        ),
        const SizedBox(height: 16),
        // فیلدهای شماره خانه و کد پستی در یک ردیف
        Row(
          children: [
            Expanded(
              child: TextFormField(
                controller: controller.houseNumberController,
                decoration: const InputDecoration(
                  labelText: 'شماره خانه',
                  prefixIcon: Icon(Icons.home_outlined),
                ),
                validator: (value) =>
                    (value?.isEmpty ?? true) ? 'شماره را وارد کنید' : null,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: TextFormField(
                controller: controller.postalCodeController,
                decoration: const InputDecoration(
                  labelText: 'کد پستی',
                  prefixIcon: Icon(Icons.local_post_office_outlined),
                ),
                keyboardType: TextInputType.number,
                validator: (value) =>
                    (value?.isEmpty ?? true) ? 'کد پستی را وارد کنید' : null,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        // فیلد شهر
        TextFormField(
          controller: controller.cityController,
          decoration: const InputDecoration(
            labelText: 'شهر',
            prefixIcon: Icon(Icons.location_city_outlined),
          ),
          validator: (value) =>
              (value?.isEmpty ?? true) ? 'نام شهر را وارد کنید' : null,
        ),
      ],
    );
  }
}


====================
فایل: error_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\widgets\error_view.dart
====================

import 'package:flutter/material.dart';

/// A reusable widget to display an error message with an optional retry button.
class AppErrorView extends StatelessWidget {
  final String message;
  final VoidCallback? onRetry;

  const AppErrorView({
    Key? key,
    required this.message,
    this.onRetry,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.cloud_off_rounded,
              color: Colors.red.shade300,
              size: 60,
            ),
            const SizedBox(height: 16),
            Text(
              'متاسفانه خطایی رخ داد!',
              style: Theme.of(context).textTheme.headlineSmall,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              message,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(color: Colors.grey.shade600),
              textAlign: TextAlign.center,
            ),
            if (onRetry != null) ...[
              const SizedBox(height: 24),
              ElevatedButton.icon(
                onPressed: onRetry,
                icon: const Icon(Icons.refresh),
                label: const Text('تلاش مجدد'),
              ),
            ],
          ],
        ),
      ),
    );
  }
}


====================
فایل: loading_shimmer.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\widgets\loading_shimmer.dart
====================

// lib/core/widgets/loading_shimmer.dart
import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

/// A reusable shimmer box widget to indicate loading state.
class ShimmerBox extends StatelessWidget {
  final double width;
  final double height;
  final ShapeBorder shape;

  const ShimmerBox({
    Key? key,
    required this.width,
    required this.height,
    this.shape = const RoundedRectangleBorder(),
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    bool isDarkMode = Theme.of(context).brightness == Brightness.dark;
    return Shimmer.fromColors(
      baseColor: isDarkMode ? Colors.grey.shade800 : Colors.grey.shade300,
      highlightColor: isDarkMode ? Colors.grey.shade700 : Colors.grey.shade100,
      child: Container(
        width: width,
        height: height,
        decoration: ShapeDecoration(
          color: Colors.grey,
          shape: shape,
        ),
      ),
    );
  }
}

====================
فایل: product_card_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\widgets\product_card_view.dart
====================

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_state.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_state.dart';

class ProductCardView extends StatelessWidget {
  final Product product;
  final Store store;

  const ProductCardView({super.key, required this.product, required this.store});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => context.go('/store/${store.storeID}?productId=${product.id}'),
      child: Container(
        width: 170,
        margin: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              spreadRadius: 1,
              blurRadius: 5,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Stack(
              children: [
                ClipRRect(
                  borderRadius: const BorderRadius.vertical(top: Radius.circular(12)),
                  child: Container(
                    height: 120,
                    width: double.infinity,
                    color: Colors.grey.shade100,
                    child: Image.network(
                      product.primaryImageUrl,
                      fit: BoxFit.contain,
                      errorBuilder: (_, __, ___) => Image.asset(
                        'assets/images/supermarket.png',
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                ),
                Positioned(
                  top: 4,
                  left: 4,
                  child: BlocBuilder<FavoritesCubit, FavoritesState>(
                    builder: (context, state) {
                      final isLiked = state.productIds.contains(product.id);
                      return IconButton(
                        onPressed: () => context.read<FavoritesCubit>().toggleLike(product.id),
                        icon: Icon(
                          isLiked ? Icons.favorite : Icons.favorite_border,
                          color: isLiked ? Colors.red : Colors.grey.shade400,
                          size: 24,
                        ),
                      );
                    },
                  ),
                ),
                if (product.isOnSale)
                  Positioned(
                    top: 8,
                    right: 8,
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: Colors.red.shade700,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        '%${((1 - product.effectivePrice / product.price) * 100).toStringAsFixed(0)}',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
              ],
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    product.name,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 4),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          if (product.isOnSale)
                            Text(
                              '€${product.price.toStringAsFixed(2)}',
                              style: TextStyle(
                                color: Colors.grey.shade500,
                                decoration: TextDecoration.lineThrough,
                                fontSize: 12,
                              ),
                            ),
                          Text(
                            '€${product.effectivePrice.toStringAsFixed(2)}',
                            style: TextStyle(
                              color: product.isOnSale ? Colors.red.shade700 : Colors.green.shade700,
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                        ],
                      ),
                      _CartQuantityController(productId: product.id, storeId: store.storeID),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _CartQuantityController extends StatelessWidget {
  final String productId;
  final String storeId;
  const _CartQuantityController({required this.productId, required this.storeId});

  @override
  Widget build(BuildContext context) {
    final cartCubit = context.read<CartCubit>();

    return BlocBuilder<CartCubit, CartState>(
      builder: (context, state) {
        final quantity = state.items[productId] ?? 0;

        if (quantity == 0) {
          return IconButton(
            onPressed: () => cartCubit.addProduct(productId, storeId),
            icon: const Icon(Icons.add_shopping_cart_outlined),
            color: Theme.of(context).colorScheme.primary,
            tooltip: 'افزودن به سبد خرید',
          );
        }

        return Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: const Icon(Icons.remove_circle_outline, size: 20),
              onPressed: () => cartCubit.removeProduct(productId),
            ),
            Text(quantity.toString(), style: Theme.of(context).textTheme.titleMedium),
            IconButton(
              icon: const Icon(Icons.add_circle_outline, size: 20),
              onPressed: () => cartCubit.addProduct(productId, storeId),
            ),
          ],
        );
      },
    );
  }
}

====================
فایل: product_list_item_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\widgets\product_list_item_view.dart
====================

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_state.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_state.dart';

class ProductListItemView extends StatelessWidget {
  final Product product;
  final Store store;
  final VoidCallback? onImageTap;

  const ProductListItemView({
    super.key,
    required this.product,
    required this.store,
    this.onImageTap,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 0,
      margin: const EdgeInsets.symmetric(vertical: 1, horizontal: 0),
      child: ListTile(
        onTap: () => context.go('/store/${store.storeID}?productId=${product.id}'),
        leading: GestureDetector(
          onTap: onImageTap,
          child: ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.network(
              product.primaryImageUrl,
              width: 60,
              height: 60,
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) => Image.asset(
                'assets/images/supermarket.png',
                width: 60,
                height: 60,
                fit: BoxFit.cover,
              ),
            ),
          ),
        ),
        title: Text(
          product.name,
          style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
        subtitle: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (product.isOnSale)
              Text(
                '€${product.price.toStringAsFixed(2)}',
                style: TextStyle(
                  color: Colors.grey.shade500,
                  decoration: TextDecoration.lineThrough,
                  fontSize: 12,
                ),
              ),
            if (product.isOnSale) const SizedBox(width: 8),
            Text(
              '€${product.effectivePrice.toStringAsFixed(2)}',
              style: TextStyle(
                color: product.isOnSale ? Colors.red : Colors.green,
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
            ),
          ],
        ),
        trailing: _ProductActions(product: product, store: store),
      ),
    );
  }
}

class _ProductActions extends StatelessWidget {
  final Product product;
  final Store store;
  const _ProductActions({required this.product, required this.store});

  @override
  Widget build(BuildContext context) {
    final cartCubit = context.read<CartCubit>();

    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        BlocBuilder<FavoritesCubit, FavoritesState>(
          builder: (context, state) {
            final isLiked = state.productIds.contains(product.id);
            return IconButton(
              onPressed: () => context.read<FavoritesCubit>().toggleLike(product.id),
              icon: Icon(
                isLiked ? Icons.favorite : Icons.favorite_border,
                color: isLiked ? Colors.red : Colors.grey,
              ),
            );
          },
        ),
        const SizedBox(width: 4),
        BlocBuilder<CartCubit, CartState>(
          builder: (context, state) {
            final quantity = state.items[product.id] ?? 0;

            if (quantity == 0) {
              return IconButton(
                onPressed: () => cartCubit.addProduct(product.id, store.storeID),
                icon: const Icon(Icons.add_circle_outline),
                color: Theme.of(context).colorScheme.primary,
                tooltip: 'افزودن به سبد خرید',
              );
            }

            return Row(
              children: [
                IconButton(
                  icon: const Icon(Icons.remove_circle_outline, size: 22),
                  onPressed: () => cartCubit.removeProduct(product.id),
                ),
                Text(quantity.toString(), style: Theme.of(context).textTheme.bodyLarge),
                IconButton(
                  icon: const Icon(Icons.add_circle_outline, size: 22),
                  onPressed: () => cartCubit.addProduct(product.id, store.storeID),
                ),
              ],
            );
          },
        ),
      ],
    );
  }
}

====================
فایل: store_list_item_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\core\widgets\store_list_item_view.dart
====================

// lib/core/widgets/store_list_item_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class StoreListItemView extends StatelessWidget {
  final Store store;
  const StoreListItemView({super.key, required this.store});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return GestureDetector(
      onTap: () => context.go('/store/${store.storeID}'),
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.08),
              blurRadius: 15,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Row(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: Image.network(
                  store.storeImage,
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) => Image.asset(
                    'assets/images/supermarket.png',
                    width: 80,
                    height: 80,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      store.name,
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '${store.address}, ${store.city}',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            color: Colors.grey.shade600,
                          ),
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Icon(Icons.star, color: Colors.amber.shade600, size: 18),
                        const SizedBox(width: 4),
                        Text(
                          store.rating.toString(),
                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                        ),
                        const SizedBox(width: 12),
                        Icon(Icons.location_on, color: Colors.grey.shade500, size: 18),
                        const SizedBox(width: 4),
                        BlocBuilder<LocationCubit, LocationState>(
                          builder: (context, locationState) {
                            if (locationState is LocationLoaded) {
                              final distance = Geolocator.distanceBetween(
                                locationState.position.latitude,
                                locationState.position.longitude,
                                store.latitude,
                                store.longitude,
                              );
                              final distanceText =
                                  '${(distance / 1000).toStringAsFixed(1)} ${l10n.km}';
                              return Text(
                                distanceText,
                                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                      color: Colors.grey.shade600,
                                    ),
                              );
                            }
                            return const SizedBox.shrink();
                          },
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

====================
فایل: auth_service.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\auth\data\services\auth_service.dart
====================

// مسیر: lib/features/auth/data/services/auth_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class AuthService {
  // ==================== اصلاح اصلی اینجاست ====================
  // آدرس پایه به آدرس اصلی سرور بدون هیچ پیشوند اضافی تغییر کرد.
  final String _baseUrl = 'https://persia-market-panel.onrender.com';
  // ==========================================================

  final http.Client _client;
  final SharedPreferences _prefs;

  // Key to store the auth token locally
  static const String _tokenKey = 'auth_token';

  AuthService({required http.Client client, required SharedPreferences prefs})
      : _client = client,
        _prefs = prefs;

  Future<String> register({
    required String name,
    required String email,
    required String password,
    String? city,
  }) async {
    // مسیر کامل و صحیح برای ثبت‌نام کاربر
    final response = await _client.post(
      Uri.parse('$_baseUrl/auth/user/register'), // <<<--- اصلاح شد
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'name': name,
        'email': email,
        'password': password,
        'city': city ?? '',
      }),
    );

    final responseBody = json.decode(response.body);
    if (response.statusCode >= 200 && response.statusCode < 300) {
      return 'ثبت‌نام با موفقیت انجام شد.';
    } else {
      throw Exception(responseBody['message'] ?? 'خطا در ثبت‌نام');
    }
  }

  Future<String> login({required String email, required String password}) async {
    // مسیر کامل و صحیح برای ورود کاربر
    final response = await _client.post(
      Uri.parse('$_baseUrl/auth/user/login'), // <<<--- اصلاح شد
      headers: {'Content-Type': 'application/json'},
      body: json.encode({'email': email, 'password': password}),
    );

    final responseBody = json.decode(response.body);
    if (response.statusCode >= 200 && response.statusCode < 300) {
      final token = responseBody['access_token'];
      await _prefs.setString(_tokenKey, token);
      return token;
    } else {
      throw Exception(responseBody['message'] ?? 'خطا در ورود');
    }
  }

  Future<void> logout() async {
    await _prefs.remove(_tokenKey);
  }

  String? getToken() {
    return _prefs.getString(_tokenKey);
  }

  bool isLoggedIn() {
    return _prefs.containsKey(_tokenKey);
  }
}

====================
فایل: auth_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\auth\presentation\cubit\auth_cubit.dart
====================

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/features/auth/data/services/auth_service.dart';
import 'auth_state.dart';

class AuthCubit extends Cubit<AuthState> {
  // FIXED: Made authService public by removing the underscore.
  final AuthService authService;

  AuthCubit({required this.authService}) : super(AuthInitial()) {
    checkAuthentication();
  }

  // Checks if a token exists locally to determine initial auth state.
  void checkAuthentication() {
    if (authService.isLoggedIn()) {
      emit(const Authenticated());
    } else {
      emit(Unauthenticated());
    }
  }

  Future<void> registerUser({
    required String name,
    required String email,
    required String password,
    String? city,
  }) async {
    emit(AuthLoading());
    try {
      await authService.register(
        name: name,
        email: email,
        password: password,
        city: city,
      );
      // After successful registration, move to Unauthenticated to prompt login
      emit(Unauthenticated());
    } catch (e) {
      emit(AuthError(e.toString().replaceAll('Exception: ', '')));
    }
  }

  Future<void> loginUser({
    required String email,
    required String password,
  }) async {
    emit(AuthLoading());
    try {
      await authService.login(email: email, password: password);
      emit(const Authenticated());
    } catch (e) {
      emit(AuthError(e.toString().replaceAll('Exception: ', '')));
    }
  }

  Future<void> logoutUser() async {
    await authService.logout();
    emit(Unauthenticated());
  }
}


====================
فایل: auth_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\auth\presentation\cubit\auth_state.dart
====================

import 'package:equatable/equatable.dart';

// An abstract class for all authentication states
abstract class AuthState extends Equatable {
  const AuthState();

  @override
  List<Object> get props => [];
}

// Initial state, user is not authenticated
class AuthInitial extends AuthState {}

// State when an auth process (login/register) is in progress
class AuthLoading extends AuthState {}

// State when the user is successfully authenticated
class Authenticated extends AuthState {
  // You can add user data here later, e.g., final User user;
  const Authenticated();
}

// State when the user is not authenticated (e.g., after logout or failed login)
class Unauthenticated extends AuthState {}

// State when an error occurs during the auth process
class AuthError extends AuthState {
  final String message;

  const AuthError(this.message);

  @override
  List<Object> get props => [message];
}


====================
فایل: login_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\auth\presentation\view\login_view.dart
====================

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/config/app_routes.dart';
// ==================== کد اصلاح شده اینجاست ====================
import 'package:persia_markt/core/cubit/locale_cubit.dart';
// ==========================================================
import 'package:persia_markt/features/auth/presentation/cubit/auth_cubit.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class LoginView extends StatefulWidget {
  const LoginView({super.key});

  @override
  State<LoginView> createState() => _LoginViewState();
}

class _LoginViewState extends State<LoginView> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoadingUi = false;
  bool _obscureText = true;

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  void _togglePasswordVisibility() {
    setState(() {
      _obscureText = !_obscureText;
    });
  }

  Future<void> _login() async {
    if (_formKey.currentState?.validate() ?? false) {
      context.read<AuthCubit>().loginUser(
            email: _emailController.text.trim(),
            password: _passwordController.text,
          );
      setState(() => _isLoadingUi = true);
    }
  }

  void _showLanguageDialog(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    showDialog(
      context: context,
      builder: (BuildContext dialogContext) {
        return SimpleDialog(
          title: Text(l10n.selectLanguage),
          children: <Widget>[
            SimpleDialogOption(
              onPressed: () {
                context.read<LocaleCubit>().changeLocale('fa');
                Navigator.pop(dialogContext);
              },
              child: Text(l10n.persian),
            ),
            SimpleDialogOption(
              onPressed: () {
                context.read<LocaleCubit>().changeLocale('en');
                Navigator.pop(dialogContext);
              },
              child: Text(l10n.english),
            ),
            SimpleDialogOption(
              onPressed: () {
                context.read<LocaleCubit>().changeLocale('de');
                Navigator.pop(dialogContext);
              },
              child: Text(l10n.german),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final l10n = AppLocalizations.of(context)!;
    final isRtl = l10n.localeName == 'fa';

    return Scaffold(
      body: SafeArea(
        child: BlocConsumer<AuthCubit, AuthState>(
          listener: (context, state) {
            if (state is Authenticated) {
              context.go(AppRoutes.home);
            } else if (state is AuthError) {
              setState(() => _isLoadingUi = false);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text(state.message)),
              );
            } else if (state is Unauthenticated || state is AuthInitial) {
              setState(() => _isLoadingUi = false);
            }
          },
          builder: (context, state) {
            final isLoading = state is AuthLoading || _isLoadingUi;

            return Stack(
              children: [
                Center(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(24.0),
                    child: Form(
                      key: _formKey,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          const SizedBox(height: 50),
                          Image.asset('assets/images/appLogo.png', height: 80),
                          const SizedBox(height: 16),
                          Text(
                            l10n.loginToYourAccount,
                            textAlign: TextAlign.center,
                            style: theme.textTheme.headlineMedium?.copyWith(fontWeight: FontWeight.bold),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            l10n.gladToSeeYouAgain,
                            textAlign: TextAlign.center,
                            style: theme.textTheme.titleMedium?.copyWith(color: Colors.grey),
                          ),
                          const SizedBox(height: 32),
                          _buildTextFormField(
                            controller: _emailController,
                            labelText: l10n.email,
                            icon: Icons.email_outlined,
                            keyboardType: TextInputType.emailAddress,
                            validator: (value) {
                              if (value == null || value.trim().isEmpty) return l10n.enterYourEmail;
                              if (!value.contains('@') || !value.contains('.')) return l10n.invalidEmail;
                              return null;
                            },
                          ),
                          const SizedBox(height: 16),
                          _buildTextFormField(
                            controller: _passwordController,
                            labelText: l10n.password,
                            icon: Icons.lock_outline,
                            obscureText: _obscureText,
                            suffixIcon: IconButton(
                              icon: Icon(_obscureText ? Icons.visibility_off : Icons.visibility),
                              onPressed: _togglePasswordVisibility,
                            ),
                            validator: (value) {
                              if (value == null || value.isEmpty) return l10n.enterYourPassword;
                              if (value.length < 6) return l10n.passwordTooShort(6);
                              return null;
                            },
                          ),
                          const SizedBox(height: 24),
                          isLoading
                              ? const Center(child: CircularProgressIndicator())
                              : ElevatedButton(
                                  onPressed: _login,
                                  style: ElevatedButton.styleFrom(
                                    padding: const EdgeInsets.symmetric(vertical: 14),
                                  ),
                                  child: Text(l10n.login),
                                ),
                          const SizedBox(height: 12),
                          TextButton(
                            onPressed: () => context.go(AppRoutes.register),
                            child: Text(l10n.noAccount),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                Positioned(
                  top: 16,
                  left: isRtl ? null : 16,
                  right: isRtl ? 16 : null,
                  child: TextButton.icon(
                    icon: const Icon(Icons.storefront_outlined, size: 20),
                    label: Text(l10n.sellerLogin),
                    onPressed: () => context.push(AppRoutes.sellerPanel),
                    style: _buttonStyle(theme),
                  ),
                ),
                Positioned(
                  top: 16,
                  right: isRtl ? null : 16,
                  left: isRtl ? 16 : null,
                  child: TextButton.icon(
                    icon: const Icon(Icons.language, size: 20),
                    label: Text(l10n.language),
                    onPressed: () => _showLanguageDialog(context),
                    style: _buttonStyle(theme),
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  ButtonStyle _buttonStyle(ThemeData theme) {
    return TextButton.styleFrom(
      foregroundColor: theme.colorScheme.primary,
      // ==================== کد اصلاح شده اینجاست ====================
      backgroundColor: theme.colorScheme.surface.withAlpha((255 * 0.9).round()),
      // ==========================================================
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
    );
  }

  Widget _buildTextFormField({
    required TextEditingController controller,
    required String labelText,
    required IconData icon,
    Widget? suffixIcon,
    TextInputType? keyboardType,
    bool obscureText = false,
    String? Function(String?)? validator,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: labelText,
        prefixIcon: Icon(icon),
        suffixIcon: suffixIcon,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      keyboardType: keyboardType,
      obscureText: obscureText,
      validator: validator,
    );
  }
}


====================
فایل: register_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\auth\presentation\view\register_view.dart
====================

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_cubit.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class RegisterView extends StatefulWidget {
  const RegisterView({super.key});

  @override
  State<RegisterView> createState() => _RegisterViewState();
}

class _RegisterViewState extends State<RegisterView> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  String? _selectedCity;
  bool _obscureText = true;

  final List<String> _germanCities = [
    'Berlin', 'Hamburg', 'Munich (München)', 'Cologne (Köln)', 'Frankfurt am Main',
    'Stuttgart', 'Düsseldorf', 'Dortmund', 'Essen', 'Leipzig', 'Bremen', 'Dresden',
    'Hanover (Hannover)', 'Nuremberg (Nürnberg)', 'Duisburg', 'Bochum', 'Wuppertal',
    'Bielefeld', 'Bonn', 'Münster'
  ];

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  void _togglePasswordVisibility() {
    setState(() {
      _obscureText = !_obscureText;
    });
  }

  void _register() {
    if (_formKey.currentState?.validate() ?? false) {
      context.read<AuthCubit>().registerUser(
            name: _nameController.text,
            email: _emailController.text,
            password: _passwordController.text,
            city: _selectedCity,
          );
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: SafeArea(
        child: BlocConsumer<AuthCubit, AuthState>(
          listener: (context, state) {
            if (state is AuthError) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                    content: Text(state.message), backgroundColor: Colors.red),
              );
            } else if (state is Unauthenticated) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text(l10n.registrationSuccess)),
              );
              context.go('/login');
            }
          },
          builder: (context, state) {
            final isLoading = state is AuthLoading;
            return Center(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(24.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Image.asset('assets/images/appLogo.png', height: 80),
                      const SizedBox(height: 16),
                      Text(
                        l10n.createAccount,
                        textAlign: TextAlign.center,
                        style: theme.textTheme.headlineMedium
                            ?.copyWith(fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        l10n.welcomeToPersiaMarkt,
                        textAlign: TextAlign.center,
                        style: theme.textTheme.titleMedium
                            ?.copyWith(color: Colors.grey),
                      ),
                      const SizedBox(height: 32),
                      _buildTextFormField(
                        controller: _nameController,
                        labelText: l10n.fullName,
                        icon: Icons.person_outline,
                        validator: (value) => (value?.isEmpty ?? true)
                            ? l10n.enterYourName
                            : null,
                      ),
                      const SizedBox(height: 16),
                      _buildTextFormField(
                        controller: _emailController,
                        labelText: l10n.email,
                        icon: Icons.email_outlined,
                        keyboardType: TextInputType.emailAddress,
                        validator: (value) {
                          if (value?.isEmpty ?? true) return l10n.enterYourEmail;
                          if (!RegExp(r'^[^@]+@[^@]+\.[^@]+')
                              .hasMatch(value!)) return l10n.invalidEmail;
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),
                      _buildTextFormField(
                        controller: _passwordController,
                        labelText: l10n.password,
                        icon: Icons.lock_outline,
                        obscureText: _obscureText,
                        suffixIcon: IconButton(
                          icon: Icon(_obscureText
                              ? Icons.visibility_off_outlined
                              : Icons.visibility_outlined),
                          onPressed: _togglePasswordVisibility,
                        ),
                        validator: (value) => (value?.length ?? 0) < 8
                            ? l10n.passwordTooShort(8)
                            : null,
                      ),
                      const SizedBox(height: 16),
                      DropdownButtonFormField<String>(
                        value: _selectedCity,
                        items: _germanCities.map((String city) {
                          return DropdownMenuItem<String>(
                            value: city,
                            child: Text(city),
                          );
                        }).toList(),
                        onChanged: (newValue) {
                          setState(() {
                            _selectedCity = newValue;
                          });
                        },
                        decoration: InputDecoration(
                          labelText: l10n.city,
                          prefixIcon: const Icon(Icons.location_city_outlined),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        validator: (value) =>
                            value == null ? l10n.selectCity : null,
                      ),
                      const SizedBox(height: 24),
                      isLoading
                          ? const Center(child: CircularProgressIndicator())
                          : ElevatedButton(
                              onPressed: _register,
                              style: ElevatedButton.styleFrom(
                                padding:
                                    const EdgeInsets.symmetric(vertical: 16),
                              ),
                              child: Text(l10n.register),
                            ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(l10n.haveAccount),
                          TextButton(
                            onPressed: () => context.go('/login'),
                            child: Text(l10n.login),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  TextFormField _buildTextFormField({
    required TextEditingController controller,
    required String labelText,
    required IconData icon,
    String? Function(String?)? validator,
    TextInputType? keyboardType,
    bool obscureText = false,
    Widget? suffixIcon,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: labelText,
        prefixIcon: Icon(icon),
        suffixIcon: suffixIcon,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      keyboardType: keyboardType,
      obscureText: obscureText,
      validator: validator,
    );
  }
}


====================
فایل: cart_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\cart\presentation\cubit\cart_cubit.dart
====================

// lib/features/cart/presentation/cubit/cart_cubit.dart
import 'dart:convert';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'cart_state.dart';

class CartCubit extends Cubit<CartState> {
  final SharedPreferences _sharedPreferences;
  static const _itemsKey = 'cart_items_map';
  static const _selectedStoresKey = 'cart_selected_stores';

  CartCubit({required SharedPreferences sharedPreferences})
      : _sharedPreferences = sharedPreferences,
        super(const CartState(items: {}, selectedStoreIds: []));

  void loadCartProducts() {
    final cartItemsString = _sharedPreferences.getString(_itemsKey);
    final selectedStores =
        _sharedPreferences.getStringList(_selectedStoresKey) ?? [];

    Map<String, int> cartItems = {};
    if (cartItemsString != null) {
      try {
        final Map<String, dynamic> decodedMap = json.decode(cartItemsString);
        cartItems =
            decodedMap.map((key, value) => MapEntry(key, value as int));
      } catch (e) {
        cartItems = {};
      }
    }
    emit(CartState(items: cartItems, selectedStoreIds: selectedStores));
  }

  Future<void> _saveState() async {
    final String encodedMap = json.encode(state.items);
    await _sharedPreferences.setString(_itemsKey, encodedMap);
    await _sharedPreferences.setStringList(
        _selectedStoresKey, state.selectedStoreIds);
  }

  void addProduct(String productId, String storeId) {
    final newItems = Map<String, int>.from(state.items);
    final newSelectedStores = List<String>.from(state.selectedStoreIds);

    newItems.update(productId, (value) => value + 1, ifAbsent: () => 1);

    if (!newSelectedStores.contains(storeId)) {
      newSelectedStores.add(storeId);
    }

    emit(CartState(items: newItems, selectedStoreIds: newSelectedStores));
    _saveState();
  }

  void removeProduct(String productId) {
    final newItems = Map<String, int>.from(state.items);
    if (newItems.containsKey(productId)) {
      if (newItems[productId]! > 1) {
        newItems.update(productId, (value) => value - 1);
      } else {
        newItems.remove(productId);
      }
      emit(CartState(items: newItems, selectedStoreIds: state.selectedStoreIds));
      _saveState();
    }
  }

  void clearProductFromCart(String productId) {
    final newItems = Map<String, int>.from(state.items);
    if (newItems.containsKey(productId)) {
      newItems.remove(productId);
      emit(CartState(items: newItems, selectedStoreIds: state.selectedStoreIds));
      _saveState();
    }
  }

  void toggleStoreSelection(String storeId) {
    final newSelectedStores = List<String>.from(state.selectedStoreIds);
    if (newSelectedStores.contains(storeId)) {
      newSelectedStores.remove(storeId);
    } else {
      newSelectedStores.add(storeId);
    }
    emit(CartState(items: state.items, selectedStoreIds: newSelectedStores));
    _saveState();
  }

  // <<< متد کاملاً جدید برای خالی کردن کامل سبد خرید
  Future<void> clearCart() async {
    emit(const CartState(items: {}, selectedStoreIds: []));
    await _saveState();
  }
}

====================
فایل: cart_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\cart\presentation\cubit\cart_state.dart
====================

// lib/features/cart/presentation/cubit/cart_state.dart
import 'package:equatable/equatable.dart';

class CartState extends Equatable {
  // Map<productId, quantity>
  final Map<String, int> items;
  // ID فروشگاه‌هایی که برای پرداخت انتخاب شده‌اند را نگه می‌دارد
  final List<String> selectedStoreIds;

  const CartState({required this.items, required this.selectedStoreIds});

  @override
  List<Object> get props => [items, selectedStoreIds];
}

====================
فایل: cart_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\cart\presentation\view\cart_view.dart
====================

// lib/features/cart/presentation/view/cart_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/config/app_routes.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class CartView extends StatelessWidget {
  const CartView({super.key});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(title: Text(l10n.yourShoppingCart)),
      body: BlocBuilder<MarketDataBloc, MarketDataState>(
        builder: (context, marketState) {
          if (marketState is! MarketDataLoaded) {
            return const Center(child: CircularProgressIndicator());
          }

          return BlocBuilder<CartCubit, CartState>(
            builder: (context, cartState) {
              if (cartState.items.isEmpty) {
                return Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.shopping_cart_outlined,
                          size: 100, color: Colors.grey.shade400),
                      const SizedBox(height: 24),
                      Text(
                        l10n.yourCartIsEmpty,
                        style: Theme.of(context).textTheme.headlineSmall,
                      ),
                    ],
                  ),
                );
              }

              final cartProducts = marketState.marketData.products
                  .where((p) => cartState.items.containsKey(p.id))
                  .toList();

              final Map<String, List<Product>> productsByStore = {};
              for (var product in cartProducts) {
                productsByStore.putIfAbsent(product.storeID, () => []).add(product);
              }

              final double grandTotal = cartProducts.fold(0, (sum, item) {
                if (cartState.selectedStoreIds.contains(item.storeID)) {
                  final quantity = cartState.items[item.id] ?? 0;
                  return sum + (item.effectivePrice * quantity);
                }
                return sum;
              });

              return Column(
                children: [
                  Expanded(
                    child: ListView.builder(
                      padding: const EdgeInsets.only(top: 8, bottom: 8),
                      itemCount: productsByStore.keys.length,
                      itemBuilder: (context, index) {
                        final storeId = productsByStore.keys.elementAt(index);
                        final store = marketState.marketData.stores
                            .firstWhere((s) => s.storeID == storeId);
                        final productsInStore = productsByStore[storeId]!;
                        final isStoreSelected = cartState.selectedStoreIds.contains(storeId);

                        final double storeSubtotal =
                            productsInStore.fold(0, (sum, item) {
                          final quantity = cartState.items[item.id] ?? 0;
                          return sum + (item.effectivePrice * quantity);
                        });

                        return Opacity(
                          opacity: isStoreSelected ? 1.0 : 0.5,
                          child: Card(
                            margin: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                SwitchListTile(
                                  title: Text(store.name,
                                      style: Theme.of(context)
                                          .textTheme
                                          .titleLarge),
                                  value: isStoreSelected,
                                  onChanged: (bool value) {
                                    context
                                        .read<CartCubit>()
                                        .toggleStoreSelection(store.storeID);
                                  },
                                ),
                                const Divider(height: 1),
                                ...productsInStore.map((p) => _CartItemTile(
                                      product: p,
                                      quantity: cartState.items[p.id]!,
                                      isEnabled: isStoreSelected,
                                    )),
                                Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      'جمع: €${storeSubtotal.toStringAsFixed(2)}',
                                      style: const TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: 16),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                  _buildCheckoutSection(context, grandTotal),
                ],
              );
            },
          );
        },
      ),
    );
  }

  Widget _buildCheckoutSection(BuildContext context, double grandTotal) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, -5),
          ),
        ],
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text('مجموع کل:', style: Theme.of(context).textTheme.headlineSmall),
              Text(
                '€${grandTotal.toStringAsFixed(2)}',
                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                      color: Theme.of(context).colorScheme.primary,
                      fontWeight: FontWeight.bold,
                    ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: grandTotal > 0 ? () {
              context.push(AppRoutes.checkout);
            } : null,
            style: ElevatedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
              textStyle:
                  Theme.of(context).textTheme.titleLarge?.copyWith(color: Colors.white),
            ),
            child: const Text('ادامه فرآیند خرید'),
          ),
        ],
      ),
    );
  }
}

class _CartItemTile extends StatelessWidget {
  final Product product;
  final int quantity;
  final bool isEnabled;

  const _CartItemTile({
    required this.product,
    required this.quantity,
    this.isEnabled = true,
  });

  @override
  Widget build(BuildContext context) {
    final cartCubit = context.read<CartCubit>();

    return ListTile(
      leading: ClipRRect(
        borderRadius: BorderRadius.circular(8),
        child: Image.network(
          product.primaryImageUrl,
          width: 50,
          height: 50,
          fit: BoxFit.cover,
        ),
      ),
      title: Text(product.name),
      subtitle: Text('€${product.effectivePrice.toStringAsFixed(2)}'),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          IconButton(
            icon: const Icon(Icons.remove_circle_outline),
            onPressed: isEnabled ? () => cartCubit.removeProduct(product.id) : null,
            tooltip: 'کم کردن',
          ),
          Text(quantity.toString(),
              style: Theme.of(context).textTheme.titleMedium),
          IconButton(
            icon: const Icon(Icons.add_circle_outline),
            onPressed: isEnabled ? () => cartCubit.addProduct(product.id, product.storeID) : null,
            tooltip: 'اضافه کردن',
          ),
          IconButton(
            icon: Icon(Icons.delete_outline, color: Colors.red.shade300),
            onPressed: isEnabled ? () => cartCubit.clearProductFromCart(product.id) : null,
            tooltip: 'حذف کامل',
          ),
        ],
      ),
    );
  }
}

====================
فایل: category_detail_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\category\view\category_detail_view.dart
====================

// lib/features/category/view/category_detail_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/core/widgets/product_card_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class CategoryDetailView extends StatelessWidget {
  final String categoryId;
  const CategoryDetailView({super.key, required this.categoryId});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return Directionality(
      textDirection:
          l10n.localeName == 'fa' ? TextDirection.rtl : TextDirection.ltr,
      child: Scaffold(
        body: BlocBuilder<MarketDataBloc, MarketDataState>(
          builder: (context, state) {
            if (state is! MarketDataLoaded) {
              return const Center(child: CircularProgressIndicator());
            }

            final categoriesFound = state.marketData.categories
                .where((c) => c.id == categoryId)
                .toList();
            
            if (categoriesFound.isEmpty) {
              return Center(
                  child: Text('Category with ID $categoryId not found.'));
            }
            final category = categoriesFound.first;

            final productsInCategory = state.marketData.products
                .where((p) => p.categoryID == categoryId)
                .toList();

            final Map<String, List<Product>> productsByStore = {};
            for (var product in productsInCategory) {
              productsByStore.putIfAbsent(product.storeID, () => []).add(product);
            }
            final stores = state.marketData.stores
                .where((s) => productsByStore.keys.contains(s.storeID))
                .toList();

            return CustomScrollView(
              slivers: [
                SliverAppBar(
                  title: Text(category.name),
                  pinned: true,
                  floating: true,
                ),
                if (productsInCategory.isEmpty)
                  SliverFillRemaining(
                    child: Center(child: Text(l10n.noProductsInCategory)),
                  )
                else
                  SliverPadding(
                    padding: const EdgeInsets.symmetric(vertical: 8.0),
                    sliver: SliverList(
                      delegate: SliverChildBuilderDelegate(
                        (context, index) {
                          final store = stores[index];
                          final productsInStore = productsByStore[store.storeID]!;
                          return _StoreProductsCard(
                              store: store, products: productsInStore);
                        },
                        childCount: stores.length,
                      ),
                    ),
                  ),
              ],
            );
          },
        ),
      ),
    );
  }
}

// <<< ویجت جدید و زیبا برای نمایش کارت هر فروشگاه با لیست افقی محصولات
class _StoreProductsCard extends StatelessWidget {
  const _StoreProductsCard({
    required this.store,
    required this.products,
  });

  final Store store;
  final List<Product> products;

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ListTile(
            leading: ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: Image.network(
                store.storeImage,
                width: 50,
                height: 50,
                fit: BoxFit.cover,
              ),
            ),
            title: Text(store.name,
                style: const TextStyle(fontWeight: FontWeight.bold)),
            subtitle: Text(store.address),
            trailing: TextButton(
              onPressed: () => context.go('/store/${store.storeID}'),
              child: Text(l10n.viewStore),
            ),
          ),
          const Divider(height: 1, indent: 16, endIndent: 16),
          SizedBox(
            height: 260, // ارتفاع مناسب برای ProductCardView
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: products.length,
              padding: const EdgeInsets.all(12),
              itemBuilder: (context, productIndex) {
                return ProductCardView(
                  product: products[productIndex],
                  store: store,
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

====================
فایل: checkout_service.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\checkout\data\services\checkout_service.dart
====================

// lib/features/checkout/data/services/checkout_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:persia_markt/core/models/order.dart';
import 'package:persia_markt/features/auth/data/services/auth_service.dart';

class CheckoutService {
  final String _baseUrl = 'https://persia-market-panel.onrender.com';
  final http.Client _client;
  final AuthService _authService;

  CheckoutService({required http.Client client, required AuthService authService})
      : _client = client,
        _authService = authService;

  // <<< اصلاح شد: این متد حالا لیستی از سفارشات ایجاد شده را برمی‌گرداند
  Future<List<Order>> placeOrder({
    required Map<String, String> address,
    required List<Map<String, dynamic>> items,
  }) async {
    final token = _authService.getToken();
    if (token == null) {
      throw Exception('برای ثبت سفارش باید ابتدا وارد شوید.');
    }

    final response = await _client.post(
      Uri.parse('$_baseUrl/checkout'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: json.encode({
        'address': address,
        'items': items,
      }),
    );

    if (response.statusCode >= 200 && response.statusCode < 300) {
      final List<dynamic> data = json.decode(utf8.decode(response.bodyBytes));
      return data.map((json) => Order.fromJson(json)).toList();
    } else {
      final errorBody = json.decode(response.body);
      throw Exception(errorBody['message'] ?? 'خطا در ثبت سفارش');
    }
  }
}

====================
فایل: checkout_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\checkout\presentation\cubit\checkout_cubit.dart
====================

// lib/features/checkout/presentation/cubit/checkout_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart';
import 'package:persia_markt/features/checkout/data/services/checkout_service.dart';
import 'package:persia_markt/features/order_history/presentation/cubit/order_history_cubit.dart';
import 'checkout_state.dart';

class CheckoutCubit extends Cubit<CheckoutState> {
  final CheckoutService _checkoutService;
  final CartCubit _cartCubit;
  final OrderHistoryCubit _orderHistoryCubit;

  CheckoutCubit({
    required CheckoutService checkoutService,
    required CartCubit cartCubit,
    required OrderHistoryCubit orderHistoryCubit,
  })  : _checkoutService = checkoutService,
        _cartCubit = cartCubit,
        _orderHistoryCubit = orderHistoryCubit,
        super(CheckoutInitial());

  Future<void> submitOrder({
    required Map<String, String> address,
    required List<Map<String, dynamic>> items,
  }) async {
    emit(CheckoutLoading());
    try {
      final newOrders = await _checkoutService.placeOrder(
        address: address,
        items: items,
      );

      // <<< اصلاح اصلی ۱: پس از موفقیت، متد clearCart را فراخوانی می‌کنیم
      await _cartCubit.clearCart();

      // <<< اصلاح اصلی ۲: سفارشات جدید را به ابتدای لیست تاریخچه اضافه می‌کنیم
      _orderHistoryCubit.addOrdersToState(newOrders);

      emit(CheckoutSuccess());
    } catch (e) {
      emit(CheckoutError(e.toString().replaceAll('Exception: ', '')));
    }
  }
}

====================
فایل: checkout_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\checkout\presentation\cubit\checkout_state.dart
====================

// lib/features/checkout/presentation/cubit/checkout_state.dart
import 'package:equatable/equatable.dart';

abstract class CheckoutState extends Equatable {
  const CheckoutState();
  @override
  List<Object> get props => [];
}

class CheckoutInitial extends CheckoutState {}

class CheckoutLoading extends CheckoutState {}

class CheckoutSuccess extends CheckoutState {}

class CheckoutError extends CheckoutState {
  final String message;
  const CheckoutError(this.message);
  @override
  List<Object> get props => [message];
}

====================
فایل: checkout_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\checkout\presentation\view\checkout_view.dart
====================

// lib/features/checkout/presentation/view/checkout_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/config/app_routes.dart';
import 'package:persia_markt/core/widgets/address_form.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart';
import 'package:persia_markt/features/checkout/presentation/cubit/checkout_cubit.dart';
import 'package:persia_markt/features/checkout/presentation/cubit/checkout_state.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';

class CheckoutView extends StatefulWidget {
  const CheckoutView({super.key});

  @override
  State<CheckoutView> createState() => _CheckoutViewState();
}

class _CheckoutViewState extends State<CheckoutView> {
  final _formKey = GlobalKey<FormState>();
  final _addressController = AddressFormController();

  @override
  void dispose() {
    _addressController.dispose();
    super.dispose();
  }

  void _submitOrder() {
    if (_formKey.currentState?.validate() ?? false) {
      final address = {
        'street': _addressController.streetController.text,
        'houseNumber': _addressController.houseNumberController.text,
        'postalCode': _addressController.postalCodeController.text,
        'city': _addressController.cityController.text,
      };

      final cartState = context.read<CartCubit>().state;
      final marketState = context.read<MarketDataBloc>().state;

      if (marketState is MarketDataLoaded) {
        final productMap = {
          for (var p in marketState.marketData.products) p.id: p
        };

        final itemsToCheckout = cartState.items.entries
            .where((entry) {
              final productId = entry.key;
              final product = productMap[productId];
              return product != null &&
                  cartState.selectedStoreIds.contains(product.storeID);
            })
            .map((entry) => {
                  'storeProductId': int.parse(entry.key),
                  'quantity': entry.value
                })
            .toList();

        if (itemsToCheckout.isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
                content: Text(
                    'لطفاً حداقل یک فروشگاه را برای نهایی کردن خرید انتخاب کنید.')),
          );
          return;
        }

        context
            .read<CheckoutCubit>()
            .submitOrder(address: address, items: itemsToCheckout);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('تکمیل خرید'),
      ),
      body: BlocListener<CheckoutCubit, CheckoutState>(
        listener: (context, state) {
          if (state is CheckoutSuccess) {
            // <<< اصلاح اصلی اینجاست
            // 1. ابتدا به صفحه اصلی برمی‌گردیم تا مسیر پاک شود
            context.go(AppRoutes.home);
            // 2. سپس صفحه تاریخچه را روی آن باز می‌کنیم تا دکمه بازگشت داشته باشد
            context.push(AppRoutes.orderHistory);
            
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                  content: Text(
                      'سفارش شما با موفقیت ثبت شد! می‌توانید وضعیت آن را اینجا ببینید.')),
            );
          }
          if (state is CheckoutError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                  content: Text(state.message), backgroundColor: Colors.red),
            );
          }
        },
        child: BlocBuilder<CheckoutCubit, CheckoutState>(
          builder: (context, state) {
            if (state is CheckoutLoading) {
              return const Center(child: CircularProgressIndicator());
            }
            return SingleChildScrollView(
              padding: const EdgeInsets.all(24.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Text('آدرس تحویل', style: theme.textTheme.headlineSmall),
                    const SizedBox(height: 16),
                    AddressForm(controller: _addressController),
                    const Divider(height: 48),
                    ElevatedButton(
                      onPressed: _submitOrder,
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        textStyle: theme.textTheme.titleLarge
                            ?.copyWith(color: Colors.white),
                      ),
                      child: const Text('ثبت نهایی سفارش'),
                    )
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

====================
فایل: market_repository.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\data\repositories\market_repository.dart
====================

// lib/features/home/domain/repositories/market_repository.dart
import 'package:fpdart/fpdart.dart';
import 'package:persia_markt/core/error/failures.dart';
import 'package:persia_markt/core/models/market_data.dart';

/// Abstract contract for the market data repository.
/// This allows the business logic layer (BLoC) to depend on an abstraction,
/// not a concrete implementation, which is crucial for testing and modularity.
abstract class MarketRepository {
  /// Fetches the market data.
  /// Returns [Either] a [Failure] on error or [MarketData] on success.
  Future<Either<Failure, MarketData>> getMarketData();
}

====================
فایل: market_repository_impl.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\data\repositories\market_repository_impl.dart
====================

import 'package:fpdart/fpdart.dart';
import 'package:persia_markt/core/error/failures.dart';
import 'package:persia_markt/core/models/market_data.dart';
import 'package:persia_markt/core/services/api_service.dart';
import 'package:persia_markt/features/home/domain/repositories/market_repository.dart';

class MarketRepositoryImpl implements MarketRepository {
  final ApiService _apiService;

  const MarketRepositoryImpl({required ApiService apiService})
      : _apiService = apiService;

  @override
  Future<Either<Failure, MarketData>> getMarketData() async {
    try {
      // 1. Fetch the raw JSON data from the optimized ApiService.
      final Map<String, dynamic> marketDataJson =
          await _apiService.fetchMarketDataAsJson();

      // 2. Parse the JSON into a strongly-typed MarketData model.
      final marketData = MarketData.fromJson(marketDataJson);

      // 3. Return the successful result wrapped in a Right.
      return Right(marketData);
    } on Exception catch (e) {
      // 4. On any exception from the service layer, catch it and return
      //    a standardized ServerFailure with a user-friendly message.
      return Left(ServerFailure(e.toString().replaceAll('Exception: ', '')));
    }
  }
}


====================
فایل: market_repository.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\domain\repositories\market_repository.dart
====================

// lib/features/home/domain/repositories/market_repository.dart
import 'package:fpdart/fpdart.dart';
import 'package:persia_markt/core/error/failures.dart';
import 'package:persia_markt/core/models/market_data.dart';

/// Abstract contract for the market data repository.
/// This allows the business logic layer (BLoC) to depend on an abstraction,
/// not a concrete implementation, which is crucial for testing and modularity.
///
/// It defines what the repository *must do*, but not *how* it does it.
abstract class MarketRepository {
  /// Fetches the market data.
  /// Returns [Either] a [Failure] on error or [MarketData] on success.
  /// The Either type from fpdart provides excellent, explicit error handling.
  Future<Either<Failure, MarketData>> getMarketData();
}

====================
فایل: market_data_bloc.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\bloc\market_data_bloc.dart
====================

// lib/features/home/presentation/bloc/market_data_bloc.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/features/home/domain/repositories/market_repository.dart';
import 'market_data_event.dart';
import 'market_data_state.dart';

class MarketDataBloc extends Bloc<MarketDataEvent, MarketDataState> {
  final MarketRepository _marketRepository;

  MarketDataBloc({required MarketRepository marketRepository})
      : _marketRepository = marketRepository,
        super(MarketDataInitial()) {
    // Register the event handler
    on<FetchMarketDataEvent>(_onFetchMarketData);
  }

  /// Handles the FetchMarketDataEvent.
  Future<void> _onFetchMarketData(
    FetchMarketDataEvent event,
    Emitter<MarketDataState> emit,
  ) async {
    emit(MarketDataLoading());
    final failureOrMarketData = await _marketRepository.getMarketData();
    
    // Use .fold for elegant handling of the Either<Failure, Success> type.
    // The first function handles the Left (Failure) case, the second handles the Right (Success) case.
    failureOrMarketData.fold(
      (failure) => emit(MarketDataError(message: failure.message)),
      (marketData) => emit(MarketDataLoaded(marketData: marketData)),
    );
  }
}

====================
فایل: market_data_event.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\bloc\market_data_event.dart
====================

// lib/features/home/presentation/bloc/market_data_event.dart
import 'package:equatable/equatable.dart';

abstract class MarketDataEvent extends Equatable {
  const MarketDataEvent();
  @override
  List<Object> get props => [];
}

/// Event to trigger fetching market data from the repository.
class FetchMarketDataEvent extends MarketDataEvent {}

====================
فایل: market_data_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\bloc\market_data_state.dart
====================

// lib/features/home/presentation/bloc/market_data_state.dart
import 'package:equatable/equatable.dart';
import 'package:persia_markt/core/models/market_data.dart';

abstract class MarketDataState extends Equatable {
  const MarketDataState();
  @override
  List<Object> get props => [];
}

class MarketDataInitial extends MarketDataState {}

class MarketDataLoading extends MarketDataState {}

class MarketDataLoaded extends MarketDataState {
  final MarketData marketData;
  const MarketDataLoaded({required this.marketData});
  @override
  List<Object> get props => [marketData];
}

class MarketDataError extends MarketDataState {
  final String message;
  const MarketDataError({required this.message});
  @override
  List<Object> get props => [message];
}

====================
فایل: location_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\cubit\location_cubit.dart
====================

// lib/features/home/presentation/cubit/location_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/services/location_service.dart';
import 'location_state.dart';

/// Manages the state for user location.
/// It interacts with the LocationService to fetch the current position and address.
class LocationCubit extends Cubit<LocationState> {
  final LocationService _locationService;

  LocationCubit({required LocationService locationService})
      : _locationService = locationService,
        super(LocationInitial());

  /// Fetches the user's current location and address.
  /// Emits [LocationLoading], followed by [LocationLoaded] on success
  /// or [LocationError] on failure.
  Future<void> fetchLocation() async {
    emit(LocationLoading());
    try {
      final position = await _locationService.getCurrentPosition();
      final address = await _locationService.getAddressFromPosition(position);
      emit(LocationLoaded(position: position, address: address));
    } catch (e) {
      emit(LocationError(message: e.toString()));
    }
  }
}

====================
فایل: location_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\cubit\location_state.dart
====================

// lib/features/home/presentation/cubit/location_state.dart
import 'package:equatable/equatable.dart';
import 'package:geolocator/geolocator.dart';

/// Base class for all location-related states.
abstract class LocationState extends Equatable {
  const LocationState();
  @override
  List<Object?> get props => [];
}

/// The initial state before any location fetching has started.
class LocationInitial extends LocationState {}

/// The state while the location is being fetched.
class LocationLoading extends LocationState {}

/// The state when the location has been successfully fetched.
class LocationLoaded extends LocationState {
  final Position position;
  final String address;

  const LocationLoaded({required this.position, required this.address});

  @override
  List<Object?> get props => [position, address];
}

/// The state when an error occurs during location fetching.
class LocationError extends LocationState {
  final String message;

  const LocationError({required this.message});

  @override
  List<Object?> get props => [message];
}

====================
فایل: market_data_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\cubit\market_data_cubit.dart
====================

// lib/features/home/presentation/cubit/market_data_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/services/api_service.dart';
import 'package:persia_markt/core/models/market_data.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';

class MarketDataCubit extends Cubit<MarketDataState> {
  final ApiService _apiService;

  MarketDataCubit({required ApiService apiService})
      : _apiService = apiService,
        super(MarketDataLoading()); // ← const حذف شد

  /// دریافت داده‌ی بازار و انتشار State مناسب
  Future<void> fetchMarketData() async {
    try {
      emit(MarketDataLoading()); // ← const حذف شد

      final Map<String, dynamic> json = await _apiService.fetchMarketDataAsJson();
      final MarketData data = MarketData.fromJson(json);

      emit(MarketDataLoaded(marketData: data));
    } catch (e) {
      emit(MarketDataError(message: 'خطا در دریافت اطلاعات: ${e.toString()}'));
    }
  }
}


====================
فایل: market_data_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\cubit\market_data_state.dart
====================

import 'package:equatable/equatable.dart';
import 'package:persia_markt/core/models/market_data.dart';

// کلاس پایه برای وضعیت‌ها
abstract class MarketDataState extends Equatable {
  const MarketDataState();

  @override
  List<Object> get props => [];
}

// وضعیت اولیه یا در حال بارگذاری
class MarketDataLoading extends MarketDataState {}

// وضعیت موفقیت آمیز بودن دریافت داده‌ها
class MarketDataLoaded extends MarketDataState {
  final MarketData marketData;

  const MarketDataLoaded({required this.marketData});

  @override
  List<Object> get props => [marketData];
}

// وضعیت بروز خطا
class MarketDataError extends MarketDataState {
  final String message;

  const MarketDataError({required this.message});

  @override
  List<Object> get props => [message];
}

====================
فایل: home_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\view\home_view.dart
====================

// lib/features/home/presentation/view/home_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/config/app_routes.dart';
import 'package:persia_markt/core/widgets/error_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_event.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/home/presentation/widgets/banner_carousel_view.dart';
import 'package:persia_markt/features/home/presentation/widgets/category_list_view.dart';
import 'package:persia_markt/features/home/presentation/widgets/home_header.dart';
import 'package:persia_markt/features/home/presentation/widgets/home_loading_shimmer.dart';
import 'package:persia_markt/features/home/presentation/widgets/section_header.dart';
import 'package:persia_markt/features/home/presentation/widgets/special_offers_section.dart';
import 'package:persia_markt/features/home/presentation/widgets/stores_by_city_section.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class HomeView extends StatelessWidget {
  const HomeView({super.key});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return Directionality(
      textDirection:
          l10n.localeName == 'fa' ? TextDirection.rtl : TextDirection.ltr,
      child: Scaffold(
        body: BlocBuilder<MarketDataBloc, MarketDataState>(
          builder: (context, state) {
            if (state is MarketDataInitial) {
              return _InitialLoadingView();
            }
            if (state is MarketDataLoading) {
              return const HomeLoadingShimmer();
            }
            if (state is MarketDataError) {
              return AppErrorView(
                message: state.message,
                onRetry: () =>
                    context.read<MarketDataBloc>().add(FetchMarketDataEvent()),
              );
            }
            if (state is MarketDataLoaded) {
              final marketData = state.marketData;

              if (marketData.stores.isEmpty && marketData.categories.isEmpty) {
                return AppErrorView(
                  message: l10n.noDataAvailable,
                  onRetry: () => context
                      .read<MarketDataBloc>()
                      .add(FetchMarketDataEvent()),
                );
              }

              return RefreshIndicator(
                onRefresh: () async {
                  context.read<MarketDataBloc>().add(FetchMarketDataEvent());
                },
                child: CustomScrollView(
                  slivers: [
                    HomeHeader(
                        onSearchTapped: () => context.push(AppRoutes.search)),
                    SliverList(
                      delegate: SliverChildListDelegate([
                        const SizedBox(height: 24),
                        CategoryListView(categories: marketData.categories),
                        const SizedBox(height: 24),
                        const BannerCarouselView(
                          bannerImageUrls: [
                            'assets/images/banner1.png',
                            'assets/images/banner2.png',
                            'assets/images/banner3.png',
                          ],
                        ),
                        SectionHeader(title: l10n.specialOffers),
                        SpecialOffersSection(
                          products: marketData.products,
                          stores: marketData.stores,
                        ),
                        SectionHeader(title: l10n.stores),
                        StoresByCitySection(stores: marketData.stores),
                        const SizedBox(height: 50),
                      ]),
                    ),
                  ],
                ),
              );
            }
            return const SizedBox.shrink();
          },
        ),
      ),
    );
  }
}

class _InitialLoadingView extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const CircularProgressIndicator(),
          const SizedBox(height: 24),
          Text(
            l10n.connectingToServer,
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 8),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 32.0),
            child: Text(
              l10n.initialLoadingMessage,
              textAlign: TextAlign.center,
              style: Theme.of(context)
                  .textTheme
                  .bodyMedium
                  ?.copyWith(color: Colors.grey.shade600),
            ),
          ),
        ],
      ),
    );
  }
}

====================
فایل: main_tab_bar_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\view\main_tab_bar_view.dart
====================

// lib/features/home/presentation/view/main_tab_bar_view.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart'; // <<< ایمپورت جدید
import 'package:go_router/go_router.dart';
import 'package:persia_markt/features/cart/presentation/cubit/cart_cubit.dart'; // <<< ایمپورت جدید
import 'package:persia_markt/features/cart/presentation/cubit/cart_state.dart'; // <<< ایمپورت جدید
import 'package:persia_markt/l10n/app_localizations.dart';

class MainTabBarView extends StatelessWidget {
  final StatefulNavigationShell navigationShell;
  const MainTabBarView({
    super.key,
    required this.navigationShell,
  });

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return Directionality(
      textDirection:
          l10n.localeName == 'fa' ? TextDirection.rtl : TextDirection.ltr,
      child: Scaffold(
        body: navigationShell,
        bottomNavigationBar: BottomNavigationBar(
          currentIndex: navigationShell.currentIndex,
          onTap: (index) {
            navigationShell.goBranch(
              index,
              initialLocation: index == navigationShell.currentIndex,
            );
          },
          type: BottomNavigationBarType.fixed,
          items: [
            BottomNavigationBarItem(
                icon: const Icon(Icons.home_outlined),
                activeIcon: const Icon(Icons.home),
                label: l10n.home),
            BottomNavigationBarItem(
                icon: const Icon(Icons.map_outlined),
                activeIcon: const Icon(Icons.map),
                label: l10n.map),
            BottomNavigationBarItem(
              // <<< ویجت جدید برای نمایش آیکون سبد خرید به همراه Badge
              icon: _CartIconWithBadge(),
              label: l10n.favorites, // l10n.favorites حالا به معنی "سبد خرید" است
            ),
            BottomNavigationBarItem(
                icon: const Icon(Icons.person_outline),
                activeIcon: const Icon(Icons.person),
                label: l10n.profile),
          ],
        ),
      ),
    );
  }
}

// <<< ویجت کاملاً جدید و اختصاصی برای ساخت آیکون سبد خرید با نشانگر تعداد
class _CartIconWithBadge extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<CartCubit, CartState>(
      builder: (context, state) {
        // تعداد کل آیتم‌ها را محاسبه می‌کنیم (نه فقط تعداد محصولات مختلف)
        final totalItems = state.items.values.fold(0, (sum, quantity) => sum + quantity);

        return Stack(
          clipBehavior: Clip.none, // اجازه می‌دهد Badge از کادر بیرون بزند
          children: [
            // آیکون اصلی
            const Icon(Icons.shopping_cart_outlined),
            // اگر آیتمی در سبد بود، Badge را نمایش بده
            if (totalItems > 0)
              Positioned(
                top: -4,
                right: -8,
                child: Container(
                  padding: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: Colors.red,
                    shape: BoxShape.circle,
                    border: Border.all(color: Theme.of(context).bottomNavigationBarTheme.backgroundColor ?? Colors.white, width: 1.5)
                  ),
                  constraints: const BoxConstraints(
                    minWidth: 18,
                    minHeight: 18,
                  ),
                  child: Center(
                    child: Text(
                      '$totalItems',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
              ),
          ],
        );
      },
    );
  }
}

====================
فایل: banner_carousel_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\widgets\banner_carousel_view.dart
====================

// lib/features/home/presentation/widgets/banner_carousel_view.dart
import 'package:flutter/material.dart';
import 'dart:async';

class BannerCarouselView extends StatefulWidget {
  final List<String> bannerImageUrls;
  const BannerCarouselView({super.key, required this.bannerImageUrls});

  @override
  State<BannerCarouselView> createState() => _BannerCarouselViewState();
}

class _BannerCarouselViewState extends State<BannerCarouselView> {
  late final PageController _pageController;
  late final Timer _timer;
  int _currentPage = 0;

  @override
  void initState() {
    super.initState();
    _pageController = PageController(viewportFraction: 0.9);
    _startAutoScroll();
  }

  void _startAutoScroll() {
    _timer = Timer.periodic(const Duration(seconds: 4), (timer) {
      if (_pageController.hasClients) {
        _currentPage = (_currentPage + 1) % widget.bannerImageUrls.length;
        _pageController.animateToPage(
          _currentPage,
          duration: const Duration(milliseconds: 600),
          curve: Curves.easeInOutCubic,
        );
      }
    });
  }

  @override
  void dispose() {
    _timer.cancel();
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 150,
      child: PageView.builder(
        controller: _pageController,
        itemCount: widget.bannerImageUrls.length,
        itemBuilder: (context, index) {
          return Container(
            margin: const EdgeInsets.symmetric(horizontal: 8),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
              image: DecorationImage(
                image: AssetImage(widget.bannerImageUrls[index]),
                fit: BoxFit.cover,
              ),
            ),
          );
        },
      ),
    );
  }
}

====================
فایل: category_list_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\widgets\category_list_view.dart
====================

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/config/app_routes.dart';
import 'package:persia_markt/core/models/category_item.dart';
// ۱. پکیج انیمیشن را ایمپورت کنید
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';

class CategoryListView extends StatelessWidget {
  final List<CategoryItem> categories;
  const CategoryListView({super.key, required this.categories});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 120,
      // ۲. ListView.builder را با AnimationLimiter بپوشانید
      child: AnimationLimiter(
        child: ListView.builder(
          scrollDirection: Axis.horizontal,
          itemCount: categories.length,
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
          itemBuilder: (context, index) {
            final category = categories[index];
            // ۳. هر آیتم را با کامپوننت‌های انیمیشن بپوشانید
            return AnimationConfiguration.staggeredList(
              position: index,
              duration: const Duration(milliseconds: 375),
              child: SlideAnimation(
                verticalOffset: 50.0,
                child: FadeInAnimation(
                  child: GestureDetector(
                    onTap: () => context.go(AppRoutes.categoryDetailPath(category.id)),
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8.0),
                      child: Column(
                        children: [
                          Container(
                            width: 80,
                            height: 80,
                            decoration: BoxDecoration(
                              color: Theme.of(context).cardColor,
                              shape: BoxShape.circle,
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withAlpha((255 * 0.1).round()),
                                  blurRadius: 8.0,
                                  spreadRadius: 2.0,
                                  offset: const Offset(0, 4),
                                ),
                              ],
                            ),
                            child: ClipOval(
                              child: (category.iconUrl != null && category.iconUrl!.isNotEmpty)
                                  ? Image.network(
                                      category.iconUrl!,
                                      fit: BoxFit.cover,
                                      errorBuilder: (context, error, stackTrace) => _buildPlaceholderIcon(),
                                      loadingBuilder: (context, child, loadingProgress) {
                                        if (loadingProgress == null) return child;
                                        return const Center(
                                          child: CircularProgressIndicator(strokeWidth: 2.0),
                                        );
                                      },
                                    )
                                  : _buildPlaceholderIcon(),
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            category.name,
                            style: Theme.of(context).textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildPlaceholderIcon() {
    return Padding(
      padding: const EdgeInsets.all(12.0),
      child: Image.asset(
        'assets/images/supermarket.png',
        color: Colors.grey.shade400,
      ),
    );
  }
}

====================
فایل: home_header.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\widgets\home_header.dart
====================

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class HomeHeader extends StatelessWidget {
  final VoidCallback onSearchTapped;
  const HomeHeader({super.key, required this.onSearchTapped});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return SliverAppBar(
      pinned: true,
      floating: true,
      expandedHeight: 180,
      backgroundColor: Colors.transparent,
      flexibleSpace: FlexibleSpaceBar(
        background: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Colors.orange.shade400, Colors.orange.shade100],
            ),
          ),
          child: SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Image.asset('assets/images/appLogo.png', height: 40),
                      const SizedBox(width: 8),
                      // ==================== اصلاح اصلی اینجاست ====================
                      // ۱. ویجت عنوان با Flexible پوشانده شد تا در صورت کمبود جا، کوچک شود.
                      Flexible(
                        child: Material(
                          type: MaterialType.transparency,
                          child: Text(
                            l10n.persiaMarkt,
                            style: GoogleFonts.inter(fontSize: 24, fontWeight: FontWeight.w900, color: Colors.white),
                            overflow: TextOverflow.ellipsis, // متن اضافی را با ... نمایش می‌دهد
                            maxLines: 1,
                          ),
                        ),
                      ),
                      // ==========================================================
                      const Spacer(),
                      // ۲. ویجت موقعیت مکانی هم با Flexible پوشانده شد.
                      Flexible(
                        child: BlocBuilder<LocationCubit, LocationState>(
                          builder: (context, state) {
                            String locationText = l10n.gettingLocation;
                            if (state is LocationLoaded) {
                              locationText = state.address;
                            } else if (state is LocationError) {
                              locationText = l10n.locationUnknown;
                            }
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: [
                                Text(l10n.yourLocation, style: const TextStyle(color: Colors.white70, fontSize: 10)),
                                Text(
                                  locationText, 
                                  style: const TextStyle(color: Colors.white, fontSize: 14),
                                  overflow: TextOverflow.ellipsis, // متن اضافی را با ... نمایش می‌دهد
                                  maxLines: 1,
                                  textAlign: TextAlign.end,
                                ),
                              ],
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  GestureDetector(
                    onTap: onSearchTapped,
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                      decoration: BoxDecoration(
                        color: Theme.of(context).cardColor,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Row(
                        children: [
                          Icon(Icons.search, color: Colors.grey.shade500),
                          const SizedBox(width: 8),
                          Text(l10n.searchHint, style: TextStyle(color: Colors.grey.shade500)),
                        ],
                      ),
                    ),
                  )
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}


====================
فایل: home_loading_shimmer.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\widgets\home_loading_shimmer.dart
====================

// lib/features/home/presentation/widgets/home_loading_shimmer.dart
import 'package:flutter/material.dart';
import 'package:persia_markt/core/widgets/loading_shimmer.dart';

class HomeLoadingShimmer extends StatelessWidget {
  const HomeLoadingShimmer({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      physics: const NeverScrollableScrollPhysics(),
      child: Column(
        children: [
          // Header Shimmer
          const ShimmerBox(width: double.infinity, height: 180, shape: RoundedRectangleBorder(borderRadius: BorderRadius.zero)),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 24),
                const ShimmerBox(width: 150, height: 24),
                const SizedBox(height: 16),
                SizedBox(
                  height: 120,
                  child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    itemCount: 5,
                    itemBuilder: (context, index) => const Padding(
                      padding: EdgeInsets.symmetric(horizontal: 8.0),
                      child: Column(
                        children: [
                          ShimmerBox(width: 80, height: 80, shape: CircleBorder()),
                          SizedBox(height: 8),
                          ShimmerBox(width: 60, height: 16),
                        ],
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                const ShimmerBox(width: 150, height: 24),
                const SizedBox(height: 16),
                const ShimmerBox(width: double.infinity, height: 150),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

====================
فایل: section_header.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\widgets\section_header.dart
====================

// lib/features/home/presentation/widgets/section_header.dart
import 'package:flutter/material.dart';

class SectionHeader extends StatelessWidget {
  final String title;
  const SectionHeader({Key? key, required this.title}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(20, 24, 20, 16),
      child: Text(
        title,
        style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
            ),
      ),
    );
  }
}

====================
فایل: special_offers_section.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\widgets\special_offers_section.dart
====================

// lib/features/home/presentation/widgets/special_offers_section.dart
import 'package:flutter/material.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/core/widgets/product_card_view.dart';

class SpecialOffersSection extends StatelessWidget {
  final List<Product> products;
  final List<Store> stores;

  const SpecialOffersSection(
      {super.key, required this.products, required this.stores});

  @override
  Widget build(BuildContext context) {
    final discountedProducts = products.where((p) => p.isOnSale).toList();

    if (discountedProducts.isEmpty) {
      return const SizedBox.shrink();
    }

    // <<< رنگ‌ها را مستقیماً از تم اصلی برنامه می‌خوانیم
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        // <<< گرادیان پس‌زمینه حالا از رنگ‌های اصلی و ثانویه تم استفاده می‌کند
        gradient: LinearGradient(
          colors: [
            colorScheme.secondary.withOpacity(0.2),
            colorScheme.primary.withOpacity(0.2),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(20),
        // <<< رنگ حاشیه نیز بر اساس رنگ اصلی تم تنظیم می‌شود
        border: Border.all(
          color: colorScheme.primary.withOpacity(0.4),
          width: 1.5,
        ),
      ),
      child: SizedBox(
        height: 250, // Height for ProductCardView
        child: ListView.builder(
          scrollDirection: Axis.horizontal,
          itemCount: discountedProducts.length,
          itemBuilder: (context, index) {
            final product = discountedProducts[index];
            final store = stores.firstWhere(
              (s) => s.storeID == product.storeID,
              orElse: () => Store.empty(),
            );
            if (store.storeID.isEmpty) return const SizedBox.shrink();

            return ProductCardView(product: product, store: store);
          },
        ),
      ),
    );
  }
}

====================
فایل: stores_by_city_section.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\home\presentation\widgets\stores_by_city_section.dart
====================

import 'package:flutter/material.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/core/widgets/store_list_item_view.dart';

class StoresByCitySection extends StatelessWidget {
  final List<Store> stores;
  const StoresByCitySection({super.key, required this.stores});

  @override
  Widget build(BuildContext context) {
    final Map<String, List<Store>> storesByCity = {};
    for (var store in stores) {
      if (store.city != null && store.city!.isNotEmpty) {
        storesByCity.putIfAbsent(store.city!, () => []).add(store);
      }
    }

    if (storesByCity.isEmpty) return const SizedBox.shrink();

    // استفاده از LayoutBuilder برای تشخیص اندازه صفحه
    return LayoutBuilder(
      builder: (context, constraints) {
        // اگر عرض صفحه بیشتر از ۶۰۰ پیکسل باشد، از گرید استفاده کن
        final bool isWideScreen = constraints.maxWidth > 600;

        return ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: storesByCity.keys.length,
          itemBuilder: (context, index) {
            final city = storesByCity.keys.elementAt(index);
            final cityStores = storesByCity[city]!;
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
                  child: Text(city, style: Theme.of(context).textTheme.headlineSmall),
                ),
                // بر اساس عرض صفحه، ویجت مناسب را نمایش بده
                isWideScreen
                    ? _buildStoresGrid(cityStores)
                    : _buildStoresList(cityStores),
              ],
            );
          },
        );
      },
    );
  }

  // ویجت برای نمایش لیست عمودی (موبایل)
  Widget _buildStoresList(List<Store> stores) {
    return Column(
      children: stores.map((store) => StoreListItemView(store: store)).toList(),
    );
  }

  // ویجت جدید برای نمایش گرید (تبلت)
  Widget _buildStoresGrid(List<Store> stores) {
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      padding: const EdgeInsets.symmetric(horizontal: 16),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2, // دو ستون
        crossAxisSpacing: 12,
        mainAxisSpacing: 12,
        childAspectRatio: 3.5, // نسبت عرض به ارتفاع هر آیتم
      ),
      itemCount: stores.length,
      itemBuilder: (context, index) {
        // در گرید، margin آیتم‌ها را حذف می‌کنیم تا بهتر نمایش داده شوند
        return StoreListItemView(
          store: stores[index],
          // Note: To make this work perfectly, you might need to adjust StoreListItemView 
          // to accept an optional margin parameter and set it to EdgeInsets.zero here.
        );
      },
    );
  }
}

====================
فایل: map_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\map\view\map_view.dart
====================

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:go_router/go_router.dart';
import 'package:latlong2/latlong.dart';
import 'package:persia_markt/core/config/app_routes.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class MapView extends StatefulWidget {
  final String? lat;
  final String? lng;
  final String? focus;

  const MapView({super.key, this.lat, this.lng, this.focus});

  @override
  State<MapView> createState() => _MapViewState();
}

class _MapViewState extends State<MapView> {
  late final MapController _mapController;
  // ۷. رفع مشکل عدم فوکوس مجدد
  // این متغیر برای جلوگیری از زوم ناخواسته هنگام بازگشت به نقشه استفاده می‌شود
  String? _lastFocusedStoreId;

  @override
  void initState() {
    super.initState();
    _mapController = MapController();
  }

  @override
  void dispose() {
    _mapController.dispose();
    super.dispose();
  }

  void _tryFocusStore(List<Store> stores) {
    // اگر فروشگاهی برای فوکوس وجود دارد و قبلاً روی آن فوکوس نکرده‌ایم
    if (widget.focus != null &&
        widget.focus!.isNotEmpty &&
        widget.focus != _lastFocusedStoreId) {
      final store = stores.firstWhere(
        (s) => s.storeID == widget.focus,
        orElse: () => Store.empty(),
      );
      if (store.storeID.isNotEmpty) {
        // انیمیشن плавный برای حرکت به سمت فروشگاه
        _mapController.move(LatLng(store.latitude, store.longitude), 17.0);
        _lastFocusedStoreId = widget.focus;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    LatLng initialCenter = const LatLng(51.1657, 10.4515); // مرکز آلمان
    double initialZoom = 6.0;

    if (widget.lat != null && widget.lng != null) {
      final lat = double.tryParse(widget.lat!);
      final lng = double.tryParse(widget.lng!);
      if (lat != null && lng != null) {
        initialCenter = LatLng(lat, lng);
        initialZoom = 15.0;
      }
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.map),
      ),
      body: BlocBuilder<MarketDataBloc, MarketDataState>(
        builder: (context, marketState) {
          if (marketState is! MarketDataLoaded) {
            return const Center(child: CircularProgressIndicator());
          }

          final stores = marketState.marketData.stores;

          // این تابع بعد از ساخت ویجت‌ها، فوکوس را انجام می‌دهد
          WidgetsBinding.instance.addPostFrameCallback((_) {
            _tryFocusStore(stores);
          });

          return FlutterMap(
            mapController: _mapController,
            options: MapOptions(
              initialCenter: initialCenter,
              initialZoom: initialZoom,
              onMapReady: () => _tryFocusStore(stores),
            ),
            children: [
              TileLayer(
                urlTemplate: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                subdomains: const ['a', 'b', 'c'],
              ),
              _buildStoreMarkers(stores, context), // context به متد پاس داده شد
              _buildUserLocationMarker(context),
            ],
          );
        },
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          final locationState = context.read<LocationCubit>().state;
          if (locationState is LocationLoaded) {
            _mapController.move(
              LatLng(locationState.position.latitude,
                  locationState.position.longitude),
              15.0,
            );
          }
        },
        label: Text(l10n.myLocation),
        icon: const Icon(Icons.my_location),
      ),
    );
  }

  // ۵. بهبود پین‌های نقشه
  Widget _buildStoreMarkers(List<Store> stores, BuildContext context) {
    return MarkerLayer(
      markers: stores.map((s) {
        return Marker(
          point: LatLng(s.latitude, s.longitude),
          width: 150, // عرض بیشتر برای نمایش نام
          height: 80,
          child: GestureDetector(
            onTap: () => context.go(AppRoutes.storeDetailPath(s.storeID)),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // آیکون پین
                const Icon(Icons.location_on, size: 40, color: Colors.orange),
                // کادر نام فروشگاه
                Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.6),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    s.name,
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(color: Colors.white, fontSize: 12),
                  ),
                ),
              ],
            ),
          ),
        );
      }).toList(),
    );
  }

  Widget _buildUserLocationMarker(BuildContext context) {
    final loc = context.watch<LocationCubit>().state;
    if (loc is! LocationLoaded) return const SizedBox.shrink();

    return MarkerLayer(
      markers: [
        Marker(
          point: LatLng(loc.position.latitude, loc.position.longitude),
          width: 36,
          height: 36,
          child: const Icon(Icons.my_location, size: 28, color: Colors.blue),
        ),
      ],
    );
  }
}


====================
فایل: order_history_service.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\order_history\data\services\order_history_service.dart
====================

// lib/features/order_history/data/services/order_history_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:persia_markt/core/models/order.dart';
import 'package:persia_markt/features/auth/data/services/auth_service.dart';

class OrderHistoryService {
  final String _baseUrl = 'https://persia-market-panel.onrender.com';
  final http.Client _client;
  final AuthService _authService;

  OrderHistoryService({required http.Client client, required AuthService authService})
      : _client = client,
        _authService = authService;

  Future<List<Order>> fetchOrders() async {
    final token = _authService.getToken();
    if (token == null) {
      throw Exception('کاربر احراز هویت نشده است');
    }

    final response = await _client.get(
      Uri.parse('$_baseUrl/my-orders'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(utf8.decode(response.bodyBytes));
      return data.map((json) => Order.fromJson(json)).toList();
    } else {
      throw Exception('خطا در دریافت تاریخچه سفارشات');
    }
  }
}

====================
فایل: order_history_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\order_history\presentation\cubit\order_history_cubit.dart
====================

// lib/features/order_history/presentation/cubit/order_history_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/models/order.dart';
import 'package:persia_markt/features/order_history/data/services/order_history_service.dart';
import 'order_history_state.dart';

class OrderHistoryCubit extends Cubit<OrderHistoryState> {
  final OrderHistoryService _orderHistoryService;

  OrderHistoryCubit({required OrderHistoryService orderHistoryService})
      : _orderHistoryService = orderHistoryService,
        super(OrderHistoryInitial());

  Future<void> fetchOrders() async {
    // اگر لیست از قبل پر بود، دوباره از سرور نگیر مگر اینکه مجبور باشیم
    if (state is OrderHistoryLoaded) return;
    
    emit(OrderHistoryLoading());
    try {
      final orders = await _orderHistoryService.fetchOrders();
      emit(OrderHistoryLoaded(orders));
    } catch (e) {
      emit(OrderHistoryError(e.toString().replaceAll('Exception: ', '')));
    }
  }

  // <<< متد کاملاً جدید برای افزودن سفارشات جدید به ابتدای لیست
  void addOrdersToState(List<Order> newOrders) {
    if (state is OrderHistoryLoaded) {
      final currentState = state as OrderHistoryLoaded;
      // سفارشات جدید را به ابتدای لیست فعلی اضافه می‌کنیم
      final updatedOrders = [...newOrders, ...currentState.orders];
      emit(OrderHistoryLoaded(updatedOrders));
    } else {
      // اگر هنوز لیستی لود نشده بود، فقط سفارشات جدید را نمایش می‌دهیم
      emit(OrderHistoryLoaded(newOrders));
    }
  }
}

====================
فایل: order_history_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\order_history\presentation\cubit\order_history_state.dart
====================

// lib/features/order_history/presentation/cubit/order_history_state.dart
import 'package:equatable/equatable.dart';
import 'package:persia_markt/core/models/order.dart';

abstract class OrderHistoryState extends Equatable {
  const OrderHistoryState();
  @override
  List<Object> get props => [];
}

class OrderHistoryInitial extends OrderHistoryState {}

class OrderHistoryLoading extends OrderHistoryState {}

class OrderHistoryLoaded extends OrderHistoryState {
  final List<Order> orders;
  const OrderHistoryLoaded(this.orders);
  @override
  List<Object> get props => [orders];
}

class OrderHistoryError extends OrderHistoryState {
  final String message;
  const OrderHistoryError(this.message);
  @override
  List<Object> get props => [message];
}

====================
فایل: order_history_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\order_history\presentation\view\order_history_view.dart
====================

// lib/features/order_history/presentation/view/order_history_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:persia_markt/core/models/order.dart';
import 'package:persia_markt/features/order_history/presentation/cubit/order_history_cubit.dart';
import 'package:persia_markt/features/order_history/presentation/cubit/order_history_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class OrderHistoryView extends StatefulWidget {
  const OrderHistoryView({super.key});

  @override
  State<OrderHistoryView> createState() => _OrderHistoryViewState();
}

class _OrderHistoryViewState extends State<OrderHistoryView> {
  @override
  void initState() {
    super.initState();
    // <<< حالا این متد فقط زمانی از سرور دیتا می‌گیرد که لازم باشد
    context.read<OrderHistoryCubit>().fetchOrders();
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.orderHistory),
      ),
      body: BlocBuilder<OrderHistoryCubit, OrderHistoryState>(
        builder: (context, state) {
          if (state is OrderHistoryLoading) {
            return const Center(child: CircularProgressIndicator());
          }
          if (state is OrderHistoryError) {
            return Center(child: Text(state.message));
          }
          if (state is OrderHistoryLoaded) {
            if (state.orders.isEmpty) {
              return const Center(
                child: Text('شما تاکنون سفارشی ثبت نکرده‌اید.'),
              );
            }
            return ListView.builder(
              padding: const EdgeInsets.all(8),
              itemCount: state.orders.length,
              itemBuilder: (context, index) {
                return _OrderCard(order: state.orders[index]);
              },
            );
          }
          // <<< حالت اولیه را هم پوشش می‌دهیم
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}

class _OrderCard extends StatelessWidget {
  final Order order;
  const _OrderCard({required this.order});

  (String, Color) _getStatusInfo(String status, BuildContext context) {
    switch (status) {
      case 'PROCESSING':
        return ('در حال پردازش', Colors.orange.shade700);
      case 'SHIPPED':
        return ('ارسال شده', Colors.blue.shade700);
      case 'DELIVERED':
        return ('تحویل شده', Colors.green.shade700);
      case 'CANCELLED':
        return ('لغو شده', Colors.red.shade700);
      default:
        return (status, Colors.grey);
    }
  }

  @override
  Widget build(BuildContext context) {
    final statusInfo = _getStatusInfo(order.status, context);
    final formattedDate = DateFormat('yyyy/MM/dd – kk:mm').format(order.createdAt);

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 8),
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: ExpansionTile(
        title: Text('سفارش #${order.id} - ${order.seller['store_name']}'),
        subtitle: Text(formattedDate),
        trailing: Chip(
          label: Text(statusInfo.$1),
          backgroundColor: statusInfo.$2.withOpacity(0.2),
          labelStyle: TextStyle(color: statusInfo.$2, fontWeight: FontWeight.bold),
        ),
        children: order.items.map((item) {
          return ListTile(
            leading: ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: Image.network(
                item.productImageUrl,
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (_, __, ___) => const Icon(Icons.image_not_supported),
              ),
            ),
            title: Text(item.productName),
            trailing: Text('x ${item.quantity}'),
          );
        }).toList(),
      ),
    );
  }
}

====================
فایل: favorites_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\profile\presentation\cubit\favorites_cubit.dart
====================

// lib/features/profile/presentation/cubit/favorites_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'favorites_state.dart';

class FavoritesCubit extends Cubit<FavoritesState> {
  final SharedPreferences _sharedPreferences;
  static const _key = 'liked_products';

  FavoritesCubit({required SharedPreferences sharedPreferences})
      : _sharedPreferences = sharedPreferences,
        super(const FavoritesState(productIds: []));

  void loadLikedProducts() {
    final likedIds = _sharedPreferences.getStringList(_key) ?? [];
    emit(FavoritesState(productIds: likedIds));
  }

  Future<void> toggleLike(String productId) async {
    final currentIds = List<String>.from(state.productIds);
    if (currentIds.contains(productId)) {
      currentIds.remove(productId);
    } else {
      currentIds.add(productId);
    }
    await _sharedPreferences.setStringList(_key, currentIds);
    emit(FavoritesState(productIds: currentIds));
  }
}

====================
فایل: favorites_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\profile\presentation\cubit\favorites_state.dart
====================

// lib/features/profile/presentation/cubit/favorites_state.dart
import 'package:equatable/equatable.dart';

class FavoritesState extends Equatable {
  final List<String> productIds;
  const FavoritesState({required this.productIds});

  @override
  List<Object> get props => [productIds];
}

====================
فایل: favorites_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\profile\presentation\view\favorites_view.dart
====================

// lib/features/profile/presentation/view/favorites_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/widgets/product_list_item_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class FavoritesView extends StatelessWidget {
  const FavoritesView({super.key});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(title: Text(l10n.favoritesTitle)),
      body: BlocBuilder<MarketDataBloc, MarketDataState>(
        builder: (context, marketState) {
          if (marketState is MarketDataLoaded) {
            return BlocBuilder<FavoritesCubit, FavoritesState>(
              builder: (context, favoritesState) {
                final favoriteProducts = marketState.marketData.products
                    .where((p) => favoritesState.productIds.contains(p.id))
                    .toList();

                if (favoriteProducts.isEmpty) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.favorite_border, size: 100, color: Colors.grey.shade400),
                        const SizedBox(height: 24),
                        Text(
                          'لیست علاقه‌مندی‌های شما خالی است',
                          style: Theme.of(context).textTheme.headlineSmall,
                        ),
                      ],
                    ),
                  );
                }

                return ListView.builder(
                  padding: const EdgeInsets.only(top: 8),
                  itemCount: favoriteProducts.length,
                  itemBuilder: (context, index) {
                    final product = favoriteProducts[index];
                    final store = marketState.marketData.stores.firstWhere(
                      (s) => s.storeID == product.storeID,
                    );
                    return ProductListItemView(product: product, store: store);
                  },
                );
              },
            );
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}

====================
فایل: profile_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\profile\presentation\view\profile_view.dart
====================

// lib/features/profile/presentation/view/profile_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:jwt_decoder/jwt_decoder.dart';
import 'package:persia_markt/core/config/app_routes.dart';
import 'package:persia_markt/core/cubit/locale_cubit.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_cubit.dart';
import 'package:persia_markt/features/auth/presentation/cubit/auth_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class ProfileView extends StatelessWidget {
  const ProfileView({super.key});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.myProfile),
        actions: [
          BlocBuilder<AuthCubit, AuthState>(
            builder: (context, state) {
              if (state is Authenticated) {
                return IconButton(
                  icon: const Icon(Icons.logout),
                  tooltip: l10n.logout,
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (dialogContext) => AlertDialog(
                        title: Text(l10n.logoutFromAccount),
                        content: Text(l10n.logoutConfirmation),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.of(dialogContext).pop(),
                            child: Text(l10n.cancel),
                          ),
                          TextButton(
                            onPressed: () {
                              Navigator.of(dialogContext).pop();
                              context.read<AuthCubit>().logoutUser();
                            },
                            child: Text(l10n.logout),
                          ),
                        ],
                      ),
                    );
                  },
                );
              }
              return const SizedBox.shrink();
            },
          )
        ],
      ),
      body: BlocBuilder<AuthCubit, AuthState>(
        builder: (context, state) {
          if (state is Authenticated) {
            return _buildProfileInfo(context);
          }
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(l10n.loginToSeeProfile),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () => context.go(AppRoutes.login),
                  child: Text(l10n.login),
                )
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildProfileInfo(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    Map<String, dynamic> userInfo = {};

    final token = context.read<AuthCubit>().authService.getToken();

    if (token != null) {
      try {
        userInfo = JwtDecoder.decode(token);
      } catch (e) {
        print("Error decoding JWT: $e");
      }
    }

    final String name = userInfo['name'] ?? l10n.guestUser;
    final String email = userInfo['email'] ?? l10n.unknownEmail;

    return ListView(
      padding: const EdgeInsets.all(16.0),
      children: [
        CircleAvatar(
          radius: 50,
          backgroundColor: Theme.of(context).colorScheme.primaryContainer,
          child: Text(
            name.isNotEmpty ? name[0].toUpperCase() : 'P',
            style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                  color: Theme.of(context).colorScheme.onPrimaryContainer,
                ),
          ),
        ),
        const SizedBox(height: 16),
        Center(
          child: Text(
            name,
            style: Theme.of(context).textTheme.headlineSmall,
          ),
        ),
        const SizedBox(height: 8),
        Center(
          child: Text(
            email,
            style:
                Theme.of(context).textTheme.bodyLarge?.copyWith(color: Colors.grey),
          ),
        ),
        const Divider(height: 40),
        ListTile(
          leading: const Icon(Icons.favorite_outline),
          title: Text(l10n.favoritesTitle),
          onTap: () {
            context.push(AppRoutes.favorites);
          },
        ),
        ListTile(
          leading: const Icon(Icons.history_outlined),
          title: Text(l10n.orderHistory),
          onTap: () {
            context.push(AppRoutes.orderHistory);
          },
        ),
        ListTile(
          leading: const Icon(Icons.language_outlined),
          title: Text(l10n.changeLanguage),
          onTap: () => _showLanguageDialog(context),
        ),
        ListTile(
          leading: const Icon(Icons.settings_outlined),
          title: Text(l10n.accountSettings),
          onTap: () {
            context.push(AppRoutes.settings);
          },
        ),
        const Divider(),
        ListTile(
          leading: const Icon(Icons.support_agent_outlined),
          title: Text(l10n.support),
          onTap: () {
            context.push(AppRoutes.userSupport);
          },
        ),
      ],
    );
  }

  void _showLanguageDialog(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    showDialog(
      context: context,
      builder: (BuildContext dialogContext) {
        return SimpleDialog(
          title: Text(l10n.selectLanguage),
          children: <Widget>[
            SimpleDialogOption(
              onPressed: () {
                context.read<LocaleCubit>().changeLocale('fa');
                Navigator.pop(dialogContext);
              },
              child: Text(l10n.persian),
            ),
            SimpleDialogOption(
              onPressed: () {
                context.read<LocaleCubit>().changeLocale('en');
                Navigator.pop(dialogContext);
              },
              child: Text(l10n.english),
            ),
            SimpleDialogOption(
              onPressed: () {
                context.read<LocaleCubit>().changeLocale('de');
                Navigator.pop(dialogContext);
              },
              child: Text(l10n.german),
            ),
          ],
        );
      },
    );
  }
}

====================
فایل: search_cubit.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\search\presentation\cubit\search_cubit.dart
====================

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'search_state.dart';

/// Manages the business logic for the search feature.
class SearchCubit extends Cubit<SearchState> {
  SearchCubit() : super(SearchInitial());

  /// Performs a search based on a query against all products and stores.
  void performSearch({
    required String query,
    required List<Product> allProducts,
    required List<Store> allStores,
  }) {
    if (query.isEmpty) {
      emit(SearchInitial());
      return;
    }

    emit(SearchLoading());

    final lowerCaseQuery = query.toLowerCase();

    // Filter products based on name and description.
    final productResults = allProducts
        .where((p) =>
            p.name.toLowerCase().contains(lowerCaseQuery) ||
            p.description.toLowerCase().contains(lowerCaseQuery))
        .toList();

    // Filter stores based on name, address, and city.
    final storeResults = allStores
        .where((s) {
          final nameMatch = s.name.toLowerCase().contains(lowerCaseQuery);
          final addressMatch = s.address.toLowerCase().contains(lowerCaseQuery);
          // FIXED: Safely handle nullable city by using a null-aware check.
          final cityMatch = s.city?.toLowerCase().contains(lowerCaseQuery) ?? false;
          return nameMatch || addressMatch || cityMatch;
        })
        .toList();

    emit(SearchLoaded(
      filteredProducts: productResults,
      filteredStores: storeResults,
      query: query,
    ));
  }

  /// Resets the search state to its initial value.
  void clearSearch() {
    emit(SearchInitial());
  }
}


====================
فایل: search_state.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\search\presentation\cubit\search_state.dart
====================

// lib/features/search/presentation/cubit/search_state.dart
import 'package:equatable/equatable.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';

/// Base class for all states related to the search feature.
abstract class SearchState extends Equatable {
  const SearchState();
  @override
  List<Object> get props => [];
}

/// The initial state before any search query is entered.
class SearchInitial extends SearchState {}

/// The state indicating that a search is in progress.
class SearchLoading extends SearchState {}

/// The state representing successfully loaded search results.
class SearchLoaded extends SearchState {
  final List<Product> filteredProducts;
  final List<Store> filteredStores;
  final String query;

  const SearchLoaded({
    required this.filteredProducts,
    required this.filteredStores,
    required this.query,
  });

  @override
  List<Object> get props => [filteredProducts, filteredStores, query];
}

====================
فایل: search_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\search\presentation\view\search_view.dart
====================

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/widgets/product_list_item_view.dart';
import 'package:persia_markt/core/widgets/store_list_item_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_cubit.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_state.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class SearchView extends StatefulWidget {
  const SearchView({super.key});

  @override
  State<SearchView> createState() => _SearchViewState();
}

class _SearchViewState extends State<SearchView>
    with SingleTickerProviderStateMixin {
  late final TextEditingController _searchController;
  late final TabController _tabController;
  Timer? _debounce;

  @override
  void initState() {
    super.initState();
    _searchController = TextEditingController();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _debounce?.cancel();
    _searchController.dispose();
    _tabController.dispose();
    super.dispose();
  }

  void _onChanged(String text, MarketDataState marketState) {
    if (_debounce?.isActive ?? false) _debounce?.cancel();
    _debounce = Timer(const Duration(milliseconds: 300), () {
      if (marketState is MarketDataLoaded) {
        context.read<SearchCubit>().performSearch(
              query: text,
              allProducts: marketState.marketData.products,
              allStores: marketState.marketData.stores,
            );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    return BlocBuilder<MarketDataBloc, MarketDataState>(
      builder: (context, marketState) {
        return Scaffold(
          appBar: AppBar(
            // ==================== اصلاح اصلی اینجاست ====================
            // دکمه بازگشت اضافه شده و قبل از خروج، نتایج جستجو را پاک می‌کند.
            leading: IconButton(
              icon: const Icon(Icons.arrow_back),
              tooltip: l10n.cancel,
              onPressed: () {
                context.read<SearchCubit>().clearSearch();
                context.pop();
              },
            ),
            // ==========================================================
            title: TextField(
              controller: _searchController,
              autofocus: true,
              decoration: InputDecoration(
                hintText: l10n.searchHint,
                border: InputBorder.none,
              ),
              onChanged: (t) => _onChanged(t, marketState),
            ),
            bottom: TabBar(
              controller: _tabController,
              tabs: [
                Tab(text: l10n.allProducts),
                Tab(text: l10n.stores),
              ],
            ),
          ),
          body: BlocBuilder<SearchCubit, SearchState>(
            builder: (context, searchState) {
              if (searchState is SearchInitial) {
                return Center(
                    child: Text('لطفاً عبارت مورد نظر را وارد کنید.'));
              }
              if (searchState is SearchLoading) {
                return const Center(child: CircularProgressIndicator());
              }
              if (searchState is SearchLoaded) {
                if (searchState.filteredProducts.isEmpty &&
                    searchState.filteredStores.isEmpty) {
                  return const Center(child: Text('نتیجه‌ای یافت نشد.'));
                }

                final Map<String, List<Product>> groupedProducts = {};
                for (var product in searchState.filteredProducts) {
                  groupedProducts.putIfAbsent(product.storeID, () => []).add(product);
                }
                final storeIds = groupedProducts.keys.toList();

                return TabBarView(
                  controller: _tabController,
                  children: [
                    // محصولات
                    ListView.builder(
                      itemCount: storeIds.length,
                      itemBuilder: (context, index) {
                        if (marketState is! MarketDataLoaded) {
                          return const SizedBox.shrink();
                        }

                        final storeId = storeIds[index];
                        final productsInStore = groupedProducts[storeId]!;
                        final store = marketState.marketData.stores
                            .firstWhere((s) => s.storeID == storeId);

                        return Card(
                          margin: const EdgeInsets.symmetric(
                              horizontal: 16, vertical: 8),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(store.name,
                                    style: Theme.of(context)
                                        .textTheme
                                        .titleLarge),
                              ),
                              const Divider(height: 1, indent: 12, endIndent: 12),
                              ListView.builder(
                                shrinkWrap: true,
                                physics: const NeverScrollableScrollPhysics(),
                                itemCount: productsInStore.length,
                                itemBuilder: (context, productIndex) {
                                  final product = productsInStore[productIndex];
                                  return ProductListItemView(
                                      product: product, store: store);
                                },
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                    // فروشگاه‌ها
                    ListView.builder(
                      itemCount: searchState.filteredStores.length,
                      itemBuilder: (context, index) {
                        final store = searchState.filteredStores[index];
                        return StoreListItemView(store: store);
                      },
                    ),
                  ],
                );
              }
              return const SizedBox.shrink();
            },
          ),
        );
      },
    );
  }
}


====================
فایل: seller_panel_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\seller_panel\view\seller_panel_view.dart
====================

// مسیر: lib/features/seller_panel/view/seller_panel_view.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart'; // ۱. پکیج GoRouter برای بازگشت امن اضافه شد
import 'package:webview_flutter/webview_flutter.dart';
// ۲. مسیر import فایل ترجمه به مسیر صحیح و استاندارد تغییر یافت
import 'package:persia_markt/l10n/app_localizations.dart';

class SellerPanelView extends StatefulWidget {
  const SellerPanelView({super.key});

  @override
  State<SellerPanelView> createState() => _SellerPanelViewState();
}

class _SellerPanelViewState extends State<SellerPanelView> {
  late final WebViewController _controller;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setBackgroundColor(const Color(0x00000000))
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageStarted: (String url) {
            setState(() {
              _isLoading = true;
            });
          },
          onPageFinished: (String url) {
            setState(() {
              _isLoading = false;
            });
          },
          onWebResourceError: (WebResourceError error) {
            // شما می‌توانید در اینجا یک پیام خطا به کاربر نمایش دهید
          },
        ),
      )
      // آدرس پنل شما که ارسال کردید، اینجا استفاده شده است
      ..loadRequest(Uri.parse('https://persia-market-panel.vercel.app/'));
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.sellerPanel),
        leading: IconButton(
          icon: const Icon(Icons.close),
          // ۳. دستور بازگشت برای سازگاری کامل با GoRouter اصلاح شد
          onPressed: () => context.pop(),
        ),
      ),
      body: Stack(
        children: [
          WebViewWidget(controller: _controller),
          if (_isLoading)
            const Center(
              child: CircularProgressIndicator(),
            ),
        ],
      ),
    );
  }
}

====================
فایل: settings_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\settings\view\settings_view.dart
====================

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/l10n/app_localizations.dart';
// بهبود: ایمپورت ویجت فرم آدرس که در ادامه ساخته می‌شود
// import 'package:persia_markt/core/widgets/address_form.dart';

class SettingsView extends StatefulWidget {
  const SettingsView({super.key});

  @override
  State<SettingsView> createState() => _SettingsViewState();
}

class _SettingsViewState extends State<SettingsView> {
  final _passwordFormKey = GlobalKey<FormState>();
  final _oldPasswordController = TextEditingController();
  final _newPasswordController = TextEditingController();
  bool _isLoading = false;

  @override
  void dispose() {
    _oldPasswordController.dispose();
    _newPasswordController.dispose();
    super.dispose();
  }

  void _changePassword() {
    if (_passwordFormKey.currentState?.validate() ?? false) {
      // TODO: Implement password change logic
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('رمز عبور با موفقیت تغییر کرد.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        // ==================== اصلاح اصلی اینجاست ====================
        // دکمه بازگشت به صورت دستی اضافه شد تا همیشه نمایش داده شود.
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        // ==========================================================
        title: Text(l10n.accountSettings),
        elevation: 0,
        scrolledUnderElevation: 1,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // بخش اطلاعات کاربری و آدرس
            Text(
              'اطلاعات کاربری و آدرس',
              style: theme.textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            // ۷. افزودن سیستم آدرس‌دهی
            // در اینجا می‌توانید ویجت فرم آدرس را قرار دهید
            // AddressForm(), // ویجت فرم آدرس در اینجا قرار می‌گیرد
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _isLoading ? null : () {
                // TODO: Implement profile and address update logic
              },
              child: const Text('ذخیره اطلاعات'),
            ),
            const Divider(height: 48),

            // بخش تغییر رمز عبور
            Text(
              'تغییر رمز عبور',
              style: theme.textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            Form(
              key: _passwordFormKey,
              child: Column(
                children: [
                  TextFormField(
                    controller: _oldPasswordController,
                    decoration: const InputDecoration(
                      labelText: 'رمز عبور فعلی',
                      prefixIcon: Icon(Icons.lock_open_outlined),
                    ),
                    obscureText: true,
                    validator: (value) => (value?.isEmpty ?? true)
                        ? 'رمز عبور فعلی را وارد کنید'
                        : null,
                  ),
                  const SizedBox(height: 16),
                  TextFormField(
                    controller: _newPasswordController,
                    decoration: const InputDecoration(
                      labelText: 'رمز عبور جدید',
                      prefixIcon: Icon(Icons.lock_outline),
                    ),
                    obscureText: true,
                    validator: (value) => (value?.length ?? 0) < 8
                        ? 'رمز عبور جدید باید حداقل ۸ کاراکتر باشد'
                        : null,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _isLoading ? null : _changePassword,
              child: _isLoading
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : const Text('تغییر رمز عبور'),
            ),
          ],
        ),
      ),
    );
  }
}


====================
فایل: store_detail_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\store\presentation\view\store_detail_view.dart
====================

// lib/features/store/presentation/view/store_detail_view.dart
import 'dart:async';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/category_item.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/core/widgets/product_list_item_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';

class StoreDetailView extends StatefulWidget {
  final String storeId;
  final String? initialProductId;

  const StoreDetailView({
    super.key,
    required this.storeId,
    this.initialProductId,
  });

  @override
  State<StoreDetailView> createState() => _StoreDetailViewState();
}

class _StoreDetailViewState extends State<StoreDetailView>
    with TickerProviderStateMixin {
  final ScrollController _scrollController = ScrollController();
  TabController? _tabController;

  final Map<String, GlobalKey> _categoryKeys = {};
  bool _isTabSwitching = false;

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
  }

  void _setupTabController(int categoryCount) {
    if (_tabController == null || _tabController!.length != categoryCount) {
      _tabController?.dispose();
      _tabController = TabController(length: categoryCount, vsync: this);
    }
  }

  void _onScroll() {
    if (_isTabSwitching) return;

    for (var i = 0; i < _categoryKeys.values.length; i++) {
      final key = _categoryKeys.values.elementAt(i);
      final context = key.currentContext;
      if (context != null) {
        final box = context.findRenderObject() as RenderBox;
        final position = box.localToGlobal(Offset.zero);
        if (position.dy >= 0 && position.dy < 150) {
          if (_tabController!.index != i) {
            _tabController!.animateTo(i);
          }
          break;
        }
      }
    }
  }

  @override
  void dispose() {
    _scrollController.removeListener(_onScroll);
    _scrollController.dispose();
    _tabController?.dispose();
    super.dispose();
  }

  void _scrollToCategory(String categoryId) {
    final key = _categoryKeys[categoryId];
    if (key != null && key.currentContext != null) {
      setState(() {
        _isTabSwitching = true;
      });
      Scrollable.ensureVisible(
        key.currentContext!,
        duration: const Duration(milliseconds: 600),
        curve: Curves.easeInOutCubic,
      ).whenComplete(() {
        Future.delayed(const Duration(milliseconds: 200), () {
          setState(() {
            _isTabSwitching = false;
          });
        });
      });
    }
  }

  void _scrollToInitialProduct() {
    final marketState = context.read<MarketDataBloc>().state;
    if (marketState is MarketDataLoaded) {
      final product = marketState.marketData.products.firstWhere(
        (p) => p.id == widget.initialProductId,
        orElse: () => marketState.marketData.products.first,
      );
      Future.delayed(const Duration(milliseconds: 200), () {
        _scrollToCategory(product.categoryID);
      });
    }
  }

  void _showImageDialog(BuildContext context, String imageUrl) {
    showDialog(
      context: context,
      barrierColor: Colors.black.withOpacity(0.5),
      builder: (BuildContext context) {
        return BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 5.0, sigmaY: 5.0),
          child: Dialog(
            backgroundColor: Colors.transparent,
            insetPadding: const EdgeInsets.all(20),
            child: GestureDetector(
              onTap: () => Navigator.of(context).pop(),
              child: InteractiveViewer(
                child: Image.network(
                  imageUrl,
                  errorBuilder: (_, __, ___) => const Icon(Icons.broken_image,
                      color: Colors.white, size: 48),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocBuilder<MarketDataBloc, MarketDataState>(
        builder: (context, state) {
          if (state is! MarketDataLoaded) {
            return const Center(child: CircularProgressIndicator());
          }

          final store = state.marketData.stores.firstWhere(
              (s) => s.storeID == widget.storeId,
              orElse: () => Store.empty());
          if (store.storeID.isEmpty) {
            return const Center(child: Text('Store not found.'));
          }

          final allProductsInStore = state.marketData.products
              .where((p) => p.storeID == widget.storeId)
              .toList();
          final categoryIdsInStore =
              allProductsInStore.map((p) => p.categoryID).toSet();
          final categories = state.marketData.categories
              .where((c) => categoryIdsInStore.contains(c.id))
              .toList();

          for (var cat in categories) {
            _categoryKeys.putIfAbsent(cat.id, () => GlobalKey());
          }

          _setupTabController(categories.length);

          return DefaultTabController(
            length: categories.length,
            child: CustomScrollView(
              controller: _scrollController,
              slivers: [
                _buildSliverAppBar(context, store),
                // <<< ویجت جدید برای نمایش مشخصات فروشگاه
                _buildStoreInfoSliver(context, store),
                _buildSliverPersistentHeader(context, categories),
                ...categories.expand((category) {
                  final productsInCategory = allProductsInStore
                      .where((p) => p.categoryID == category.id)
                      .toList();
                  return [
                    SliverToBoxAdapter(
                      child: Padding(
                        key: _categoryKeys[category.id],
                        padding: const EdgeInsets.fromLTRB(16, 24, 16, 8),
                        child: Text(
                          category.name,
                          style: Theme.of(context).textTheme.headlineSmall,
                        ),
                      ),
                    ),
                    SliverList(
                      delegate: SliverChildBuilderDelegate(
                        (context, index) {
                          final product = productsInCategory[index];
                          return ProductListItemView(
                            product: product,
                            store: store,
                            onImageTap: () => _showImageDialog(
                                context, product.primaryImageUrl),
                          );
                        },
                        childCount: productsInCategory.length,
                      ),
                    ),
                  ];
                }),
              ],
            ),
          );
        },
      ),
    );
  }

  SliverAppBar _buildSliverAppBar(BuildContext context, Store store) {
    return SliverAppBar(
      expandedHeight: 200.0,
      floating: false,
      pinned: true,
      stretch: true,
      flexibleSpace: FlexibleSpaceBar(
        centerTitle: true,
        title: Text(store.name,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16.0,
              shadows: [Shadow(blurRadius: 4.0)],
            )),
        background: Stack(
          fit: StackFit.expand,
          children: [
            Image.network(
              store.storeImage,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) =>
                  Image.asset('assets/images/supermarket.png',
                      fit: BoxFit.cover),
            ),
            const DecoratedBox(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: <Color>[
                    Colors.transparent,
                    Colors.black54,
                  ],
                  stops: [0.5, 1.0],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // <<< ویجت کاملاً جدید برای نمایش مشخصات فروشگاه
  Widget _buildStoreInfoSliver(BuildContext context, Store store) {
    return SliverToBoxAdapter(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.location_on_outlined,
                    size: 18, color: Colors.grey.shade700),
                const SizedBox(width: 8),
                Expanded(
                    child: Text(store.address,
                        style: Theme.of(context).textTheme.bodyLarge)),
                IconButton(
                  icon: Icon(Icons.map_outlined,
                      color: Theme.of(context).colorScheme.primary),
                  tooltip: 'نمایش در نقشه',
                  onPressed: () => context.go(
                    '/map?lat=${store.latitude}&lng=${store.longitude}&focus=${store.storeID}',
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Icon(Icons.star_border,
                    size: 18, color: Colors.grey.shade700),
                const SizedBox(width: 8),
                Text('امتیاز: ${store.rating}',
                    style: Theme.of(context).textTheme.bodyLarge),
              ],
            ),
          ],
        ),
      ),
    );
  }

  SliverPersistentHeader _buildSliverPersistentHeader(
      BuildContext context, List<CategoryItem> categories) {
    return SliverPersistentHeader(
      delegate: _SliverAppBarDelegate(
        TabBar(
          controller: _tabController,
          isScrollable: true,
          tabs:
              categories.map((category) => Tab(text: category.name)).toList(),
          onTap: (index) => _scrollToCategory(categories[index].id),
        ),
      ),
      pinned: true,
    );
  }
}

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  _SliverAppBarDelegate(this._tabBar);

  final TabBar _tabBar;

  @override
  double get minExtent => _tabBar.preferredSize.height;
  @override
  double get maxExtent => _tabBar.preferredSize.height;

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    return Container(
      color: Theme.of(context).scaffoldBackgroundColor,
      child: _tabBar,
    );
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return false;
  }
}

====================
فایل: user_support_view.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\features\support\view\user_support_view.dart
====================

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:http/http.dart' as http;
import 'package:persia_markt/features/auth/presentation/cubit/auth_cubit.dart';
import 'package:persia_markt/l10n/app_localizations.dart';

class UserSupportView extends StatefulWidget {
  const UserSupportView({super.key});

  @override
  State<UserSupportView> createState() => _UserSupportViewState();
}

class _UserSupportViewState extends State<UserSupportView> {
  final _formKey = GlobalKey<FormState>();
  final _subjectController = TextEditingController();
  final _messageController = TextEditingController();
  bool _isLoading = false;

  @override
  void dispose() {
    _subjectController.dispose();
    _messageController.dispose();
    super.dispose();
  }

  // ==================== اصلاح اصلی اینجاست ====================
  Future<void> _submitTicket() async {
    // ۱. ابتدا فرم را اعتبارسنجی می‌کنیم
    if (!(_formKey.currentState?.validate() ?? false)) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // ۲. توکن احراز هویت کاربر را از AuthCubit می‌گیریم
      final authCubit = context.read<AuthCubit>();
      final token = authCubit.authService.getToken();

      if (token == null) {
        throw Exception('User not authenticated');
      }

      // ۳. درخواست HTTP POST را به اندپوینت صحیح در بک‌اند ارسال می‌کنیم
      final response = await http.post(
        Uri.parse('https://persia-market-panel.onrender.com/support/user/tickets'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token', // توکن را در هدر قرار می‌دهیم
        },
        body: json.encode({
          'subject': _subjectController.text,
          'message': _messageController.text,
        }),
      );

      // ۴. پاسخ سرور را بررسی می‌کنیم
      if (response.statusCode >= 200 && response.statusCode < 300) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('پیام شما با موفقیت ارسال شد.')),
        );
        // ۵. از دستور صحیح context.pop() برای بازگشت استفاده می‌کنیم
        if (mounted) context.pop();
      } else {
        final error = json.decode(response.body);
        throw Exception(error['message'] ?? 'Failed to send message');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('خطا در ارسال پیام: ${e.toString()}')),
      );
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
  // ==========================================================

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        title: Text(l10n.support),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text(
                'ارتباط با پشتیبانی',
                style: theme.textTheme.headlineSmall,
              ),
              const SizedBox(height: 8),
              Text(
                'مشکل یا پیشنهاد خود را برای ما ارسال کنید. ما در اسرع وقت پاسخ خواهیم داد.',
                style: theme.textTheme.bodyMedium,
              ),
              const SizedBox(height: 32),
              TextFormField(
                controller: _subjectController,
                decoration: const InputDecoration(
                  labelText: 'موضوع',
                  prefixIcon: Icon(Icons.subject_outlined),
                ),
                validator: (value) =>
                    (value?.isEmpty ?? true) ? 'موضوع نمی‌تواند خالی باشد' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _messageController,
                decoration: const InputDecoration(
                  labelText: 'متن پیام',
                  prefixIcon: Icon(Icons.message_outlined),
                  alignLabelWithHint: true,
                ),
                maxLines: 5,
                validator: (value) =>
                    (value?.isEmpty ?? true) ? 'متن پیام را وارد کنید' : null,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _isLoading ? null : _submitTicket,
                child: _isLoading
                    ? const SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Text('ارسال پیام'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


====================
فایل: app_de.arb
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\l10n\app_de.arb
====================

{
    "@@locale": "de",
    "persiaMarkt": "PersiaMarkt",
    "home": "Startseite",
    "map": "Karte",
    "favorites": "Warenkorb",
    "profile": "Profil",
    "favoritesTitle": "Favoriten",
    "searchHint": "Suche nach Brot, Milch, Geschäften...",
    "yourLocation": "Ihr Standort",
    "gettingLocation": "Standort wird abgerufen...",
    "locationUnknown": "Standort unbekannt",
    "specialOffers": "Sonderangebote",
    "affordableProducts": "Günstige Produkte",
    "stores": "Geschäfte",
    "myProfile": "Mein Profil",
    "logout": "Abmelden",
    "logoutFromAccount": "Abmelden",
    "logoutConfirmation": "Möchten Sie sich wirklich abmelden?",
    "cancel": "Abbrechen",
    "loginToSeeProfile": "Bitte melden Sie sich an, um Ihr Profil anzuzeigen.",
    "guestUser": "Gastnutzer",
    "unknownEmail": "Unbekannte E-Mail",
    "accountSettings": "Kontoeinstellungen",
    "orderHistory": "Bestellverlauf",
    "changeLanguage": "Sprache ändern",
    "selectLanguage": "Sprache auswählen",
    "persian": "فارسی",
    "english": "English",
    "german": "Deutsch",
    "categories": "Kategorien",
    "viewAll": "Alle ansehen",
    "allProducts": "Alle Produkte",
    "availableStores": "Verfügbare Shops",
    "noProductsInCategory": "Keine Produkte in dieser Kategorie gefunden.",
    "viewStore": "Shop ansehen",
    "noDataAvailable": "Leider gibt es derzeit keine Geschäfte oder Produkte zum Anzeigen.",
    "connectingToServer": "Verbindung zum Server wird hergestellt...",
    "initialLoadingMessage": "Das erstmalige Laden kann einen Moment dauern. Bitte haben Sie Geduld.",
    "locationError": "Fehler bei der Standortkonvertierung",
    "km": "km",
    "myLocation": "Mein Standort",
    "yourCartIsEmpty": "Ihr Warenkorb ist leer.",
    "yourShoppingCart": "Ihr Warenkorb",
    "storeRating": "Shop-Bewertung",
    "loginToYourAccount": "Anmelden bei Ihrem Konto",
    "gladToSeeYouAgain": "Schön, Sie wiederzusehen!",
    "email": "E-Mail",
    "enterYourEmail": "Bitte geben Sie Ihre E-Mail ein",
    "invalidEmail": "Ungültiges E-Mail-Format",
    "password": "Passwort",
    "enterYourPassword": "Bitte geben Sie Ihr Passwort ein",
    "passwordTooShort": "Das Passwort muss mindestens {length} Zeichen lang sein",
    "@passwordTooShort": {
        "description": "Password length validation message",
        "placeholders": {
            "length": {
                "type": "int"
            }
        }
    },
    "login": "Anmelden",
    "noAccount": "Kein Konto? Registrieren",
    "sellerLogin": "Verkäufer-Login",
    "sellerPanel": "Verkäufer-Panel",
    "language": "Sprache",
    "createAccount": "Konto erstellen",
    "welcomeToPersiaMarkt": "Willkommen bei PersiaMarkt!",
    "fullName": "Vollständiger Name",
    "enterYourName": "Bitte geben Sie Ihren Namen ein",
    "city": "Stadt",
    "selectCity": "Bitte wählen Sie eine Stadt aus",
    "register": "Registrieren",
    "haveAccount": "Haben Sie bereits ein Konto?",
    "registrationSuccess": "Registrierung erfolgreich! Bitte anmelden.",
    "support": "Support"
}

====================
فایل: app_en.arb
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\l10n\app_en.arb
====================

{
    "@@locale": "en",
    "persiaMarkt": "PersiaMarkt",
    "home": "Home",
    "map": "Map",
    "favorites": "Cart",
    "profile": "Profile",
    "favoritesTitle": "Favorites",
    "searchHint": "Search for bread, milk, stores...",
    "yourLocation": "Your Location",
    "gettingLocation": "Getting location...",
    "locationUnknown": "Location unknown",
    "specialOffers": "Special Offers",
    "affordableProducts": "Affordable Products",
    "stores": "Stores",
    "myProfile": "My Profile",
    "logout": "Logout",
    "logoutFromAccount": "Logout",
    "logoutConfirmation": "Are you sure you want to log out?",
    "cancel": "Cancel",
    "loginToSeeProfile": "Please log in to see your profile.",
    "guestUser": "Guest User",
    "unknownEmail": "Unknown Email",
    "accountSettings": "Account Settings",
    "orderHistory": "Order History",
    "changeLanguage": "Change Language",
    "selectLanguage": "Select Language",
    "persian": "فارسی",
    "english": "English",
    "german": "Deutsch",
    "categories": "Categories",
    "viewAll": "View All",
    "allProducts": "All Products",
    "availableStores": "Available Stores",
    "noProductsInCategory": "No products found in this category.",
    "viewStore": "View Store",
    "noDataAvailable": "Sorry, there are currently no stores or products to display.",
    "connectingToServer": "Connecting to the server...",
    "initialLoadingMessage": "The initial load might take a moment. Please be patient.",
    "locationError": "Error converting location",
    "km": "km",
    "myLocation": "My Location",
    "yourCartIsEmpty": "Your shopping cart is empty.",
    "yourShoppingCart": "Your Shopping Cart",
    "storeRating": "Store Rating",
    "loginToYourAccount": "Login to your account",
    "gladToSeeYouAgain": "Glad to see you again!",
    "email": "Email",
    "enterYourEmail": "Please enter your email",
    "invalidEmail": "Invalid email format",
    "password": "Password",
    "enterYourPassword": "Please enter your password",
    "passwordTooShort": "Password must be at least {length} characters",
    "@passwordTooShort": {
        "description": "Password length validation message",
        "placeholders": {
            "length": {
                "type": "int"
            }
        }
    },
    "login": "Login",
    "noAccount": "No account? Register",
    "sellerLogin": "Seller Login",
    "sellerPanel": "Seller Panel",
    "language": "Language",
    "createAccount": "Create Account",
    "welcomeToPersiaMarkt": "Welcome to PersiaMarkt!",
    "fullName": "Full Name",
    "enterYourName": "Please enter your name",
    "city": "City",
    "selectCity": "Please select a city",
    "register": "Register",
    "haveAccount": "Already have an account?",
    "registrationSuccess": "Registration successful! Please log in.",
    "support": "Support"
}

====================
فایل: app_fa.arb
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\l10n\app_fa.arb
====================

{
    "@@locale": "fa",
    "persiaMarkt": "پرشیا مارکت",
    "home": "خانه",
    "map": "نقشه",
    "favorites": "سبد خرید",
    "profile": "پروفایل",
    "favoritesTitle": "علاقه‌مندی‌ها",
    "searchHint": "جستجوی نان، شیر، فروشگاه...",
    "yourLocation": "موقعیت شما",
    "gettingLocation": "در حال دریافت موقعیت...",
    "locationUnknown": "موقعیت نامشخص",
    "specialOffers": "پیشنهادهای ویژه",
    "affordableProducts": "کالاهای مقرون به صرفه",
    "stores": "فروشگاه‌ها",
    "myProfile": "پروفایل من",
    "logout": "خروج",
    "logoutFromAccount": "خروج از حساب کاربری",
    "logoutConfirmation": "آیا برای خروج از حساب کاربری خود اطمینان دارید؟",
    "cancel": "انصراف",
    "loginToSeeProfile": "برای مشاهده پروفایل خود، لطفاً وارد شوید.",
    "guestUser": "کاربر مهمان",
    "unknownEmail": "ایمیل نامشخص",
    "accountSettings": "تنظیمات حساب کاربری",
    "orderHistory": "تاریخچه سفارشات",
    "changeLanguage": "تغییر زبان",
    "selectLanguage": "انتخاب زبان",
    "persian": "فارسی",
    "english": "English",
    "german": "Deutsch",
    "categories": "دسته‌بندی‌ها",
    "viewAll": "مشاهده همه",
    "allProducts": "همه محصولات",
    "availableStores": "فروشگاه‌های موجود",
    "noProductsInCategory": "محصولی در این دسته‌بندی یافت نشد.",
    "viewStore": "مشاهده فروشگاه",
    "noDataAvailable": "متاسفانه در حال حاضر فروشگاه یا محصولی برای نمایش وجود ندارد.",
    "connectingToServer": "در حال اتصال به سرور...",
    "initialLoadingMessage": "بارگذاری اولیه ممکن است کمی طول بکشد. لطفاً شکیبا باشید.",
    "locationError": "خطا در تبدیل موقعیت مکانی",
    "km": "کیلومتر",
    "myLocation": "موقعیت من",
    "yourCartIsEmpty": "سبد خرید شما خالی است",
    "yourShoppingCart": "سبد خرید شما",
    "storeRating": "امتیاز فروشگاه",
    "loginToYourAccount": "ورود به حساب کاربری",
    "gladToSeeYouAgain": "خوشحالیم که دوباره شما را می‌بینیم!",
    "email": "ایمیل",
    "enterYourEmail": "لطفاً ایمیل خود را وارد کنید",
    "invalidEmail": "فرمت ایمیل نامعتبر است",
    "password": "رمز عبور",
    "enterYourPassword": "لطفاً رمز عبور خود را وارد کنید",
    "passwordTooShort": "رمز عبور باید حداقل {length} کاراکتر باشد",
    "@passwordTooShort": {
        "description": "Password length validation message",
        "placeholders": {
            "length": {
                "type": "int"
            }
        }
    },
    "login": "ورود",
    "noAccount": "حساب کاربری ندارید؟ ثبت نام کنید",
    "sellerLogin": "ورود فروشندگان",
    "sellerPanel": "پنل فروشندگان",
    "language": "زبان",
    "createAccount": "ساخت حساب کاربری",
    "welcomeToPersiaMarkt": "به پرشیا مارکت خوش آمدید!",
    "fullName": "نام و نام خانوادگی",
    "enterYourName": "لطفاً نام خود را وارد کنید",
    "city": "شهر",
    "selectCity": "لطفاً یک شهر انتخاب کنید",
    "register": "ثبت نام",
    "haveAccount": "حساب کاربری دارید؟",
    "registrationSuccess": "ثبت‌نام با موفقیت انجام شد! لطفاً وارد شوید.",
    "support": "پشتیبانی"
}

====================
فایل: app_localizations.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\l10n\app_localizations.dart
====================

import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart' as intl;

import 'app_localizations_de.dart';
import 'app_localizations_en.dart';
import 'app_localizations_fa.dart';

// ignore_for_file: type=lint

/// Callers can lookup localized strings with an instance of AppLocalizations
/// returned by `AppLocalizations.of(context)`.
///
/// Applications need to include `AppLocalizations.delegate()` in their app's
/// `localizationDelegates` list, and the locales they support in the app's
/// `supportedLocales` list. For example:
///
/// ```dart
/// import 'l10n/app_localizations.dart';
///
/// return MaterialApp(
///   localizationsDelegates: AppLocalizations.localizationsDelegates,
///   supportedLocales: AppLocalizations.supportedLocales,
///   home: MyApplicationHome(),
/// );
/// ```
///
/// ## Update pubspec.yaml
///
/// Please make sure to update your pubspec.yaml to include the following
/// packages:
///
/// ```yaml
/// dependencies:
///   # Internationalization support.
///   flutter_localizations:
///     sdk: flutter
///   intl: any # Use the pinned version from flutter_localizations
///
///   # Rest of dependencies
/// ```
///
/// ## iOS Applications
///
/// iOS applications define key application metadata, including supported
/// locales, in an Info.plist file that is built into the application bundle.
/// To configure the locales supported by your app, you’ll need to edit this
/// file.
///
/// First, open your project’s ios/Runner.xcworkspace Xcode workspace file.
/// Then, in the Project Navigator, open the Info.plist file under the Runner
/// project’s Runner folder.
///
/// Next, select the Information Property List item, select Add Item from the
/// Editor menu, then select Localizations from the pop-up menu.
///
/// Select and expand the newly-created Localizations item then, for each
/// locale your application supports, add a new item and select the locale
/// you wish to add from the pop-up menu in the Value field. This list should
/// be consistent with the languages listed in the AppLocalizations.supportedLocales
/// property.
abstract class AppLocalizations {
  AppLocalizations(String locale) : localeName = intl.Intl.canonicalizedLocale(locale.toString());

  final String localeName;

  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  /// A list of this localizations delegate along with the default localizations
  /// delegates.
  ///
  /// Returns a list of localizations delegates containing this delegate along with
  /// GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate,
  /// and GlobalWidgetsLocalizations.delegate.
  ///
  /// Additional delegates can be added by appending to this list in
  /// MaterialApp. This list does not have to be used at all if a custom list
  /// of delegates is preferred or required.
  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates = <LocalizationsDelegate<dynamic>>[
    delegate,
    GlobalMaterialLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
  ];

  /// A list of this localizations delegate's supported locales.
  static const List<Locale> supportedLocales = <Locale>[
    Locale('de'),
    Locale('en'),
    Locale('fa')
  ];

  /// No description provided for @persiaMarkt.
  ///
  /// In en, this message translates to:
  /// **'PersiaMarkt'**
  String get persiaMarkt;

  /// No description provided for @home.
  ///
  /// In en, this message translates to:
  /// **'Home'**
  String get home;

  /// No description provided for @map.
  ///
  /// In en, this message translates to:
  /// **'Map'**
  String get map;

  /// No description provided for @favorites.
  ///
  /// In en, this message translates to:
  /// **'Cart'**
  String get favorites;

  /// No description provided for @profile.
  ///
  /// In en, this message translates to:
  /// **'Profile'**
  String get profile;

  /// No description provided for @favoritesTitle.
  ///
  /// In en, this message translates to:
  /// **'Favorites'**
  String get favoritesTitle;

  /// No description provided for @searchHint.
  ///
  /// In en, this message translates to:
  /// **'Search for bread, milk, stores...'**
  String get searchHint;

  /// No description provided for @yourLocation.
  ///
  /// In en, this message translates to:
  /// **'Your Location'**
  String get yourLocation;

  /// No description provided for @gettingLocation.
  ///
  /// In en, this message translates to:
  /// **'Getting location...'**
  String get gettingLocation;

  /// No description provided for @locationUnknown.
  ///
  /// In en, this message translates to:
  /// **'Location unknown'**
  String get locationUnknown;

  /// No description provided for @specialOffers.
  ///
  /// In en, this message translates to:
  /// **'Special Offers'**
  String get specialOffers;

  /// No description provided for @affordableProducts.
  ///
  /// In en, this message translates to:
  /// **'Affordable Products'**
  String get affordableProducts;

  /// No description provided for @stores.
  ///
  /// In en, this message translates to:
  /// **'Stores'**
  String get stores;

  /// No description provided for @myProfile.
  ///
  /// In en, this message translates to:
  /// **'My Profile'**
  String get myProfile;

  /// No description provided for @logout.
  ///
  /// In en, this message translates to:
  /// **'Logout'**
  String get logout;

  /// No description provided for @logoutFromAccount.
  ///
  /// In en, this message translates to:
  /// **'Logout'**
  String get logoutFromAccount;

  /// No description provided for @logoutConfirmation.
  ///
  /// In en, this message translates to:
  /// **'Are you sure you want to log out?'**
  String get logoutConfirmation;

  /// No description provided for @cancel.
  ///
  /// In en, this message translates to:
  /// **'Cancel'**
  String get cancel;

  /// No description provided for @loginToSeeProfile.
  ///
  /// In en, this message translates to:
  /// **'Please log in to see your profile.'**
  String get loginToSeeProfile;

  /// No description provided for @guestUser.
  ///
  /// In en, this message translates to:
  /// **'Guest User'**
  String get guestUser;

  /// No description provided for @unknownEmail.
  ///
  /// In en, this message translates to:
  /// **'Unknown Email'**
  String get unknownEmail;

  /// No description provided for @accountSettings.
  ///
  /// In en, this message translates to:
  /// **'Account Settings'**
  String get accountSettings;

  /// No description provided for @orderHistory.
  ///
  /// In en, this message translates to:
  /// **'Order History'**
  String get orderHistory;

  /// No description provided for @changeLanguage.
  ///
  /// In en, this message translates to:
  /// **'Change Language'**
  String get changeLanguage;

  /// No description provided for @selectLanguage.
  ///
  /// In en, this message translates to:
  /// **'Select Language'**
  String get selectLanguage;

  /// No description provided for @persian.
  ///
  /// In en, this message translates to:
  /// **'فارسی'**
  String get persian;

  /// No description provided for @english.
  ///
  /// In en, this message translates to:
  /// **'English'**
  String get english;

  /// No description provided for @german.
  ///
  /// In en, this message translates to:
  /// **'Deutsch'**
  String get german;

  /// No description provided for @categories.
  ///
  /// In en, this message translates to:
  /// **'Categories'**
  String get categories;

  /// No description provided for @viewAll.
  ///
  /// In en, this message translates to:
  /// **'View All'**
  String get viewAll;

  /// No description provided for @allProducts.
  ///
  /// In en, this message translates to:
  /// **'All Products'**
  String get allProducts;

  /// No description provided for @availableStores.
  ///
  /// In en, this message translates to:
  /// **'Available Stores'**
  String get availableStores;

  /// No description provided for @noProductsInCategory.
  ///
  /// In en, this message translates to:
  /// **'No products found in this category.'**
  String get noProductsInCategory;

  /// No description provided for @viewStore.
  ///
  /// In en, this message translates to:
  /// **'View Store'**
  String get viewStore;

  /// No description provided for @noDataAvailable.
  ///
  /// In en, this message translates to:
  /// **'Sorry, there are currently no stores or products to display.'**
  String get noDataAvailable;

  /// No description provided for @connectingToServer.
  ///
  /// In en, this message translates to:
  /// **'Connecting to the server...'**
  String get connectingToServer;

  /// No description provided for @initialLoadingMessage.
  ///
  /// In en, this message translates to:
  /// **'The initial load might take a moment. Please be patient.'**
  String get initialLoadingMessage;

  /// No description provided for @locationError.
  ///
  /// In en, this message translates to:
  /// **'Error converting location'**
  String get locationError;

  /// No description provided for @km.
  ///
  /// In en, this message translates to:
  /// **'km'**
  String get km;

  /// No description provided for @myLocation.
  ///
  /// In en, this message translates to:
  /// **'My Location'**
  String get myLocation;

  /// No description provided for @yourCartIsEmpty.
  ///
  /// In en, this message translates to:
  /// **'Your shopping cart is empty.'**
  String get yourCartIsEmpty;

  /// No description provided for @yourShoppingCart.
  ///
  /// In en, this message translates to:
  /// **'Your Shopping Cart'**
  String get yourShoppingCart;

  /// No description provided for @storeRating.
  ///
  /// In en, this message translates to:
  /// **'Store Rating'**
  String get storeRating;

  /// No description provided for @loginToYourAccount.
  ///
  /// In en, this message translates to:
  /// **'Login to your account'**
  String get loginToYourAccount;

  /// No description provided for @gladToSeeYouAgain.
  ///
  /// In en, this message translates to:
  /// **'Glad to see you again!'**
  String get gladToSeeYouAgain;

  /// No description provided for @email.
  ///
  /// In en, this message translates to:
  /// **'Email'**
  String get email;

  /// No description provided for @enterYourEmail.
  ///
  /// In en, this message translates to:
  /// **'Please enter your email'**
  String get enterYourEmail;

  /// No description provided for @invalidEmail.
  ///
  /// In en, this message translates to:
  /// **'Invalid email format'**
  String get invalidEmail;

  /// No description provided for @password.
  ///
  /// In en, this message translates to:
  /// **'Password'**
  String get password;

  /// No description provided for @enterYourPassword.
  ///
  /// In en, this message translates to:
  /// **'Please enter your password'**
  String get enterYourPassword;

  /// Password length validation message
  ///
  /// In en, this message translates to:
  /// **'Password must be at least {length} characters'**
  String passwordTooShort(int length);

  /// No description provided for @login.
  ///
  /// In en, this message translates to:
  /// **'Login'**
  String get login;

  /// No description provided for @noAccount.
  ///
  /// In en, this message translates to:
  /// **'No account? Register'**
  String get noAccount;

  /// No description provided for @sellerLogin.
  ///
  /// In en, this message translates to:
  /// **'Seller Login'**
  String get sellerLogin;

  /// No description provided for @sellerPanel.
  ///
  /// In en, this message translates to:
  /// **'Seller Panel'**
  String get sellerPanel;

  /// No description provided for @language.
  ///
  /// In en, this message translates to:
  /// **'Language'**
  String get language;

  /// No description provided for @createAccount.
  ///
  /// In en, this message translates to:
  /// **'Create Account'**
  String get createAccount;

  /// No description provided for @welcomeToPersiaMarkt.
  ///
  /// In en, this message translates to:
  /// **'Welcome to PersiaMarkt!'**
  String get welcomeToPersiaMarkt;

  /// No description provided for @fullName.
  ///
  /// In en, this message translates to:
  /// **'Full Name'**
  String get fullName;

  /// No description provided for @enterYourName.
  ///
  /// In en, this message translates to:
  /// **'Please enter your name'**
  String get enterYourName;

  /// No description provided for @city.
  ///
  /// In en, this message translates to:
  /// **'City'**
  String get city;

  /// No description provided for @selectCity.
  ///
  /// In en, this message translates to:
  /// **'Please select a city'**
  String get selectCity;

  /// No description provided for @register.
  ///
  /// In en, this message translates to:
  /// **'Register'**
  String get register;

  /// No description provided for @haveAccount.
  ///
  /// In en, this message translates to:
  /// **'Already have an account?'**
  String get haveAccount;

  /// No description provided for @registrationSuccess.
  ///
  /// In en, this message translates to:
  /// **'Registration successful! Please log in.'**
  String get registrationSuccess;

  /// No description provided for @support.
  ///
  /// In en, this message translates to:
  /// **'Support'**
  String get support;
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  Future<AppLocalizations> load(Locale locale) {
    return SynchronousFuture<AppLocalizations>(lookupAppLocalizations(locale));
  }

  @override
  bool isSupported(Locale locale) => <String>['de', 'en', 'fa'].contains(locale.languageCode);

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}

AppLocalizations lookupAppLocalizations(Locale locale) {


  // Lookup logic when only language code is specified.
  switch (locale.languageCode) {
    case 'de': return AppLocalizationsDe();
    case 'en': return AppLocalizationsEn();
    case 'fa': return AppLocalizationsFa();
  }

  throw FlutterError(
    'AppLocalizations.delegate failed to load unsupported locale "$locale". This is likely '
    'an issue with the localizations generation tool. Please file an issue '
    'on GitHub with a reproducible sample app and the gen-l10n configuration '
    'that was used.'
  );
}


====================
فایل: app_localizations_de.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\l10n\app_localizations_de.dart
====================

// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for German (`de`).
class AppLocalizationsDe extends AppLocalizations {
  AppLocalizationsDe([String locale = 'de']) : super(locale);

  @override
  String get persiaMarkt => 'PersiaMarkt';

  @override
  String get home => 'Startseite';

  @override
  String get map => 'Karte';

  @override
  String get favorites => 'Warenkorb';

  @override
  String get profile => 'Profil';

  @override
  String get favoritesTitle => 'Favoriten';

  @override
  String get searchHint => 'Suche nach Brot, Milch, Geschäften...';

  @override
  String get yourLocation => 'Ihr Standort';

  @override
  String get gettingLocation => 'Standort wird abgerufen...';

  @override
  String get locationUnknown => 'Standort unbekannt';

  @override
  String get specialOffers => 'Sonderangebote';

  @override
  String get affordableProducts => 'Günstige Produkte';

  @override
  String get stores => 'Geschäfte';

  @override
  String get myProfile => 'Mein Profil';

  @override
  String get logout => 'Abmelden';

  @override
  String get logoutFromAccount => 'Abmelden';

  @override
  String get logoutConfirmation => 'Möchten Sie sich wirklich abmelden?';

  @override
  String get cancel => 'Abbrechen';

  @override
  String get loginToSeeProfile => 'Bitte melden Sie sich an, um Ihr Profil anzuzeigen.';

  @override
  String get guestUser => 'Gastnutzer';

  @override
  String get unknownEmail => 'Unbekannte E-Mail';

  @override
  String get accountSettings => 'Kontoeinstellungen';

  @override
  String get orderHistory => 'Bestellverlauf';

  @override
  String get changeLanguage => 'Sprache ändern';

  @override
  String get selectLanguage => 'Sprache auswählen';

  @override
  String get persian => 'فارسی';

  @override
  String get english => 'English';

  @override
  String get german => 'Deutsch';

  @override
  String get categories => 'Kategorien';

  @override
  String get viewAll => 'Alle ansehen';

  @override
  String get allProducts => 'Alle Produkte';

  @override
  String get availableStores => 'Verfügbare Shops';

  @override
  String get noProductsInCategory => 'Keine Produkte in dieser Kategorie gefunden.';

  @override
  String get viewStore => 'Shop ansehen';

  @override
  String get noDataAvailable => 'Leider gibt es derzeit keine Geschäfte oder Produkte zum Anzeigen.';

  @override
  String get connectingToServer => 'Verbindung zum Server wird hergestellt...';

  @override
  String get initialLoadingMessage => 'Das erstmalige Laden kann einen Moment dauern. Bitte haben Sie Geduld.';

  @override
  String get locationError => 'Fehler bei der Standortkonvertierung';

  @override
  String get km => 'km';

  @override
  String get myLocation => 'Mein Standort';

  @override
  String get yourCartIsEmpty => 'Ihr Warenkorb ist leer.';

  @override
  String get yourShoppingCart => 'Ihr Warenkorb';

  @override
  String get storeRating => 'Shop-Bewertung';

  @override
  String get loginToYourAccount => 'Anmelden bei Ihrem Konto';

  @override
  String get gladToSeeYouAgain => 'Schön, Sie wiederzusehen!';

  @override
  String get email => 'E-Mail';

  @override
  String get enterYourEmail => 'Bitte geben Sie Ihre E-Mail ein';

  @override
  String get invalidEmail => 'Ungültiges E-Mail-Format';

  @override
  String get password => 'Passwort';

  @override
  String get enterYourPassword => 'Bitte geben Sie Ihr Passwort ein';

  @override
  String passwordTooShort(int length) {
    return 'Das Passwort muss mindestens $length Zeichen lang sein';
  }

  @override
  String get login => 'Anmelden';

  @override
  String get noAccount => 'Kein Konto? Registrieren';

  @override
  String get sellerLogin => 'Verkäufer-Login';

  @override
  String get sellerPanel => 'Verkäufer-Panel';

  @override
  String get language => 'Sprache';

  @override
  String get createAccount => 'Konto erstellen';

  @override
  String get welcomeToPersiaMarkt => 'Willkommen bei PersiaMarkt!';

  @override
  String get fullName => 'Vollständiger Name';

  @override
  String get enterYourName => 'Bitte geben Sie Ihren Namen ein';

  @override
  String get city => 'Stadt';

  @override
  String get selectCity => 'Bitte wählen Sie eine Stadt aus';

  @override
  String get register => 'Registrieren';

  @override
  String get haveAccount => 'Haben Sie bereits ein Konto?';

  @override
  String get registrationSuccess => 'Registrierung erfolgreich! Bitte anmelden.';

  @override
  String get support => 'Support';
}


====================
فایل: app_localizations_en.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\l10n\app_localizations_en.dart
====================

// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for English (`en`).
class AppLocalizationsEn extends AppLocalizations {
  AppLocalizationsEn([String locale = 'en']) : super(locale);

  @override
  String get persiaMarkt => 'PersiaMarkt';

  @override
  String get home => 'Home';

  @override
  String get map => 'Map';

  @override
  String get favorites => 'Cart';

  @override
  String get profile => 'Profile';

  @override
  String get favoritesTitle => 'Favorites';

  @override
  String get searchHint => 'Search for bread, milk, stores...';

  @override
  String get yourLocation => 'Your Location';

  @override
  String get gettingLocation => 'Getting location...';

  @override
  String get locationUnknown => 'Location unknown';

  @override
  String get specialOffers => 'Special Offers';

  @override
  String get affordableProducts => 'Affordable Products';

  @override
  String get stores => 'Stores';

  @override
  String get myProfile => 'My Profile';

  @override
  String get logout => 'Logout';

  @override
  String get logoutFromAccount => 'Logout';

  @override
  String get logoutConfirmation => 'Are you sure you want to log out?';

  @override
  String get cancel => 'Cancel';

  @override
  String get loginToSeeProfile => 'Please log in to see your profile.';

  @override
  String get guestUser => 'Guest User';

  @override
  String get unknownEmail => 'Unknown Email';

  @override
  String get accountSettings => 'Account Settings';

  @override
  String get orderHistory => 'Order History';

  @override
  String get changeLanguage => 'Change Language';

  @override
  String get selectLanguage => 'Select Language';

  @override
  String get persian => 'فارسی';

  @override
  String get english => 'English';

  @override
  String get german => 'Deutsch';

  @override
  String get categories => 'Categories';

  @override
  String get viewAll => 'View All';

  @override
  String get allProducts => 'All Products';

  @override
  String get availableStores => 'Available Stores';

  @override
  String get noProductsInCategory => 'No products found in this category.';

  @override
  String get viewStore => 'View Store';

  @override
  String get noDataAvailable => 'Sorry, there are currently no stores or products to display.';

  @override
  String get connectingToServer => 'Connecting to the server...';

  @override
  String get initialLoadingMessage => 'The initial load might take a moment. Please be patient.';

  @override
  String get locationError => 'Error converting location';

  @override
  String get km => 'km';

  @override
  String get myLocation => 'My Location';

  @override
  String get yourCartIsEmpty => 'Your shopping cart is empty.';

  @override
  String get yourShoppingCart => 'Your Shopping Cart';

  @override
  String get storeRating => 'Store Rating';

  @override
  String get loginToYourAccount => 'Login to your account';

  @override
  String get gladToSeeYouAgain => 'Glad to see you again!';

  @override
  String get email => 'Email';

  @override
  String get enterYourEmail => 'Please enter your email';

  @override
  String get invalidEmail => 'Invalid email format';

  @override
  String get password => 'Password';

  @override
  String get enterYourPassword => 'Please enter your password';

  @override
  String passwordTooShort(int length) {
    return 'Password must be at least $length characters';
  }

  @override
  String get login => 'Login';

  @override
  String get noAccount => 'No account? Register';

  @override
  String get sellerLogin => 'Seller Login';

  @override
  String get sellerPanel => 'Seller Panel';

  @override
  String get language => 'Language';

  @override
  String get createAccount => 'Create Account';

  @override
  String get welcomeToPersiaMarkt => 'Welcome to PersiaMarkt!';

  @override
  String get fullName => 'Full Name';

  @override
  String get enterYourName => 'Please enter your name';

  @override
  String get city => 'City';

  @override
  String get selectCity => 'Please select a city';

  @override
  String get register => 'Register';

  @override
  String get haveAccount => 'Already have an account?';

  @override
  String get registrationSuccess => 'Registration successful! Please log in.';

  @override
  String get support => 'Support';
}


====================
فایل: app_localizations_fa.dart
مسیر: D:\PersiaMarkt 3\persiamarkt\lib\l10n\app_localizations_fa.dart
====================

// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for Persian (`fa`).
class AppLocalizationsFa extends AppLocalizations {
  AppLocalizationsFa([String locale = 'fa']) : super(locale);

  @override
  String get persiaMarkt => 'پرشیا مارکت';

  @override
  String get home => 'خانه';

  @override
  String get map => 'نقشه';

  @override
  String get favorites => 'سبد خرید';

  @override
  String get profile => 'پروفایل';

  @override
  String get favoritesTitle => 'علاقه‌مندی‌ها';

  @override
  String get searchHint => 'جستجوی نان، شیر، فروشگاه...';

  @override
  String get yourLocation => 'موقعیت شما';

  @override
  String get gettingLocation => 'در حال دریافت موقعیت...';

  @override
  String get locationUnknown => 'موقعیت نامشخص';

  @override
  String get specialOffers => 'پیشنهادهای ویژه';

  @override
  String get affordableProducts => 'کالاهای مقرون به صرفه';

  @override
  String get stores => 'فروشگاه‌ها';

  @override
  String get myProfile => 'پروفایل من';

  @override
  String get logout => 'خروج';

  @override
  String get logoutFromAccount => 'خروج از حساب کاربری';

  @override
  String get logoutConfirmation => 'آیا برای خروج از حساب کاربری خود اطمینان دارید؟';

  @override
  String get cancel => 'انصراف';

  @override
  String get loginToSeeProfile => 'برای مشاهده پروفایل خود، لطفاً وارد شوید.';

  @override
  String get guestUser => 'کاربر مهمان';

  @override
  String get unknownEmail => 'ایمیل نامشخص';

  @override
  String get accountSettings => 'تنظیمات حساب کاربری';

  @override
  String get orderHistory => 'تاریخچه سفارشات';

  @override
  String get changeLanguage => 'تغییر زبان';

  @override
  String get selectLanguage => 'انتخاب زبان';

  @override
  String get persian => 'فارسی';

  @override
  String get english => 'English';

  @override
  String get german => 'Deutsch';

  @override
  String get categories => 'دسته‌بندی‌ها';

  @override
  String get viewAll => 'مشاهده همه';

  @override
  String get allProducts => 'همه محصولات';

  @override
  String get availableStores => 'فروشگاه‌های موجود';

  @override
  String get noProductsInCategory => 'محصولی در این دسته‌بندی یافت نشد.';

  @override
  String get viewStore => 'مشاهده فروشگاه';

  @override
  String get noDataAvailable => 'متاسفانه در حال حاضر فروشگاه یا محصولی برای نمایش وجود ندارد.';

  @override
  String get connectingToServer => 'در حال اتصال به سرور...';

  @override
  String get initialLoadingMessage => 'بارگذاری اولیه ممکن است کمی طول بکشد. لطفاً شکیبا باشید.';

  @override
  String get locationError => 'خطا در تبدیل موقعیت مکانی';

  @override
  String get km => 'کیلومتر';

  @override
  String get myLocation => 'موقعیت من';

  @override
  String get yourCartIsEmpty => 'سبد خرید شما خالی است';

  @override
  String get yourShoppingCart => 'سبد خرید شما';

  @override
  String get storeRating => 'امتیاز فروشگاه';

  @override
  String get loginToYourAccount => 'ورود به حساب کاربری';

  @override
  String get gladToSeeYouAgain => 'خوشحالیم که دوباره شما را می‌بینیم!';

  @override
  String get email => 'ایمیل';

  @override
  String get enterYourEmail => 'لطفاً ایمیل خود را وارد کنید';

  @override
  String get invalidEmail => 'فرمت ایمیل نامعتبر است';

  @override
  String get password => 'رمز عبور';

  @override
  String get enterYourPassword => 'لطفاً رمز عبور خود را وارد کنید';

  @override
  String passwordTooShort(int length) {
    return 'رمز عبور باید حداقل $length کاراکتر باشد';
  }

  @override
  String get login => 'ورود';

  @override
  String get noAccount => 'حساب کاربری ندارید؟ ثبت نام کنید';

  @override
  String get sellerLogin => 'ورود فروشندگان';

  @override
  String get sellerPanel => 'پنل فروشندگان';

  @override
  String get language => 'زبان';

  @override
  String get createAccount => 'ساخت حساب کاربری';

  @override
  String get welcomeToPersiaMarkt => 'به پرشیا مارکت خوش آمدید!';

  @override
  String get fullName => 'نام و نام خانوادگی';

  @override
  String get enterYourName => 'لطفاً نام خود را وارد کنید';

  @override
  String get city => 'شهر';

  @override
  String get selectCity => 'لطفاً یک شهر انتخاب کنید';

  @override
  String get register => 'ثبت نام';

  @override
  String get haveAccount => 'حساب کاربری دارید؟';

  @override
  String get registrationSuccess => 'ثبت‌نام با موفقیت انجام شد! لطفاً وارد شوید.';

  @override
  String get support => 'پشتیبانی';
}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

name: persia_markt
description: A mobile application for Persian products and stores in Germany.
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter

  # CORE UTILITIES
  cupertino_icons: ^1.0.2
  google_fonts: ^6.2.1
  equatable: ^2.0.5
  get_it: ^7.7.0
  fpdart: ^1.1.0
  intl: ^0.20.2 

  # STATE MANAGEMENT
  flutter_bloc: ^8.1.5

  # ROUTING
  go_router: ^14.1.0

  # NETWORKING & DATA
  http: ^1.2.1
  shared_preferences: ^2.2.3

  # LOCATION & MAPS
  geolocator: ^12.0.0
  geocoding: ^3.0.0
  flutter_map: ^7.0.0
  latlong2: ^0.9.1

  # UI & UX
  shimmer: ^3.0.0
  scrollable_positioned_list: ^0.3.8
  jwt_decoder: ^2.0.1
  flutter_staggered_animations: ^1.1.1 
  webview_flutter: ^4.8.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0
  
  # ۱. پکیج جدید برای ساخت آیکون اضافه شد
  flutter_launcher_icons: ^0.13.1

  # TESTING LIBRARIES
  bloc_test: ^9.1.7
  mocktail: ^1.0.3

# ۲. تنظیمات مربوط به پکیج آیکون اینجا اضافه شد
flutter_launcher_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/images/icon.png" # <<< اگر نام فایل شما متفاوت است، اینجا تغییر دهید
  min_sdk_android: 21 # To support adaptive icons, the minimum SDK version must be 26.
  web:
    generate: true
  windows:
    generate: true
  macos:
    generate: true


flutter:
  generate: true 

  uses-material-design: true
  
  assets:
    - assets/images/appLogo.png
    - assets/images/supermarket.png
    - assets/images/banner1.png
    - assets/images/banner2.png
    - assets/images/banner3.png
    - assets/images/banner4.png
    - assets/images/icon.png # <<< فایل آیکون جدید به لیست دارایی‌ها اضافه شد