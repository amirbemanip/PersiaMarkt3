// lib/core/config/app_router.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/features/category/view/category_detail_view.dart';
import 'package:persia_markt/features/home/presentation/view/home_view.dart';
import 'package:persia_markt/features/home/presentation/view/main_tab_bar_view.dart';
import 'package:persia_markt/features/map/view/map_view.dart';
import 'package:persia_markt/features/profile/presentation/view/favorites_view.dart';
import 'package:persia_markt/features/profile/presentation/view/profile_view.dart';
import 'package:persia_markt/features/search/presentation/view/search_view.dart';
import 'package:persia_markt/features/store/presentation/view/store_detail_view.dart';

final _rootNavigatorKey = GlobalKey<NavigatorState>();
final _shellNavigatorHomeKey = GlobalKey<NavigatorState>(debugLabel: 'shellHome');
final _shellNavigatorMapKey = GlobalKey<NavigatorState>(debugLabel: 'shellMap');
final _shellNavigatorFavoritesKey = GlobalKey<NavigatorState>(debugLabel: 'shellFavorites');
final _shellNavigatorProfileKey = GlobalKey<NavigatorState>(debugLabel: 'shellProfile');

class AppRouter {
  static final router = GoRouter(
    initialLocation: '/',
    navigatorKey: _rootNavigatorKey,
    routes: [
      StatefulShellRoute.indexedStack(
        builder: (context, state, navigationShell) {
          return MainTabBarView(navigationShell: navigationShell);
        },
        branches: [
          // Branch (شاخه) برای تب "خانه"
          StatefulShellBranch(
            navigatorKey: _shellNavigatorHomeKey,
            routes: [
              GoRoute(
                path: '/',
                builder: (context, state) => const HomeView(),
                routes: [
                  GoRoute(
                    path: 'store/:storeId',
                    builder: (context, state) {
                      final storeId = state.pathParameters['storeId']!;
                      final initialProductId = state.uri.queryParameters['productId'];
                      return StoreDetailView(
                        storeId: storeId,
                        initialProductId: initialProductId,
                      );
                    },
                  ),
                  GoRoute(
                    path: 'category/:categoryId',
                    builder: (context, state) {
                      final categoryId = state.pathParameters['categoryId']!;
                      return CategoryDetailView(categoryId: categoryId);
                    },
                  ),
                ],
              ),
            ],
          ),
          // Branch برای تب "نقشه"
          StatefulShellBranch(
            navigatorKey: _shellNavigatorMapKey,
            routes: [
              GoRoute(
                path: '/map',
                builder: (context, state) {
                  final lat = state.uri.queryParameters['lat'];
                  final lng = state.uri.queryParameters['lng'];
                  final focus = state.uri.queryParameters['focus'];  // اضافه شده
                  return MapView(lat: lat, lng: lng, focus: focus);
                },
              ),
            ],
          ),
          // Branch برای تب "علاقه‌مندی‌ها"
          StatefulShellBranch(
            navigatorKey: _shellNavigatorFavoritesKey,
            routes: [
              GoRoute(
                path: '/favorites',
                builder: (context, state) => const FavoritesView(),
              ),
            ],
          ),
          // Branch برای تب "پروفایل"
          StatefulShellBranch(
            navigatorKey: _shellNavigatorProfileKey,
            routes: [
              GoRoute(
                path: '/profile',
                builder: (context, state) => const ProfileView(),
              ),
            ],
          ),
        ],
      ),
      GoRoute(
        path: '/search',
        parentNavigatorKey: _rootNavigatorKey,
        builder: (context, state) => const SearchView(),
      ),
    ],
  );
}
// lib/core/config/service_locator.dart
import 'package:get_it/get_it.dart';
import 'package:http/http.dart' as http;
import 'package:persia_markt/core/services/api_service.dart';
import 'package:persia_markt/core/services/location_service.dart';
import 'package:persia_markt/features/home/data/repositories/market_repository_impl.dart';
import 'package:persia_markt/features/home/domain/repositories/market_repository.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_cubit.dart';
import 'package:shared_preferences/shared_preferences.dart';

final sl = GetIt.instance;

Future<void> setupServiceLocator() async {
  // External
  final sharedPreferences = await SharedPreferences.getInstance();
  sl.registerLazySingleton(() => sharedPreferences);
  sl.registerLazySingleton(() => http.Client());

  // Services
  sl.registerLazySingleton(() => ApiService(client: sl()));
  sl.registerLazySingleton(() => LocationService());

  // Repositories
  sl.registerLazySingleton<MarketRepository>(() => MarketRepositoryImpl(apiService: sl()));

  // Blocs / Cubits
  // خط زیر اضافه شد تا مشکل حل شود
  sl.registerFactory(() => MarketDataBloc(marketRepository: sl()));
  
  sl.registerFactory(() => LocationCubit(locationService: sl()));
  sl.registerFactory(() => FavoritesCubit(sharedPreferences: sl()));
  sl.registerFactory(() => SearchCubit());
}// lib/core/error/failures.dart
import 'package:equatable/equatable.dart';

/// Base class for all failures in the application.
/// A Failure represents an unexpected error (e.g., server error, network error).
abstract class Failure extends Equatable {
  final String message;
  const Failure(this.message);

  @override
  List<Object> get props => [message];
}

/// Represents a failure that occurs when communicating with the server.
class ServerFailure extends Failure {
  const ServerFailure(String message) : super(message);
}

/// Represents a failure related to network connectivity issues.
class NetworkFailure extends Failure {
  const NetworkFailure(String message) : super(message);
}// lib/core/models/category_item.dart
import 'package:equatable/equatable.dart';

class CategoryItem extends Equatable {
  final String categoryID;
  final String name;
  final String nameEn;
  final String description;
  final String icon;

  const CategoryItem({
    required this.categoryID,
    required this.name,
    required this.nameEn,
    required this.description,
    required this.icon,
  });

  @override
  List<Object> get props => [categoryID, name];

  factory CategoryItem.fromJson(Map<String, dynamic> json) {
    return CategoryItem(
      categoryID: json['categoryID'] as String,
      name: json['name'] as String,
      nameEn: json['name_en'] as String,
      description: json['description'] as String,
      icon: json['icon'] as String,
    );
  }
}// lib/core/models/location.dart
import 'package:equatable/equatable.dart';

class Location extends Equatable {
  final double lat;
  final double lng;

  const Location({required this.lat, required this.lng});

  @override
  List<Object> get props => [lat, lng];

  factory Location.fromJson(Map<String, dynamic> json) {
    return Location(
      lat: (json['lat'] as num).toDouble(),
      lng: (json['lng'] as num).toDouble(),
    );
  }
}// lib/core/models/market_data.dart
import 'package:equatable/equatable.dart';
import 'category_item.dart';
import 'product.dart';
import 'store.dart';

class MarketData extends Equatable {
  final List<Store> stores;
  final List<CategoryItem> categories;
  final List<Product> products;

  const MarketData({
    required this.stores,
    required this.categories,
    required this.products,
  });

  @override
  List<Object> get props => [stores, categories, products];

  factory MarketData.fromJson(Map<String, dynamic> json) {
    return MarketData(
      stores: (json['stores'] as List).map((item) => Store.fromJson(item)).toList(),
      categories: (json['categories'] as List).map((item) => CategoryItem.fromJson(item)).toList(),
      products: (json['products'] as List).map((item) => Product.fromJson(item)).toList(),
    );
  }
}// lib/core/models/product.dart
import 'package:equatable/equatable.dart'; // اصلاح شده

class Product extends Equatable {
  // --- فیلدهای اصلی از API جدید ---
  final String id;
  final String storeID;
  final String name;
  final String description;
  final String brand;
  final String imageURL;
  final double price;
  final int stock;

  // --- فیلدهای قدیمی که برای سازگاری کامل حفظ شده‌اند ---
  final String categoryID;
  final bool isPostalAvailable;
  final double discount;
  final String unit;
  final List<String> tags;
  final String nameEn;
  final String variant;

  const Product({
    required this.id,
    required this.storeID,
    required this.name,
    required this.description,
    required this.brand,
    required this.imageURL,
    required this.price,
    required this.stock,
    // فیلدهای قدیمی با مقادیر پیش‌فرض
    this.categoryID = 'unknown',
    this.isPostalAvailable = false,
    this.discount = 0.0,
    this.unit = '',
    this.tags = const [],
    this.nameEn = '',
    this.variant = '',
  });

  @override
  List<Object?> get props => [id, storeID, name, price];

  factory Product.fromJson(Map<String, dynamic> json) {
    final productData = json['product'] as Map<String, dynamic>;
    return Product(
      id: (json['id'] as int).toString(),
      storeID: json['storeID'] ?? 'unknown',
      name: productData['name'] as String,
      brand: productData['brand'] as String,
      description: productData['description'] as String,
      imageURL: (productData['images'] as List).isNotEmpty 
                ? productData['images'][0] as String
                : '',
      price: double.parse(json['price'].toString()),
      stock: json['stock'] as int,
      // فیلدهای دیگر از API خوانده نمی‌شوند و مقدار پیش‌فرض می‌گیرند
    );
  }
}// lib/core/models/store.dart
import 'package:equatable/equatable.dart';
import 'location.dart';

class Store extends Equatable {
  final String storeID;
  final String name;
  final String address;
  final String storeImage;
  final double latitude;
  final double longitude;
  final double rating;
  final String city;
  final String phone;
  final List<String> deliveryOptions;
  final double deliveryFeePerKm;
  final String nameEn;
  final String cityEn;
  final String storeType;
  final Map<String, String> operatingHours;
  final String currency;

  const Store({
    required this.storeID,
    required this.name,
    required this.address,
    required this.storeImage,
    required this.latitude,
    required this.longitude,
    required this.rating,
    this.city = '',
    this.phone = '',
    this.deliveryOptions = const [],
    this.deliveryFeePerKm = 0.0,
    this.nameEn = '',
    this.cityEn = '',
    this.storeType = '',
    this.operatingHours = const {},
    this.currency = 'EUR',
  });

  /// برای مواقعی که نیاز به Store خالی داریم
  factory Store.empty() {
    return const Store(
      storeID: '',
      name: 'Not Found',
      address: '',
      storeImage: '',
      latitude: 0.0,
      longitude: 0.0,
      rating: 0.0,
    );
  }

  @override
  List<Object?> get props => [
        storeID,
        name,
        address,
        storeImage,
        latitude,
        longitude,
        rating,
        city,
        phone,
        deliveryOptions,
        deliveryFeePerKm,
        nameEn,
        cityEn,
        storeType,
        operatingHours,
        currency,
      ];

  factory Store.fromJson(Map<String, dynamic> json) {
    return Store(
      storeID: (json['id'] as int).toString(),
      name: json['store_name'] as String,
      address: json['store_address'] as String,
      storeImage: json['store_image_url'] as String,
      latitude: (json['latitude'] as num).toDouble(),
      longitude: (json['longitude'] as num).toDouble(),
      rating: (json['rating'] as num).toDouble(),
      city: json['city'] ?? '',
      phone: json['phone'] ?? '',
      deliveryOptions: (json['delivery_options'] as List<dynamic>?)
              ?.map((e) => e.toString())
              .toList() ??
          [],
      deliveryFeePerKm:
          (json['delivery_fee_per_km'] as num?)?.toDouble() ?? 0.0,
      nameEn: json['name_en'] ?? '',
      cityEn: json['city_en'] ?? '',
      storeType: json['store_type'] ?? '',
      operatingHours: (json['operating_hours'] as Map?)?.map(
            (key, value) => MapEntry(key.toString(), value.toString()),
          ) ??
          {},
      currency: json['currency'] ?? 'EUR',
    );
  }
}
// lib/core/services/api_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:persia_markt/core/models/category_item.dart';

class ApiService {
  // آدرس پایه جدید API شما
  final String _baseUrl = 'https://persia-market-panel.onrender.com';
  final http.Client _client;

  ApiService({required http.Client client}) : _client = client;

  /// داده‌های خام (JSON) را برای ساخت MarketData از بک‌اند دریافت می‌کند.
  Future<Map<String, dynamic>> fetchMarketDataAsJson() async {
    try {
      // ۱. ابتدا لیست تمام فروشگاه‌ها را از اندپوینت /stores دریافت می‌کنیم
      final storesResponse = await _client.get(Uri.parse('$_baseUrl/stores'));
      if (storesResponse.statusCode != 200) {
        throw Exception('Failed to load stores from API');
      }
      final List<dynamic> storesJson =
          json.decode(utf8.decode(storesResponse.bodyBytes));

      // ۲. سپس به ازای هر فروشگاه، محصولات آن را از اندپوینت /stores/:id/products دریافت می‌کنیم
      List<dynamic> allProductsJson = [];
      for (var storeJson in storesJson) {
        final productsResponse = await _client
            .get(Uri.parse('$_baseUrl/stores/${storeJson['id']}/products'));
        if (productsResponse.statusCode == 200) {
          final List<dynamic> productsJson =
              json.decode(utf8.decode(productsResponse.bodyBytes));

          // ۳. storeID را به صورت دستی به هر محصول اضافه می‌کنیم تا در برنامه قابل استفاده باشد
          for (var productJson in productsJson) {
            productJson['storeID'] = storeJson['id'].toString();
          }
          allProductsJson.addAll(productsJson);
        }
      }

      // ۴. فرض می‌کنیم دسته‌بندی‌ها فعلاً ثابت هستند.
      final categoriesJson = _getHardcodedCategories();

      // ۵. در نهایت، یک JSON با همان ساختار قبلی (که BLoC انتظار دارد) می‌سازیم
      return {
        'stores': storesJson,
        'products': allProductsJson,
        'categories': categoriesJson,
      };
    } catch (e) {
      // مدیریت خطا و نمایش یک پیام قابل فهم
      throw Exception('Failed to fetch market data from API: $e');
    }
  }

  /// متد کمکی برای برگرداندن لیست ثابت دسته‌بندی‌ها
  List<Map<String, dynamic>> _getHardcodedCategories() {
    return [
      {
        "categoryID": "cat001",
        "name": "نان",
        "name_en": "Bread",
        "description": "انواع نان تازه",
        "icon": "bread_icon"
      },
      {
        "categoryID": "cat002",
        "name": "لبنیات",
        "name_en": "Dairy",
        "description": "شیر، ماست، پنیر و...",
        "icon": "dairy_icon"
      },
      {
        "categoryID": "cat003",
        "name": "نوشیدنی",
        "name_en": "Beverages",
        "description": "نوشابه، آبمیوه و...",
        "icon": "beverage_icon"
      },
      {
        "categoryID": "cat004",
        "name": "شوینده",
        "name_en": "Detergents",
        "description": "مواد شوینده و بهداشتی",
        "icon": "detergent_icon"
      },
      {
        "categoryID": "cat005",
        "name": "کنسرو",
        "name_en": "Canned Goods",
        "description": "انواع کنسرو و غذای آماده",
        "icon": "canned_icon"
      },
      {
        "categoryID": "cat006",
        "name": "خشکبار",
        "name_en": "Nuts and Dried Fruits",
        "description": "آجیل و میوه خشک",
        "icon": "nuts_icon"
      },
      {
        "categoryID": "cat007",
        "name": "اقتصادی",
        "name_en": "Economical",
        "description": "محصولات با قیمت مناسب",
        "icon": "economical_icon"
      }
    ];
  }
}// lib/services/location_service.dart
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';

class LocationService {
  /// موقعیت فعلی دستگاه را با بررسی کامل دسترسی‌ها مشخص می‌کند.
  Future<Position> getCurrentPosition() async {
    // 1. بررسی فعال بودن سرویس موقعیت‌یاب دستگاه
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      return Future.error('سرویس موقعیت مکانی غیرفعال است.');
    }

    // 2. بررسی و درخواست دسترسی موقعیت مکانی از کاربر
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        return Future.error('دسترسی به موقعیت مکانی رد شد.');
      }
    }

    if (permission == LocationPermission.deniedForever) {
      return Future.error('دسترسی به موقعیت مکانی برای همیشه رد شده است.');
    }

    // 3. در صورت تایید دسترسی، موقعیت فعلی را برمی‌گرداند
    return await Geolocator.getCurrentPosition();
  }

  /// یک موقعیت جغرافیایی را به یک آدرس خوانا تبدیل می‌کند.
  Future<String> getAddressFromPosition(Position position) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(position.latitude, position.longitude);

      if (placemarks.isNotEmpty) {
        final placemark = placemarks.first; 
        
        // بخش‌های مختلف آدرس را استخراج می‌کند
        final city = placemark.locality ?? ''; 
        final street = placemark.thoroughfare ?? ''; 
        
        // آدرس را به صورت خوانا ترکیب می‌کند
        final addressParts = [city, street].where((part) => part.isNotEmpty).toList();
        if (addressParts.isNotEmpty) {
          return addressParts.join(', ');
        }
      }
      // اگر هیچ آدرسی یافت نشد
      return 'موقعیت نامعلوم'; 
    } catch (e) {
      // دستور print برای محیط نهایی (production) حذف شد.
      // در صورت بروز خطا، یک پیام مناسب به کاربر نمایش داده می‌شود.
      return 'خطا در تبدیل موقعیت';
    }
  }
}// lib/core/widgets/error_view.dart
import 'package:flutter/material.dart';

/// A reusable widget to display an error message with an optional retry button.
class AppErrorView extends StatelessWidget {
  final String message;
  final VoidCallback? onRetry;

  const AppErrorView({
    Key? key,
    required this.message,
    this.onRetry,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.cloud_off_rounded,
              color: Colors.red.shade300,
              size: 60,
            ),
            const SizedBox(height: 16),
            Text(
              'متاسفانه خطایی رخ داد!',
              style: Theme.of(context).textTheme.headlineSmall,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              message,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(color: Colors.grey.shade600),
              textAlign: TextAlign.center,
            ),
            if (onRetry != null) ...[
              const SizedBox(height: 24),
              ElevatedButton.icon(
                onPressed: onRetry,
                icon: const Icon(Icons.refresh),
                label: const Text('تلاش مجدد'),
              ),
            ],
          ],
        ),
      ),
    );
  }
}// lib/core/widgets/loading_shimmer.dart
import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

/// A reusable shimmer box widget to indicate loading state.
class ShimmerBox extends StatelessWidget {
  final double width;
  final double height;
  final ShapeBorder shape;

  const ShimmerBox({
    Key? key,
    required this.width,
    required this.height,
    this.shape = const RoundedRectangleBorder(),
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    bool isDarkMode = Theme.of(context).brightness == Brightness.dark;
    return Shimmer.fromColors(
      baseColor: isDarkMode ? Colors.grey.shade800 : Colors.grey.shade300,
      highlightColor: isDarkMode ? Colors.grey.shade700 : Colors.grey.shade100,
      child: Container(
        width: width,
        height: height,
        decoration: ShapeDecoration(
          color: Colors.grey,
          shape: shape,
        ),
      ),
    );
  }
}// lib/core/widgets/product_card_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_state.dart';

/// A card widget to display a product in a compact, column-based layout.
/// Used in horizontal carousels.
class ProductCardView extends StatelessWidget {
  final Product product;
  final Store store;

  const ProductCardView({super.key, required this.product, required this.store});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => context.go('/store/${store.storeID}?productId=${product.id}'), // fixed productID -> id
      child: Container(
        width: 160,
        margin: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withAlpha((0.05 * 255).round()), // replaced withAlpha
              spreadRadius: 1,
              blurRadius: 5,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Product Image Section
            Stack(
              children: [
                ClipRRect(
                  borderRadius: const BorderRadius.vertical(top: Radius.circular(12)),
                  child: Container(
                    height: 120,
                    width: double.infinity,
                    color: Colors.grey.shade100,
                    child: Image.network(
                      product.imageURL,
                      fit: BoxFit.contain,
                      errorBuilder: (_, __, ___) => Image.asset(
                        'assets/images/supermarket.png',
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                ),
                Positioned(
                  top: 4,
                  left: 4,
                  child: BlocBuilder<FavoritesCubit, FavoritesState>(
                    builder: (context, state) {
                      final isLiked = state.productIds.contains(product.id); // fixed productID -> id
                      return IconButton(
                        onPressed: () => context.read<FavoritesCubit>().toggleLike(product.id), // fixed
                        icon: Icon(
                          isLiked ? Icons.favorite : Icons.favorite_border,
                          color: isLiked ? Colors.red : Colors.grey.shade400,
                          size: 24,
                        ),
                      );
                    },
                  ),
                ),
              ],
            ),
            // Product Details Section
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    product.name,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    store.name,
                    style: TextStyle(fontSize: 12, color: Colors.grey.shade600),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 8),
                  Align(
                    alignment: Alignment.centerRight,
                    child: Text(
                      '€${product.price.toStringAsFixed(2)}',
                      style: TextStyle(
                        color: Colors.green.shade700,
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
// lib/core/widgets/product_list_item_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_state.dart';

class ProductListItemView extends StatelessWidget {
  final Product product;
  final Store store;
  final VoidCallback? onImageTap;

  const ProductListItemView({
    super.key,
    required this.product,
    required this.store,
    this.onImageTap,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 1,
      margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 16),
      child: ListTile(
        onTap: () => context.go('/store/${store.storeID}?productId=${product.id}'), // fixed
        leading: GestureDetector(
          onTap: onImageTap,
          child: ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.network(
              product.imageURL,
              width: 60,
              height: 60,
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) => Image.asset(
                'assets/images/supermarket.png',
                width: 60,
                height: 60,
                fit: BoxFit.cover,
              ),
            ),
          ),
        ),
        title: Text(
          product.name,
          style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
        subtitle: Text(
          product.description,
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '€${product.price.toStringAsFixed(2)}',
              style: const TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
            ),
            const SizedBox(width: 8),
            _FavoriteButton(productId: product.id), // fixed
          ],
        ),
      ),
    );
  }
}

class _FavoriteButton extends StatelessWidget {
  final String productId;
  const _FavoriteButton({required this.productId});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<FavoritesCubit, FavoritesState>(
      builder: (context, state) {
        final isLiked = state.productIds.contains(productId);
        return IconButton(
          onPressed: () => context.read<FavoritesCubit>().toggleLike(productId),
          icon: Icon(
            isLiked ? Icons.favorite : Icons.favorite_border,
            color: isLiked ? Colors.red : Colors.grey,
          ),
        );
      },
    );
  }
}
// lib/core/widgets/store_list_item_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_state.dart';

class StoreListItemView extends StatelessWidget {
  final Store store;
  const StoreListItemView({super.key, required this.store});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 16),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08), // سایه ملایم
            blurRadius: 10,
            spreadRadius: 1,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: ListTile(
          onTap: () => context.go('/store/${store.storeID}'),
          leading: ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.network(
              store.storeImage,
              width: 60,
              height: 60,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) => Image.asset(
                'assets/images/supermarket.png',
                width: 60,
                height: 60,
                fit: BoxFit.cover,
              ),
            ),
          ),
          title: Text(
            store.name,
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                ),
          ),
          subtitle: Text(
            '${store.address}, ${store.city}',
            overflow: TextOverflow.ellipsis,
          ),
          trailing: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.star, color: Colors.amber, size: 16),
                  const SizedBox(width: 4),
                  Text(store.rating.toString()),
                ],
              ),
              const SizedBox(height: 4),
              BlocBuilder<LocationCubit, LocationState>(
                builder: (context, locationState) {
                  if (locationState is LocationLoaded) {
                    final distance = Geolocator.distanceBetween(
                      locationState.position.latitude,
                      locationState.position.longitude,
                      store.latitude,  // اصلاح شد
                      store.longitude, // اصلاح شد
                    );
                    final distanceText = '${(distance / 1000).toStringAsFixed(1)} کیلومتر';
                    return Text(
                      distanceText,
                      style: const TextStyle(fontSize: 12, color: Colors.grey),
                    );
                  }
                  return const SizedBox.shrink();
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}
// lib/features/category/view/category_detail_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
// import های اضافی حذف شدند
import 'package:persia_markt/core/widgets/product_card_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
// import 'packagepackage:persia_markt/features/home/presentation/bloc/market_data_state.dart'; -> اصلاح شد
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';

class CategoryDetailView extends StatelessWidget {
  final String categoryId;
  const CategoryDetailView({super.key, required this.categoryId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocBuilder<MarketDataBloc, MarketDataState>(
        builder: (context, state) {
          if (state is MarketDataLoaded) {
            final category = state.marketData.categories.firstWhere((c) => c.categoryID == categoryId);
            
            // ۱. ابتدا تمام محصولات این دسته‌بندی را پیدا می‌کنیم
            final productsInCategory = state.marketData.products.where((p) => p.categoryID == categoryId).toList();
            
            // ۲. سپس فروشگاه‌هایی که این محصولات را دارند، شناسایی می‌کنیم
            final storeIds = productsInCategory.map((p) => p.storeID).toSet();
            final stores = state.marketData.stores.where((s) => storeIds.contains(s.storeID)).toList();

            return CustomScrollView(
              slivers: [
                SliverAppBar(
                  title: Text(category.name),
                  pinned: true,
                ),
                if (stores.isEmpty)
                  const SliverFillRemaining(
                    child: Center(child: Text('محصولی در این دسته‌بندی یافت نشد.')),
                  )
                else
                  // ۳. یک لیست عمودی از فروشگاه‌ها می‌سازیم
                  SliverList.builder(
                    itemCount: stores.length,
                    itemBuilder: (context, index) {
                      final store = stores[index];
                      // ۴. محصولات هر فروشگاه را برای لیست افقی فیلتر می‌کنیم
                      final productsInStore = productsInCategory.where((p) => p.storeID == store.storeID).toList();
                      
                      return Card(
                        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                        elevation: 2,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                        child: Column(
                          children: [
                            // هدر اطلاعات فروشگاه
                            ListTile(
                              leading: CircleAvatar(
                                backgroundImage: NetworkImage(store.storeImage),
                                onBackgroundImageError: (_, __) {},
                              ),
                              title: Text(store.name, style: const TextStyle(fontWeight: FontWeight.bold)),
                              subtitle: Text(store.address),
                            ),
                            // لیست افقی محصولات این فروشگاه
                            SizedBox(
                              height: 250, // ارتفاع برای ProductCardView
                              child: ListView.builder(
                                scrollDirection: Axis.horizontal,
                                itemCount: productsInStore.length,
                                padding: const EdgeInsets.all(8),
                                itemBuilder: (context, productIndex) {
                                  return ProductCardView(
                                    product: productsInStore[productIndex], 
                                    store: store
                                  );
                                },
                              ),
                            ),
                            // دکمه رفتن به صفحه فروشگاه
                            Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: Align(
                                alignment: Alignment.centerLeft,
                                child: ElevatedButton.icon(
                                  onPressed: () => context.go('/store/${store.storeID}'),
                                  icon: const Icon(Icons.storefront_outlined),
                                  label: const Text('مشاهده فروشگاه'),
                                ),
                              ),
                            )
                          ],
                        ),
                      );
                    },
                  ),
              ],
            );
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}// lib/features/home/data/repositories/market_repository_impl.dart
import 'package:fpdart/fpdart.dart';
import 'package:persia_markt/core/error/failures.dart';
import 'package:persia_markt/core/models/market_data.dart';
import 'package:persia_markt/core/services/api_service.dart';
import 'package:persia_markt/features/home/domain/repositories/market_repository.dart';

class MarketRepositoryImpl implements MarketRepository {
  final ApiService _apiService;

  const MarketRepositoryImpl({required ApiService apiService})
      : _apiService = apiService;

  @override
  Future<Either<Failure, MarketData>> getMarketData() async {
    try {
      // ۱) دریافت داده خام JSON از سرویس
      final Map<String, dynamic> marketDataJson =
          await _apiService.fetchMarketDataAsJson();

      // ۲) تبدیل JSON به مدل MarketData
      final marketData = MarketData.fromJson(marketDataJson);

      // ۳) بازگرداندن نتیجه موفق
      return Right(marketData);
    } catch (e) {
      // ۴) هندل خطا و برگرداندن Failure
      return Left(ServerFailure(e.toString()));
    }
  }
}
// lib/features/home/domain/repositories/market_repository.dart
import 'package:fpdart/fpdart.dart';
import 'package:persia_markt/core/error/failures.dart';
import 'package:persia_markt/core/models/market_data.dart';

/// Abstract contract for the market data repository.
/// This allows the business logic layer (BLoC) to depend on an abstraction,
/// not a concrete implementation, which is crucial for testing and modularity.
abstract class MarketRepository {
  /// Fetches the market data.
  /// Returns [Either] a [Failure] on error or [MarketData] on success.
  Future<Either<Failure, MarketData>> getMarketData();
}// lib/features/home/domain/repositories/market_repository.dart
import 'package:fpdart/fpdart.dart';
import 'package:persia_markt/core/error/failures.dart';
import 'package:persia_markt/core/models/market_data.dart';

/// Abstract contract for the market data repository.
/// This allows the business logic layer (BLoC) to depend on an abstraction,
/// not a concrete implementation, which is crucial for testing and modularity.
///
/// It defines what the repository *must do*, but not *how* it does it.
abstract class MarketRepository {
  /// Fetches the market data.
  /// Returns [Either] a [Failure] on error or [MarketData] on success.
  /// The Either type from fpdart provides excellent, explicit error handling.
  Future<Either<Failure, MarketData>> getMarketData();
}// lib/features/home/presentation/bloc/market_data_bloc.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/features/home/domain/repositories/market_repository.dart';
import 'market_data_event.dart';
import 'market_data_state.dart';

class MarketDataBloc extends Bloc<MarketDataEvent, MarketDataState> {
  final MarketRepository _marketRepository;

  MarketDataBloc({required MarketRepository marketRepository})
      : _marketRepository = marketRepository,
        super(MarketDataInitial()) {
    // Register the event handler
    on<FetchMarketDataEvent>(_onFetchMarketData);
  }

  /// Handles the FetchMarketDataEvent.
  Future<void> _onFetchMarketData(
    FetchMarketDataEvent event,
    Emitter<MarketDataState> emit,
  ) async {
    emit(MarketDataLoading());
    final failureOrMarketData = await _marketRepository.getMarketData();
    
    // Use .fold for elegant handling of the Either<Failure, Success> type.
    // The first function handles the Left (Failure) case, the second handles the Right (Success) case.
    failureOrMarketData.fold(
      (failure) => emit(MarketDataError(message: failure.message)),
      (marketData) => emit(MarketDataLoaded(marketData: marketData)),
    );
  }
}// lib/features/home/presentation/bloc/market_data_event.dart
import 'package:equatable/equatable.dart';

abstract class MarketDataEvent extends Equatable {
  const MarketDataEvent();
  @override
  List<Object> get props => [];
}

/// Event to trigger fetching market data from the repository.
class FetchMarketDataEvent extends MarketDataEvent {}// lib/features/home/presentation/bloc/market_data_state.dart
import 'package:equatable/equatable.dart';
import 'package:persia_markt/core/models/market_data.dart';

abstract class MarketDataState extends Equatable {
  const MarketDataState();
  @override
  List<Object> get props => [];
}

class MarketDataInitial extends MarketDataState {}

class MarketDataLoading extends MarketDataState {}

class MarketDataLoaded extends MarketDataState {
  final MarketData marketData;
  const MarketDataLoaded({required this.marketData});
  @override
  List<Object> get props => [marketData];
}

class MarketDataError extends MarketDataState {
  final String message;
  const MarketDataError({required this.message});
  @override
  List<Object> get props => [message];
}// lib/features/home/presentation/cubit/location_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/services/location_service.dart';
import 'location_state.dart';

/// Manages the state for user location.
/// It interacts with the LocationService to fetch the current position and address.
class LocationCubit extends Cubit<LocationState> {
  final LocationService _locationService;

  LocationCubit({required LocationService locationService})
      : _locationService = locationService,
        super(LocationInitial());

  /// Fetches the user's current location and address.
  /// Emits [LocationLoading], followed by [LocationLoaded] on success
  /// or [LocationError] on failure.
  Future<void> fetchLocation() async {
    emit(LocationLoading());
    try {
      final position = await _locationService.getCurrentPosition();
      final address = await _locationService.getAddressFromPosition(position);
      emit(LocationLoaded(position: position, address: address));
    } catch (e) {
      emit(LocationError(message: e.toString()));
    }
  }
}// lib/features/home/presentation/cubit/location_state.dart
import 'package:equatable/equatable.dart';
import 'package:geolocator/geolocator.dart';

/// Base class for all location-related states.
abstract class LocationState extends Equatable {
  const LocationState();
  @override
  List<Object?> get props => [];
}

/// The initial state before any location fetching has started.
class LocationInitial extends LocationState {}

/// The state while the location is being fetched.
class LocationLoading extends LocationState {}

/// The state when the location has been successfully fetched.
class LocationLoaded extends LocationState {
  final Position position;
  final String address;

  const LocationLoaded({required this.position, required this.address});

  @override
  List<Object?> get props => [position, address];
}

/// The state when an error occurs during location fetching.
class LocationError extends LocationState {
  final String message;

  const LocationError({required this.message});

  @override
  List<Object?> get props => [message];
}// lib/features/home/presentation/cubit/market_data_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/services/api_service.dart';
import 'package:persia_markt/core/models/market_data.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';

class MarketDataCubit extends Cubit<MarketDataState> {
  final ApiService _apiService;

  MarketDataCubit({required ApiService apiService})
      : _apiService = apiService,
        super(MarketDataLoading()); // ← const حذف شد

  /// دریافت داده‌ی بازار و انتشار State مناسب
  Future<void> fetchMarketData() async {
    try {
      emit(MarketDataLoading()); // ← const حذف شد

      final Map<String, dynamic> json = await _apiService.fetchMarketDataAsJson();
      final MarketData data = MarketData.fromJson(json);

      emit(MarketDataLoaded(marketData: data));
    } catch (e) {
      emit(MarketDataError(message: 'خطا در دریافت اطلاعات: ${e.toString()}'));
    }
  }
}
import 'package:equatable/equatable.dart';
import 'package:persia_markt/core/models/market_data.dart';

// کلاس پایه برای وضعیت‌ها
abstract class MarketDataState extends Equatable {
  const MarketDataState();

  @override
  List<Object> get props => [];
}

// وضعیت اولیه یا در حال بارگذاری
class MarketDataLoading extends MarketDataState {}

// وضعیت موفقیت آمیز بودن دریافت داده‌ها
class MarketDataLoaded extends MarketDataState {
  final MarketData marketData;

  const MarketDataLoaded({required this.marketData});

  @override
  List<Object> get props => [marketData];
}

// وضعیت بروز خطا
class MarketDataError extends MarketDataState {
  final String message;

  const MarketDataError({required this.message});

  @override
  List<Object> get props => [message];
}// lib/features/home/presentation/view/home_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/widgets/error_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_event.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/home/presentation/widgets/affordable_products_section.dart';
import 'package:persia_markt/features/home/presentation/widgets/banner_carousel_view.dart';
import 'package:persia_markt/features/home/presentation/widgets/category_list_view.dart';
import 'package:persia_markt/features/home/presentation/widgets/home_header.dart';
import 'package:persia_markt/features/home/presentation/widgets/home_loading_shimmer.dart';
import 'package:persia_markt/features/home/presentation/widgets/section_divider.dart';
import 'package:persia_markt/features/home/presentation/widgets/stores_by_city_section.dart';

class HomeView extends StatelessWidget {
  const HomeView({super.key});

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        body: BlocBuilder<MarketDataBloc, MarketDataState>(
          builder: (context, state) {
            if (state is MarketDataLoading || state is MarketDataInitial) {
              return const HomeLoadingShimmer();
            }
            if (state is MarketDataError) {
              return AppErrorView(
                message: state.message,
                onRetry: () => context.read<MarketDataBloc>().add(FetchMarketDataEvent()),
              );
            }
            if (state is MarketDataLoaded) {
              final marketData = state.marketData;
              return RefreshIndicator(
                onRefresh: () async {
                  context.read<MarketDataBloc>().add(FetchMarketDataEvent());
                },
                child: CustomScrollView(
                  slivers: [
                    HomeHeader(onSearchTapped: () => context.go('/search')),
                    SliverList(
                      delegate: SliverChildListDelegate([
                        const SizedBox(height: 24),
                        CategoryListView(categories: marketData.categories),
                        const SectionDivider(title: 'پیشنهادهای ویژه'),
                        const BannerCarouselView(
                          bannerImageUrls: [
                            'assets/images/banner1.png',
                            'assets/images/banner2.png',
                            'assets/images/banner3.png',
                          ],
                        ),
                        const SectionDivider(title: 'محصولات مقرون به صرفه'),
                        AffordableProductsSection(
                          products: marketData.products,
                          stores: marketData.stores,
                        ),
                        const SectionDivider(title: 'فروشگاه‌ها'),
                        StoresByCitySection(stores: marketData.stores),
                        const SizedBox(height: 50),
                      ]),
                    ),
                  ],
                ),
              );
            }
            return const SizedBox.shrink();
          },
        ),
      ),
    );
  }
}// lib/features/home/presentation/view/main_tab_bar_view.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class MainTabBarView extends StatelessWidget {
  final StatefulNavigationShell navigationShell;

  const MainTabBarView({
    super.key,
    required this.navigationShell,
  });

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        body: navigationShell,
        bottomNavigationBar: BottomNavigationBar(
          currentIndex: navigationShell.currentIndex,
          onTap: (index) {
            // این بخش منطق مربوط به جابجایی بین تب‌ها و ریست شدن صفحه اصلی را مدیریت می‌کند
            navigationShell.goBranch(
              index,
              initialLocation: index == navigationShell.currentIndex,
            );
          },
          type: BottomNavigationBarType.fixed,
          selectedItemColor: Theme.of(context).colorScheme.primary,
          unselectedItemColor: Colors.grey,
          items: const [
            BottomNavigationBarItem(icon: Icon(Icons.home_outlined), activeIcon: Icon(Icons.home), label: 'خانه'),
            BottomNavigationBarItem(icon: Icon(Icons.map_outlined), activeIcon: Icon(Icons.map), label: 'نقشه'),
            BottomNavigationBarItem(icon: Icon(Icons.favorite_border), activeIcon: Icon(Icons.favorite), label: 'موردعلاقه‌ها'),
            BottomNavigationBarItem(icon: Icon(Icons.person_outline), activeIcon: Icon(Icons.person), label: 'پروفایل'),
          ],
        ),
      ),
    );
  }
}// lib/features/home/presentation/widgets/affordable_products_section.dart
import 'package:flutter/material.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/core/widgets/product_card_view.dart';

class AffordableProductsSection extends StatelessWidget {
  final List<Product> products;
  final List<Store> stores;
  const AffordableProductsSection({super.key, required this.products, required this.stores});

  @override
  Widget build(BuildContext context) {
    // Filter products that belong to the "affordable" category
    final affordableProducts = products.where((p) => p.categoryID == 'cat007').toList();
    
    if (affordableProducts.isEmpty) {
      return const SizedBox.shrink(); // Return empty space if no affordable products
    }

    return SizedBox(
      height: 250, // Height for ProductCardView
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: affordableProducts.length,
        padding: const EdgeInsets.symmetric(horizontal: 8),
        itemBuilder: (context, index) {
          final product = affordableProducts[index];
          final store = stores.firstWhere((s) => s.storeID == product.storeID);
          return ProductCardView(product: product, store: store);
        },
      ),
    );
  }
}// lib/features/home/presentation/widgets/banner_carousel_view.dart
import 'package:flutter/material.dart';
import 'dart:async';

class BannerCarouselView extends StatefulWidget {
  final List<String> bannerImageUrls;
  const BannerCarouselView({super.key, required this.bannerImageUrls});

  @override
  State<BannerCarouselView> createState() => _BannerCarouselViewState();
}

class _BannerCarouselViewState extends State<BannerCarouselView> {
  late final PageController _pageController;
  late final Timer _timer;
  int _currentPage = 0;

  @override
  void initState() {
    super.initState();
    _pageController = PageController(viewportFraction: 0.9);
    _startAutoScroll();
  }

  void _startAutoScroll() {
    _timer = Timer.periodic(const Duration(seconds: 4), (timer) {
      if (_pageController.hasClients) {
        _currentPage = (_currentPage + 1) % widget.bannerImageUrls.length;
        _pageController.animateToPage(
          _currentPage,
          duration: const Duration(milliseconds: 600),
          curve: Curves.easeInOutCubic,
        );
      }
    });
  }

  @override
  void dispose() {
    _timer.cancel();
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 150,
      child: PageView.builder(
        controller: _pageController,
        itemCount: widget.bannerImageUrls.length,
        itemBuilder: (context, index) {
          return Container(
            margin: const EdgeInsets.symmetric(horizontal: 8),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
              image: DecorationImage(
                image: AssetImage(widget.bannerImageUrls[index]),
                fit: BoxFit.cover,
              ),
            ),
          );
        },
      ),
    );
  }
}// lib/features/home/presentation/widgets/category_list_view.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/category_item.dart';

class CategoryListView extends StatelessWidget {
  final List<CategoryItem> categories;
  const CategoryListView({super.key, required this.categories});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 120,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: categories.length,
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4), // کمی پدینگ عمودی برای نمایش کامل سایه
        itemBuilder: (context, index) {
          final category = categories[index];
          return GestureDetector(
            onTap: () => context.go('/category/${category.categoryID}'),
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: Column(
                children: [
                  // ======================= تغییر اصلی اینجاست =======================
                  // CircleAvatar با یک Container جایگزین شد تا بتوانیم سایه اضافه کنیم
                  Container(
                    width: 80,  // قطر دایره
                    height: 80, // قطر دایره
                    decoration: BoxDecoration(
                      color: Colors.orange.shade100,
                      shape: BoxShape.circle,
                      image: const DecorationImage(
                        image: AssetImage('assets/images/supermarket.png'),
                        fit: BoxFit.cover,
                      ),
                      boxShadow: [
                        // تعریف سایه ظریف
                        BoxShadow(
                          color: Colors.black.withOpacity(0.1), // رنگ سایه بسیار ملایم
                          blurRadius: 8.0,  // میزان نرمی سایه
                          spreadRadius: 2.0, // میزان گستردگی
                          offset: const Offset(0, 4), // کمی به سمت پایین
                        ),
                      ],
                    ),
                  ),
                  // ================================================================
                  const SizedBox(height: 8),
                  Text(
                    category.name,
                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}// lib/features/home/presentation/widgets/home_header.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_state.dart';

class HomeHeader extends StatelessWidget {
  final VoidCallback onSearchTapped;
  const HomeHeader({Key? key, required this.onSearchTapped}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SliverAppBar(
      pinned: true,
      floating: true,
      expandedHeight: 180,
      backgroundColor: Colors.transparent,
      flexibleSpace: FlexibleSpaceBar(
        background: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Colors.orange.shade400, Colors.orange.shade100],
            ),
          ),
          child: SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Image.asset('assets/images/appLogo.png', height: 40),
                      const SizedBox(width: 8),
                      Text(
                        'PersiaMarkt',
                        style: GoogleFonts.inter(fontSize: 24, fontWeight: FontWeight.w900, color: Colors.white),
                      ),
                      const Spacer(),
                      BlocBuilder<LocationCubit, LocationState>(
                        builder: (context, state) {
                          String locationText = 'در حال دریافت موقعیت...';
                          if (state is LocationLoaded) {
                            locationText = state.address;
                          } else if (state is LocationError) {
                            locationText = 'موقعیت نامعلوم';
                          }
                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: [
                              const Text('موقعیت شما', style: TextStyle(color: Colors.white70, fontSize: 10)),
                              Text(locationText, style: const TextStyle(color: Colors.white, fontSize: 14)),
                            ],
                          );
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  GestureDetector(
                    onTap: onSearchTapped,
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                      decoration: BoxDecoration(
                        color: Theme.of(context).cardColor,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Row(
                        children: [
                          Icon(Icons.search, color: Colors.grey.shade500),
                          const SizedBox(width: 8),
                          Text('جستجوی نان، شیر، فروشگاه...', style: TextStyle(color: Colors.grey.shade500)),
                        ],
                      ),
                    ),
                  )
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}// lib/features/home/presentation/widgets/home_loading_shimmer.dart
import 'package:flutter/material.dart';
import 'package:persia_markt/core/widgets/loading_shimmer.dart';

class HomeLoadingShimmer extends StatelessWidget {
  const HomeLoadingShimmer({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      physics: const NeverScrollableScrollPhysics(),
      child: Column(
        children: [
          // Header Shimmer
          const ShimmerBox(width: double.infinity, height: 180, shape: RoundedRectangleBorder(borderRadius: BorderRadius.zero)),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 24),
                const ShimmerBox(width: 150, height: 24),
                const SizedBox(height: 16),
                SizedBox(
                  height: 120,
                  child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    itemCount: 5,
                    itemBuilder: (context, index) => const Padding(
                      padding: EdgeInsets.symmetric(horizontal: 8.0),
                      child: Column(
                        children: [
                          ShimmerBox(width: 80, height: 80, shape: CircleBorder()),
                          SizedBox(height: 8),
                          ShimmerBox(width: 60, height: 16),
                        ],
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                const ShimmerBox(width: 150, height: 24),
                const SizedBox(height: 16),
                const ShimmerBox(width: double.infinity, height: 150),
              ],
            ),
          ),
        ],
      ),
    );
  }
}// lib/features/home/presentation/widgets/section_divider.dart
import 'package:flutter/material.dart';

class SectionDivider extends StatelessWidget {
  final String title;
  const SectionDivider({Key? key, required this.title}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 24.0, horizontal: 16),
      child: Row(
        children: [
          Expanded(child: Divider(thickness: 0.5, color: Colors.grey.shade400)),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: Text(
              title,
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: Colors.grey.shade700,
                  ),
            ),
          ),
          Expanded(child: Divider(thickness: 0.5, color: Colors.grey.shade400)),
        ],
      ),
    );
  }
}// lib/features/home/presentation/widgets/stores_by_city_section.dart
import 'package:flutter/material.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/core/widgets/store_list_item_view.dart';

class StoresByCitySection extends StatelessWidget {
  final List<Store> stores;
  const StoresByCitySection({super.key, required this.stores});

  @override
  Widget build(BuildContext context) {
    // Group stores by city
    final Map<String, List<Store>> storesByCity = {};
    for (var store in stores) {
      storesByCity.putIfAbsent(store.city, () => []).add(store);
    }

    // Create a list of widgets from the grouped map
    return ListView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: storesByCity.keys.length,
      itemBuilder: (context, index) {
        final city = storesByCity.keys.elementAt(index);
        final cityStores = storesByCity[city]!;
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
              child: Text(city, style: Theme.of(context).textTheme.headlineSmall),
            ),
            ...cityStores.map((store) => StoreListItemView(store: store)).toList(),
          ],
        );
      },
    );
  }
}// lib/features/map/view/map_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:go_router/go_router.dart';
import 'package:latlong2/latlong.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_state.dart';

class MapView extends StatefulWidget {
  final String? lat;
  final String? lng;
  final String? focus;

  const MapView({super.key, this.lat, this.lng, this.focus});

  @override
  State<MapView> createState() => _MapViewState();
}

class _MapViewState extends State<MapView> {
  late final MapController _mapController;
  bool _hasFocused = false;

  @override
  void initState() {
    super.initState();
    _mapController = MapController();
  }

  @override
  void dispose() {
    _mapController.dispose();
    super.dispose();
  }

  void _tryFocusStore(List<Store> stores) {
    if (_hasFocused) return;
    if (widget.focus != null && widget.focus!.isNotEmpty) {
      final store = stores.firstWhere(
        (s) => s.storeID == widget.focus,
        orElse: () => Store.empty(),
      );
      if (store.storeID.isNotEmpty) {
        _mapController.move(LatLng(store.latitude, store.longitude), 17.0);
        _hasFocused = true;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    LatLng initialCenter = const LatLng(51.1657, 10.4515);
    double initialZoom = 6.0;

    if (widget.lat != null && widget.lng != null) {
      try {
        initialCenter = LatLng(double.parse(widget.lat!), double.parse(widget.lng!));
        initialZoom = 15.0;
      } catch (_) {}
    }

    return Scaffold(
      appBar: AppBar(title: const Text('نقشه فروشگاه‌ها')),
      body: BlocBuilder<MarketDataBloc, MarketDataState>(
        builder: (context, marketState) {
          if (marketState is! MarketDataLoaded) {
            return const Center(child: CircularProgressIndicator());
          }

          final stores = marketState.marketData.stores;

          WidgetsBinding.instance.addPostFrameCallback((_) {
            _tryFocusStore(stores);
          });

          return FlutterMap(
            mapController: _mapController,
            options: MapOptions(
              initialCenter: initialCenter,
              initialZoom: initialZoom,
            ),
            children: [
              TileLayer(
                urlTemplate: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                subdomains: const ['a', 'b', 'c'],
              ),
              _buildStoreMarkers(context, stores),
              _buildUserLocationMarker(context),
            ],
          );
        },
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          final locationState = context.read<LocationCubit>().state;
          if (locationState is LocationLoaded) {
            _mapController.move(
              LatLng(locationState.position.latitude, locationState.position.longitude),
              15.0,
            );
          }
        },
        label: const Text('موقعیت من'),
        icon: const Icon(Icons.my_location),
      ),
    );
  }

  MarkerLayer _buildStoreMarkers(BuildContext context, List<Store> stores) {
    return MarkerLayer(
      markers: stores.map((store) {
        return Marker(
          width: 120,
          height: 80,
          point: LatLng(store.latitude, store.longitude),
          child: GestureDetector(
            onTap: () => context.go('/store/${store.storeID}'),
            child: Column(
              children: [
                const Icon(Icons.location_on, color: Colors.red, size: 30),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                  decoration: BoxDecoration(
                    color: Colors.white.withAlpha(220),
                    borderRadius: BorderRadius.circular(8),
                    boxShadow: const [BoxShadow(color: Colors.black26, blurRadius: 4, offset: Offset(0, 2))],
                  ),
                  child: Text(
                    store.name,
                    style: const TextStyle(fontSize: 12, color: Colors.black, fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
          ),
        );
      }).toList(),
    );
  }

  Widget _buildUserLocationMarker(BuildContext context) {
    return BlocConsumer<LocationCubit, LocationState>(
      listener: (context, locationState) {
        if (locationState is LocationLoaded && widget.lat == null && widget.lng == null && widget.focus == null) {
          _mapController.move(
            LatLng(locationState.position.latitude, locationState.position.longitude),
            13.0,
          );
        }
      },
      builder: (context, locationState) {
        if (locationState is LocationLoaded) {
          return MarkerLayer(
            markers: [
              Marker(
                width: 80,
                height: 80,
                point: LatLng(locationState.position.latitude, locationState.position.longitude),
                child: Icon(Icons.my_location, color: Theme.of(context).primaryColor, size: 30),
              ),
            ],
          );
        }
        return const SizedBox.shrink();
      },
    );
  }
}
// lib/features/profile/presentation/cubit/favorites_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'favorites_state.dart';

/// Manages the state of the user's favorite products.
/// It uses SharedPreferences for persistence.
class FavoritesCubit extends Cubit<FavoritesState> {
  final SharedPreferences _sharedPreferences;
  static const _key = 'likedProducts';

  FavoritesCubit({required SharedPreferences sharedPreferences})
      : _sharedPreferences = sharedPreferences,
        super(const FavoritesState(productIds: []));

  /// Loads the list of liked product IDs from local storage.
  void loadLikedProducts() {
    final likedIds = _sharedPreferences.getStringList(_key) ?? [];
    emit(FavoritesState(productIds: likedIds));
  }

  /// Toggles the like status of a product and saves it to local storage.
  Future<void> toggleLike(String productId) async {
    final currentIds = List<String>.from(state.productIds);
    if (currentIds.contains(productId)) {
      currentIds.remove(productId);
    } else {
      currentIds.add(productId);
    }
    await _sharedPreferences.setStringList(_key, currentIds);
    emit(FavoritesState(productIds: currentIds));
  }
}// lib/features/profile/presentation/cubit/favorites_state.dart
import 'package:equatable/equatable.dart';

/// The state for the FavoritesCubit, containing the list of favorite product IDs.
class FavoritesState extends Equatable {
  final List<String> productIds;
  const FavoritesState({required this.productIds});

  @override
  List<Object> get props => [productIds];
}// lib/features/profile/presentation/view/favorites_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/widgets/product_list_item_view.dart';
// اصلاح شد: 'packagepackage:' به 'package:' تغییر یافت.
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_state.dart';

class FavoritesView extends StatelessWidget {
  const FavoritesView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('سبد خرید شما')),
      body: BlocBuilder<MarketDataBloc, MarketDataState>(
        builder: (context, marketState) {
          if (marketState is MarketDataLoaded) {
            return BlocBuilder<FavoritesCubit, FavoritesState>(
              builder: (context, favoritesState) {
                final favoriteProducts = marketState.marketData.products
                    .where((p) => favoritesState.productIds.contains(p.id))
                    .toList();
                
                if (favoriteProducts.isEmpty) {
                  return const Center(child: Text('سبد خرید شما خالی است.'));
                }

                // اصلاح شده: گروه‌بندی محصولات بر اساس فروشگاه
                final Map<String, List<Product>> productsByStore = {};
                for (var product in favoriteProducts) {
                  productsByStore.putIfAbsent(product.storeID, () => []).add(product);
                }
                
                final double grandTotal = favoriteProducts.fold(0, (sum, item) => sum + item.price);

                return Column(
                  children: [
                    // اصلاح شده: بنر تبلیغاتی
                    Container(
                      height: 100,
                      margin: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        image: const DecorationImage(
                          image: AssetImage('assets/images/banner4.png'),
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                    Expanded(
                      child: ListView.builder(
                        itemCount: productsByStore.keys.length,
                        itemBuilder: (context, index) {
                          final storeId = productsByStore.keys.elementAt(index);
                          final store = marketState.marketData.stores.firstWhere((s) => s.storeID == storeId);
                          final productsInStore = productsByStore[storeId]!;
                          final double storeSubtotal = productsInStore.fold(0, (sum, item) => sum + item.price);

                          return Card(
                            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Text(store.name, style: Theme.of(context).textTheme.titleLarge),
                                ),
                                const Divider(height: 1),
                                ...productsInStore.map((p) => ProductListItemView(product: p, store: store)),
                                // نمایش مجموع قیمت هر فروشگاه
                                Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Align(
                                    alignment: Alignment.centerLeft,
                                    child: Text(
                                      'جمع: €${storeSubtotal.toStringAsFixed(2)}',
                                      style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                    ),
                    // نمایش مجموع کل
                    Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Text(
                        'مجموع کل: €${grandTotal.toStringAsFixed(2)}',
                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold),
                      ),
                    ),
                    // اصلاح شده: کادر نهایی
                    Container(
                      width: double.infinity,
                      margin: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.green.shade50,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.green.shade300),
                      ),
                      child: const Text(
                        'به زودی قابلیت ارسال سفارش به این اپلیکیشن اضافه خواهد شد.',
                        textAlign: TextAlign.center,
                        style: TextStyle(color: Colors.black87),
                      ),
                    ),
                  ],
                );
              },
            );
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}// lib/features/profile/presentation/view/profile_view.dart
import 'package:flutter/material.dart';

class ProfileView extends StatelessWidget {
  const ProfileView({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('پروفایل من'),
      ),
      body: const Center(
        child: Text(
          'این صفحه به زودی با امکانات جدید کامل خواهد شد.',
          style: TextStyle(fontSize: 16),
        ),
      ),
    );
  }
}// lib/features/search/presentation/cubit/search_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart'; // اصلاح شده
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'search_state.dart';

/// Manages the business logic for the search feature.
class SearchCubit extends Cubit<SearchState> {
  SearchCubit() : super(SearchInitial());

  /// Performs a search based on a query against all products and stores.
  ///
  /// [query]: The search term entered by the user.
  /// [allProducts]: The complete list of products to filter.
  /// [allStores]: The complete list of stores to filter.
  void performSearch({
    required String query,
    required List<Product> allProducts,
    required List<Store> allStores,
  }) {
    if (query.isEmpty) {
      emit(SearchInitial());
      return;
    }

    emit(SearchLoading());

    // Normalize the query for case-insensitive search.
    final lowerCaseQuery = query.toLowerCase();

    // Filter products based on name and description.
    final productResults = allProducts
        .where((p) =>
            p.name.toLowerCase().contains(lowerCaseQuery) ||
            p.description.toLowerCase().contains(lowerCaseQuery))
        .toList();

    // Filter stores based on name, address, and city.
    final storeResults = allStores
        .where((s) =>
            s.name.toLowerCase().contains(lowerCaseQuery) ||
            s.address.toLowerCase().contains(lowerCaseQuery) ||
            s.city.toLowerCase().contains(lowerCaseQuery))
        .toList();

    emit(SearchLoaded(
      filteredProducts: productResults,
      filteredStores: storeResults,
      query: query,
    ));
  }

  /// Resets the search state to its initial value.
  void clearSearch() {
    emit(SearchInitial());
  }
}// lib/features/search/presentation/cubit/search_state.dart
import 'package:equatable/equatable.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';

/// Base class for all states related to the search feature.
abstract class SearchState extends Equatable {
  const SearchState();
  @override
  List<Object> get props => [];
}

/// The initial state before any search query is entered.
class SearchInitial extends SearchState {}

/// The state indicating that a search is in progress.
class SearchLoading extends SearchState {}

/// The state representing successfully loaded search results.
class SearchLoaded extends SearchState {
  final List<Product> filteredProducts;
  final List<Store> filteredStores;
  final String query;

  const SearchLoaded({
    required this.filteredProducts,
    required this.filteredStores,
    required this.query,
  });

  @override
  List<Object> get props => [filteredProducts, filteredStores, query];
}// lib/features/search/presentation/view/search_view.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/widgets/product_list_item_view.dart';
import 'package:persia_markt/core/widgets/store_list_item_view.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_cubit.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_state.dart';

class SearchView extends StatefulWidget {
  const SearchView({super.key});

  @override
  State<SearchView> createState() => _SearchViewState();
}

class _SearchViewState extends State<SearchView> with SingleTickerProviderStateMixin {
  late final TextEditingController _searchController;
  late final TabController _tabController;
  Timer? _debounce;

  @override
  void initState() {
    super.initState();
    context.read<SearchCubit>().clearSearch();
    _searchController = TextEditingController();
    _tabController = TabController(length: 2, vsync: this);
    _searchController.addListener(() => setState(() {}));
  }

  @override
  void dispose() {
    _searchController.dispose();
    _tabController.dispose();
    _debounce?.cancel();
    super.dispose();
  }

  void _onSearchChanged(String query) {
    if (_debounce?.isActive ?? false) _debounce?.cancel();
    _debounce = Timer(const Duration(milliseconds: 400), () {
      final marketState = context.read<MarketDataBloc>().state;
      if (marketState is MarketDataLoaded) {
        context.read<SearchCubit>().performSearch(
              query: query,
              allProducts: marketState.marketData.products,
              allStores: marketState.marketData.stores,
            );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final marketState = context.watch<MarketDataBloc>().state;

    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        appBar: AppBar(
          automaticallyImplyLeading: false,
          titleSpacing: 0,
          title: TextField(
            controller: _searchController,
            autofocus: true,
            decoration: InputDecoration(
              hintText: 'جستجوی محصول یا فروشگاه...',
              border: InputBorder.none,
              suffixIcon: _searchController.text.isNotEmpty
                  ? IconButton(
                      icon: const Icon(Icons.clear),
                      onPressed: () {
                        _searchController.clear();
                        context.read<SearchCubit>().clearSearch();
                      },
                    )
                  : null,
            ),
            onChanged: _onSearchChanged,
          ),
          actions: [
            TextButton(
              onPressed: () {
                if (context.canPop()) {
                  context.pop();
                } else {
                  context.go('/'); // مسیر صفحه اصلی
                }
              },
              child: const Text(
                'انصراف',
                style: TextStyle(
                  fontSize: 16,
                ),
              ),
            ),
          ],
        ),
        body: BlocBuilder<SearchCubit, SearchState>(
          builder: (context, searchState) {
            if (searchState is SearchInitial) {
              return const Center(child: Text('لطفاً عبارت مورد نظر را وارد کنید.'));
            }
            if (searchState is SearchLoading) {
              return const Center(child: CircularProgressIndicator());
            }
            if (searchState is SearchLoaded) {
              if (searchState.filteredProducts.isEmpty && searchState.filteredStores.isEmpty) {
                return const Center(child: Text('نتیجه‌ای یافت نشد.'));
              }
              
              final Map<String, List<Product>> groupedProducts = {};
              for (var product in searchState.filteredProducts) {
                groupedProducts.putIfAbsent(product.storeID, () => []).add(product);
              }
              final storeIds = groupedProducts.keys.toList();

              return Column(
                children: [
                  TabBar(
                    controller: _tabController,
                    tabs: [
                      Tab(text: 'محصولات (${searchState.filteredProducts.length})'),
                      Tab(text: 'فروشگاه‌ها (${searchState.filteredStores.length})'),
                    ],
                  ),
                  Expanded(
                    child: TabBarView(
                      controller: _tabController,
                      children: [
                        ListView.builder(
                          itemCount: storeIds.length,
                          itemBuilder: (context, index) {
                            if (marketState is! MarketDataLoaded) return const SizedBox.shrink();
                            
                            final storeId = storeIds[index];
                            final productsInStore = groupedProducts[storeId]!;
                            final store = marketState.marketData.stores
                                .firstWhere((s) => s.storeID == storeId);

                            return Card(
                              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.all(12.0),
                                    child: Text(store.name, style: Theme.of(context).textTheme.titleLarge),
                                  ),
                                  const Divider(height: 1, indent: 12, endIndent: 12),
                                  ListView.builder(
                                    shrinkWrap: true,
                                    physics: const NeverScrollableScrollPhysics(),
                                    itemCount: productsInStore.length,
                                    itemBuilder: (context, productIndex) {
                                      final product = productsInStore[productIndex];
                                      return ProductListItemView(product: product, store: store);
                                    },
                                  ),
                                ],
                              ),
                            );
                          },
                        ),
                        ListView.builder(
                          itemCount: searchState.filteredStores.length,
                          itemBuilder: (context, index) {
                            final store = searchState.filteredStores[index];
                            return StoreListItemView(store: store);
                          },
                        ),
                      ],
                    ),
                  ),
                ],
              );
            }
            return const SizedBox.shrink();
          },
        ),
      ),
    );
  }
}
// lib/features/store/presentation/view/store_detail_view.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:persia_markt/core/models/category_item.dart';
import 'package:persia_markt/core/models/product.dart';
import 'package:persia_markt/core/models/store.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_state.dart';

class StoreDetailView extends StatefulWidget {
  final String storeId;
  final String? initialProductId;

  const StoreDetailView({
    super.key,
    required this.storeId,
    this.initialProductId,
  });

  @override
  State<StoreDetailView> createState() => _StoreDetailViewState();
}

class _StoreDetailViewState extends State<StoreDetailView> {
  final Map<String, GlobalKey> _categoryKeys = {};
  final ScrollController _pageScrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _pageScrollController.jumpTo(0.0);
      if (widget.initialProductId != null) {
        _scrollToInitialProduct();
      }
    });
  }

  @override
  void dispose() {
    _pageScrollController.dispose();
    super.dispose();
  }

  void _scrollToCategory(String categoryId) {
    final key = _categoryKeys[categoryId];
    if (key != null && key.currentContext != null) {
      Scrollable.ensureVisible(
        key.currentContext!,
        duration: const Duration(milliseconds: 400),
        curve: Curves.easeInOut,
        alignment: 0.1, // قرارگیری کمی پایین‌تر از هدر
      );
    }
  }

  void _scrollToInitialProduct() {
    final marketState = context.read<MarketDataBloc>().state;
    if (marketState is MarketDataLoaded) {
      final products = marketState.marketData.products
          .where((p) => p.id == widget.initialProductId)
          .toList();
      if (products.isNotEmpty) {
        _scrollToCategory(products.first.categoryID);
      }
    }
  }

  void _showImageDialog(BuildContext context, String imageUrl) {
    showDialog(
      context: context,
      barrierColor: Colors.transparent,
      builder: (BuildContext context) {
        return GestureDetector(
          onTap: () => Navigator.of(context).pop(),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 5.0, sigmaY: 5.0),
            child: Container(
              // رفع هشدار withOpacity → withValues
              color: Colors.black.withValues(alpha: 0.5),
              child: Center(
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: InteractiveViewer(
                    child: Image.network(
                      imageUrl,
                      errorBuilder: (_, __, ___) =>
                          const Icon(Icons.broken_image, color: Colors.white, size: 48),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MarketDataBloc, MarketDataState>(
      builder: (context, state) {
        if (state is MarketDataLoaded) {
          final store = state.marketData.stores.firstWhere((s) => s.storeID == widget.storeId);
          final storeProducts = state.marketData.products
              .where((p) => p.storeID == store.storeID)
              .toList();
          final categoriesInStore = state.marketData.categories
              .where((c) => storeProducts.any((p) => p.categoryID == c.categoryID))
              .toList();

          // ساخت key برای هر دسته‌بندی در صورت عدم وجود
          for (var category in categoriesInStore) {
            _categoryKeys.putIfAbsent(category.categoryID, () => GlobalKey());
          }

          return Directionality(
            textDirection: TextDirection.rtl,
            child: Scaffold(
              body: CustomScrollView(
                controller: _pageScrollController,
                slivers: [
                  _buildSliverAppBar(context, store),
                  _buildStoreDetailsSliver(context, store),
                  _buildCategoryHeader(context, categoriesInStore),
                  ..._buildProductSlivers(categoriesInStore, storeProducts, store),
                ],
              ),
            ),
          );
        }
        return const Scaffold(body: Center(child: CircularProgressIndicator()));
      },
    );
  }

  SliverAppBar _buildSliverAppBar(BuildContext context, Store store) {
    return SliverAppBar(
      expandedHeight: 220.0,
      pinned: true,
      flexibleSpace: FlexibleSpaceBar(
        title: Text(store.name, style: const TextStyle(fontSize: 16.0)),
        background: Image.network(
          store.storeImage,
          fit: BoxFit.cover,
          errorBuilder: (_, __, ___) =>
              Image.asset('assets/images/supermarket.png', fit: BoxFit.cover),
        ),
      ),
    );
  }

  Widget _buildStoreDetailsSliver(BuildContext context, Store store) {
    return SliverToBoxAdapter(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              store.name,
              style: Theme.of(context)
                  .textTheme
                  .headlineMedium
                  ?.copyWith(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Icon(Icons.location_on_outlined, size: 16, color: Colors.grey.shade700),
                const SizedBox(width: 4),
                Expanded(child: Text(store.address, style: const TextStyle(fontSize: 16))),
                IconButton(
                  icon: Icon(Icons.map_outlined, color: Theme.of(context).colorScheme.primary),
                  tooltip: 'نمایش در نقشه',
                  onPressed: () {
                    // چون در مدل Store فیلد location نداریم، فقط فوکِس روی فروشگاه
                    context.go('/map?focus=${store.storeID}');
                  },
                ),
              ],
            ),
            Row(
              children: [
                Icon(Icons.star_border, size: 16, color: Colors.grey.shade700),
                const SizedBox(width: 4),
                Text('امتیاز: ${store.rating}', style: const TextStyle(fontSize: 16)),
              ],
            ),
          ],
        ),
      ),
    );
  }

  SliverPersistentHeader _buildCategoryHeader(
      BuildContext context, List<CategoryItem> categories) {
    return SliverPersistentHeader(
      pinned: true,
      delegate: _SliverAppBarDelegate(
        minHeight: 60.0,
        maxHeight: 60.0,
        child: Container(
          color: Theme.of(context).scaffoldBackgroundColor.withAlpha(240),
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: categories.length,
            padding: const EdgeInsets.symmetric(horizontal: 12),
            itemBuilder: (context, index) => Padding(
              padding: const EdgeInsets.symmetric(horizontal: 4.0, vertical: 10),
              child: ElevatedButton(
                onPressed: () => _scrollToCategory(categories[index].categoryID),
                child: Text(categories[index].name),
              ),
            ),
          ),
        ),
      ),
    );
  }

  List<Widget> _buildProductSlivers(
      List<CategoryItem> categories, List<Product> allProducts, Store store) {
    return categories.map((category) {
      final productsInCategory =
          allProducts.where((p) => p.categoryID == category.categoryID).toList();

      return SliverList(
        delegate: SliverChildListDelegate([
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 24, 16, 8),
            child: Text(
              category.name,
              key: _categoryKeys[category.categoryID],
              style: Theme.of(context).textTheme.headlineSmall,
            ),
          ),
          const Divider(indent: 16, endIndent: 16, height: 1),
          ...productsInCategory.map(
            (product) => ListTile(
              leading: GestureDetector(
                onTap: () => _showImageDialog(context, product.imageURL),
                child: Image.network(
                  product.imageURL,
                  width: 50,
                  height: 50,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => const Icon(Icons.broken_image),
                ),
              ),
              title: Text(product.name),
              subtitle: Text('${product.price} تومان'),
            ),
          ),
        ]),
      );
    }).toList();
  }
}

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  final double minHeight;
  final double maxHeight;
  final Widget child;

  _SliverAppBarDelegate({
    required this.minHeight,
    required this.maxHeight,
    required this.child,
  });

  @override
  double get minExtent => minHeight;

  @override
  double get maxExtent => maxHeight;

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    return SizedBox.expand(child: child);
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate old) =>
      maxHeight != old.maxHeight ||
      minHeight != old.minHeight ||
      child != old.child;
}
// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:persia_markt/core/config/app_router.dart';
import 'package:persia_markt/core/config/service_locator.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_bloc.dart';
import 'package:persia_markt/features/home/presentation/bloc/market_data_event.dart';
import 'package:persia_markt/features/home/presentation/cubit/location_cubit.dart';
import 'package:persia_markt/features/profile/presentation/cubit/favorites_cubit.dart';
import 'package:persia_markt/features/search/presentation/cubit/search_cubit.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await setupServiceLocator();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => sl<MarketDataBloc>()..add(FetchMarketDataEvent()),
        ),
        BlocProvider(
          create: (_) => sl<LocationCubit>()..fetchLocation(),
        ),
        BlocProvider(
          create: (_) => sl<FavoritesCubit>()..loadLikedProducts(),
        ),
        BlocProvider(
          create: (_) => sl<SearchCubit>(),
        ),
      ],
      child: MaterialApp.router(
        title: 'PersiaMarkt',
        debugShowCheckedModeBanner: false,
        routerConfig: AppRouter.router,
        localizationsDelegates: const [
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        supportedLocales: const [
          Locale('fa', 'IR'),
          Locale('en', ''),
        ],
        locale: const Locale('fa', 'IR'),
        theme: _buildTheme(Brightness.light),
        darkTheme: _buildTheme(Brightness.dark),
        themeMode: ThemeMode.system,
      ),
    );
  }

  ThemeData _buildTheme(Brightness brightness) {
    final colorScheme = ColorScheme.fromSeed(
      seedColor: const Color(0xFFF57C00),
      brightness: brightness,
      primary: const Color(0xFFF57C00),
      secondary: const Color(0xFFFF9800),
      background: brightness == Brightness.light
          ? const Color(0xFFF5F5F5)
          : const Color(0xFF121212),
      surface: brightness == Brightness.light
          ? Colors.white
          : const Color(0xFF1E1E1E),
      onSurface:
          brightness == Brightness.light ? Colors.black87 : Colors.white,
      outline: brightness == Brightness.light
          ? Colors.grey.shade300
          : Colors.grey.shade700,
    );

    var baseTheme = ThemeData(
      useMaterial3: true,
      brightness: brightness,
      colorScheme: colorScheme,
    );

    return baseTheme.copyWith(
      scaffoldBackgroundColor: colorScheme.background,
      appBarTheme: AppBarTheme(
        backgroundColor: colorScheme.surface,
        elevation: 0,
        iconTheme: IconThemeData(color: colorScheme.onSurface),
        titleTextStyle: GoogleFonts.lalezar(
          color: colorScheme.onSurface,
          fontSize: 22,
        ),
      ),
      textTheme: GoogleFonts.vazirmatnTextTheme(baseTheme.textTheme).copyWith(
        headlineMedium: GoogleFonts.vazirmatn(
            fontWeight: FontWeight.bold, color: colorScheme.onSurface),
        titleLarge: GoogleFonts.vazirmatn(
            fontWeight: FontWeight.bold, color: colorScheme.onSurface),
        bodyMedium:
            GoogleFonts.vazirmatn(fontSize: 15, color: colorScheme.onSurface),
        labelLarge: GoogleFonts.vazirmatn(fontWeight: FontWeight.bold),
      ).apply(
        bodyColor: colorScheme.onSurface,
        displayColor: colorScheme.onSurface,
      ),
      cardTheme: CardThemeData(
        elevation: 0,
        shape: RoundedRectangleBorder(
          borderRadius: const BorderRadius.all(Radius.circular(16)),
          side: BorderSide(
            color: colorScheme.outline.withOpacity(0.5),
            width: 1,
          ),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 0.5,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          backgroundColor: colorScheme.primary,
          foregroundColor: colorScheme.onPrimary,
          padding:
              const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: colorScheme.surface,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        hintStyle: TextStyle(color: Colors.grey.shade500),
      ),
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        backgroundColor: colorScheme.surface,
        selectedItemColor: colorScheme.primary,
        unselectedItemColor: Colors.grey,
        elevation: 5,
      ),
    );
  }
}
















,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,






# Flutter/Dart
*.g.dart
*.freezed.dart
*.mocks.dart
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.packages
.pub-cache/
.pub/
build/
ios/.generated/

# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  _fe_analyzer_shared:
    dependency: transitive
    description:
      name: _fe_analyzer_shared
      sha256: da0d9209ca76bde579f2da330aeb9df62b6319c834fa7baae052021b0462401f
      url: "https://pub.dev"
    source: hosted
    version: "85.0.0"
  analyzer:
    dependency: transitive
    description:
      name: analyzer
      sha256: "974859dc0ff5f37bc4313244b3218c791810d03ab3470a579580279ba971a48d"
      url: "https://pub.dev"
    source: hosted
    version: "7.7.1"
  args:
    dependency: transitive
    description:
      name: args
      sha256: d0481093c50b1da8910eb0bb301626d4d8eb7284aa739614d2b394ee09e3ea04
      url: "https://pub.dev"
    source: hosted
    version: "2.7.0"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "758e6d74e971c3e5aceb4110bfd6698efc7f501675bcfe0c775459a8140750eb"
      url: "https://pub.dev"
    source: hosted
    version: "2.13.0"
  bloc:
    dependency: transitive
    description:
      name: bloc
      sha256: "106842ad6569f0b60297619e9e0b1885c2fb9bf84812935490e6c5275777804e"
      url: "https://pub.dev"
    source: hosted
    version: "8.1.4"
  bloc_test:
    dependency: "direct dev"
    description:
      name: bloc_test
      sha256: "165a6ec950d9252ebe36dc5335f2e6eb13055f33d56db0eeb7642768849b43d2"
      url: "https://pub.dev"
    source: hosted
    version: "9.1.7"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "8aab1771e1243a5063b8b0ff68042d67334e3feab9e95b9490f9a6ebf73b42ea"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: f71061c654a3380576a52b451dd5532377954cf9dbd272a78fc8479606670803
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  cli_config:
    dependency: transitive
    description:
      name: cli_config
      sha256: ac20a183a07002b700f0c25e61b7ee46b23c309d76ab7b7640a028f18e4d99ec
      url: "https://pub.dev"
    source: hosted
    version: "0.2.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: fddb70d9b5277016c77a80201021d40a2247104d9f4aa7bab7157b7e3f05b84b
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: "2f5709ae4d3d59dd8f7cd309b4e023046b57d8a6c82130785d2b0e5868084e76"
      url: "https://pub.dev"
    source: hosted
    version: "1.19.1"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: b30acd5944035672bc15c6b7a8b47d773e41e2f17de064350988c5d02adb1c68
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  coverage:
    dependency: transitive
    description:
      name: coverage
      sha256: "5da775aa218eaf2151c721b16c01c7676fbfdd99cebba2bf64e8b807a28ff94d"
      url: "https://pub.dev"
    source: hosted
    version: "1.15.0"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: "1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.6"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  dart_earcut:
    dependency: transitive
    description:
      name: dart_earcut
      sha256: e485001bfc05dcbc437d7bfb666316182e3522d4c3f9668048e004d0eb2ce43b
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  diff_match_patch:
    dependency: transitive
    description:
      name: diff_match_patch
      sha256: "2efc9e6e8f449d0abe15be240e2c2a3bcd977c8d126cfd70598aee60af35c0a4"
      url: "https://pub.dev"
    source: hosted
    version: "0.4.1"
  equatable:
    dependency: "direct main"
    description:
      name: equatable
      sha256: "567c64b3cb4cf82397aac55f4f0cbd3ca20d77c6c03bedbc4ceaddc08904aef7"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.7"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "5368f224a74523e8d2e7399ea1638b37aecfca824a3cc4dfdf77bf1fa905ac44"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.3"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "289279317b4b16eb2bb7e271abccd4bf84ec9bdcbe999e278a94b804f5630418"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: b6dc7065e46c974bc7c5f143080a6764ec7a4be6da1285ececdc37be96de53be
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_bloc:
    dependency: "direct main"
    description:
      name: flutter_bloc
      sha256: b594505eac31a0518bdcb4b5b79573b8d9117b193cc80cc12e17d639b10aa27a
      url: "https://pub.dev"
    source: hosted
    version: "8.1.6"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "9e8c3858111da373efc5aa341de011d9bd23e2c5c5e0c62bccf32438e192d7b1"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  flutter_localizations:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_map:
    dependency: "direct main"
    description:
      name: flutter_map
      sha256: "2ecb34619a4be19df6f40c2f8dce1591675b4eff7a6857bd8f533706977385da"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.2"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  fpdart:
    dependency: "direct main"
    description:
      name: fpdart
      sha256: "1b84ce64453974159f08046f5d05592020d1fcb2099d7fe6ec58da0e7337af77"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  frontend_server_client:
    dependency: transitive
    description:
      name: frontend_server_client
      sha256: f64a0333a82f30b0cca061bc3d143813a486dc086b574bfb233b7c1372427694
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  geocoding:
    dependency: "direct main"
    description:
      name: geocoding
      sha256: d580c801cba9386b4fac5047c4c785a4e19554f46be42f4f5e5b7deacd088a66
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  geocoding_android:
    dependency: transitive
    description:
      name: geocoding_android
      sha256: "1b13eca79b11c497c434678fed109c2be020b158cec7512c848c102bc7232603"
      url: "https://pub.dev"
    source: hosted
    version: "3.3.1"
  geocoding_ios:
    dependency: transitive
    description:
      name: geocoding_ios
      sha256: "18ab1c8369e2b0dcb3a8ccc907319334f35ee8cf4cfef4d9c8e23b13c65cb825"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0"
  geocoding_platform_interface:
    dependency: transitive
    description:
      name: geocoding_platform_interface
      sha256: "8c2c8226e5c276594c2e18bfe88b19110ed770aeb7c1ab50ede570be8b92229b"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.0"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: "149876cc5207a0f5daf4fdd3bfcf0a0f27258b3fe95108fa084f527ad0568f1b"
      url: "https://pub.dev"
    source: hosted
    version: "12.0.0"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: fcb1760a50d7500deca37c9a666785c047139b5f9ee15aa5469fae7dbbe3170d
      url: "https://pub.dev"
    source: hosted
    version: "4.6.2"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: dbdd8789d5aaf14cf69f74d4925ad1336b4433a6efdf2fce91e8955dc921bf22
      url: "https://pub.dev"
    source: hosted
    version: "2.3.13"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "30cb64f0b9adcc0fb36f628b4ebf4f731a2961a0ebd849f4b56200205056fe67"
      url: "https://pub.dev"
    source: hosted
    version: "4.2.6"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: b1ae9bdfd90f861fde8fd4f209c37b953d65e92823cb73c7dee1fa021b06f172
      url: "https://pub.dev"
    source: hosted
    version: "4.1.3"
  geolocator_windows:
    dependency: transitive
    description:
      name: geolocator_windows
      sha256: "175435404d20278ffd220de83c2ca293b73db95eafbdc8131fe8609be1421eb6"
      url: "https://pub.dev"
    source: hosted
    version: "0.2.5"
  get_it:
    dependency: "direct main"
    description:
      name: get_it
      sha256: d85128a5dae4ea777324730dc65edd9c9f43155c109d5cc0a69cab74139fbac1
      url: "https://pub.dev"
    source: hosted
    version: "7.7.0"
  glob:
    dependency: transitive
    description:
      name: glob
      sha256: c3f1ee72c96f8f78935e18aa8cecced9ab132419e8625dc187e1c2408efc20de
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  go_router:
    dependency: "direct main"
    description:
      name: go_router
      sha256: f02fd7d2a4dc512fec615529824fdd217fecb3a3d3de68360293a551f21634b3
      url: "https://pub.dev"
    source: hosted
    version: "14.8.1"
  google_fonts:
    dependency: "direct main"
    description:
      name: google_fonts
      sha256: df9763500dadba0155373e9cb44e202ce21bd9ed5de6bdbd05c5854e86839cb8
      url: "https://pub.dev"
    source: hosted
    version: "6.3.0"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: "2c11f3f94c687ee9bad77c171151672986360b2b001d109814ee7140b2cf261b"
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  http_multi_server:
    dependency: transitive
    description:
      name: http_multi_server
      sha256: aa6199f908078bb1c5efb8d8638d4ae191aac11b311132c3ef48ce352fb52ef8
      url: "https://pub.dev"
    source: hosted
    version: "3.2.2"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "178d74305e7866013777bab2c3d8726205dc5a4dd935297175b19a23a2e66571"
      url: "https://pub.dev"
    source: hosted
    version: "4.1.2"
  intl:
    dependency: transitive
    description:
      name: intl
      sha256: "3df61194eb431efc39c4ceba583b95633a403f46c9fd341e550ce0bfa50e9aa5"
      url: "https://pub.dev"
    source: hosted
    version: "0.20.2"
  io:
    dependency: transitive
    description:
      name: io
      sha256: dfd5a80599cf0165756e3181807ed3e77daf6dd4137caaad72d0b7931597650b
      url: "https://pub.dev"
    source: hosted
    version: "1.0.5"
  js:
    dependency: transitive
    description:
      name: js
      sha256: "53385261521cc4a0c4658fd0ad07a7d14591cf8fc33abbceae306ddb974888dc"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.2"
  latlong2:
    dependency: "direct main"
    description:
      name: latlong2
      sha256: "98227922caf49e6056f91b6c56945ea1c7b166f28ffcd5fb8e72fc0b453cc8fe"
      url: "https://pub.dev"
    source: hosted
    version: "0.9.1"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "6bb818ecbdffe216e81182c2f0714a2e62b593f4a4f13098713ff1685dfb6ab0"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.9"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: f8b613e7e6a13ec79cfdc0e97638fddb3ab848452eff057653abd3edba760573
      url: "https://pub.dev"
    source: hosted
    version: "3.0.9"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: cbf8d4b858bb0134ef3ef87841abdf8d63bfc255c266b7bf6b39daa1085c4290
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  lists:
    dependency: transitive
    description:
      name: lists
      sha256: "4ca5c19ae4350de036a7e996cdd1ee39c93ac0a2b840f4915459b7d0a7d4ab27"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  logger:
    dependency: transitive
    description:
      name: logger
      sha256: "55d6c23a6c15db14920e037fe7e0dc32e7cdaf3b64b4b25df2d541b5b6b81c0c"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
  logging:
    dependency: transitive
    description:
      name: logging
      sha256: c8245ada5f1717ed44271ed1c26b8ce85ca3228fd2ffdb75468ab01979309d61
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: dc58c723c3c24bf8d3e2d3ad3f2f9d7bd9cf43ec6feaa64181775e60190153f2
      url: "https://pub.dev"
    source: hosted
    version: "0.12.17"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: e3641ec5d63ebf0d9b41bd43201a66e3fc79a65db5f61fc181f04cd27aab950c
      url: "https://pub.dev"
    source: hosted
    version: "1.16.0"
  mgrs_dart:
    dependency: transitive
    description:
      name: mgrs_dart
      sha256: fb89ae62f05fa0bb90f70c31fc870bcbcfd516c843fb554452ab3396f78586f7
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  mime:
    dependency: transitive
    description:
      name: mime
      sha256: "41a20518f0cb1256669420fdba0cd90d21561e560ac240f26ef8322e45bb7ed6"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  mocktail:
    dependency: "direct dev"
    description:
      name: mocktail
      sha256: "890df3f9688106f25755f26b1c60589a92b3ab91a22b8b224947ad041bf172d8"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.4"
  nested:
    dependency: transitive
    description:
      name: nested
      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  node_preamble:
    dependency: transitive
    description:
      name: node_preamble
      sha256: "6e7eac89047ab8a8d26cf16127b5ed26de65209847630400f9aefd7cd5c730db"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.2"
  package_config:
    dependency: transitive
    description:
      name: package_config
      sha256: f096c55ebb7deb7e384101542bfba8c52696c1b56fca2eb62827989ef2353bbc
      url: "https://pub.dev"
    source: hosted
    version: "2.2.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "75cca69d1490965be98c73ceaea117e8a04dd21217b37b292c9ddbec0d955bc5"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.1"
  path_provider:
    dependency: transitive
    description:
      name: path_provider
      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: d0d310befe2c8ab9e7f393288ccbb11b60c019c6b5afc21973eeee4dda2b35e9
      url: "https://pub.dev"
    source: hosted
    version: "2.2.17"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: "4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.6"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  polylabel:
    dependency: transitive
    description:
      name: polylabel
      sha256: "41b9099afb2aa6c1730bdd8a0fab1400d287694ec7615dd8516935fa3144214b"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  pool:
    dependency: transitive
    description:
      name: pool
      sha256: "20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.1"
  proj4dart:
    dependency: transitive
    description:
      name: proj4dart
      sha256: c8a659ac9b6864aa47c171e78d41bbe6f5e1d7bd790a5814249e6b68bc44324e
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  provider:
    dependency: transitive
    description:
      name: provider
      sha256: "4abbd070a04e9ddc287673bf5a030c7ca8b685ff70218720abab8b092f53dd84"
      url: "https://pub.dev"
    source: hosted
    version: "6.1.5"
  pub_semver:
    dependency: transitive
    description:
      name: pub_semver
      sha256: "5bfcf68ca79ef689f8990d1160781b4bad40a3bd5e5218ad4076ddb7f4081585"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.0"
  scrollable_positioned_list:
    dependency: "direct main"
    description:
      name: scrollable_positioned_list
      sha256: "1b54d5f1329a1e263269abc9e2543d90806131aa14fe7c6062a8054d57249287"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.8"
  shared_preferences:
    dependency: "direct main"
    description:
      name: shared_preferences
      sha256: "6e8bf70b7fef813df4e9a36f658ac46d107db4b4cfe1048b477d4e453a8159f5"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  shared_preferences_android:
    dependency: transitive
    description:
      name: shared_preferences_android
      sha256: "20cbd561f743a342c76c151d6ddb93a9ce6005751e7aa458baad3858bfbfb6ac"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.10"
  shared_preferences_foundation:
    dependency: transitive
    description:
      name: shared_preferences_foundation
      sha256: "6a52cfcdaeac77cad8c97b539ff688ccfc458c007b4db12be584fbe5c0e49e03"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.4"
  shared_preferences_linux:
    dependency: transitive
    description:
      name: shared_preferences_linux
      sha256: "580abfd40f415611503cae30adf626e6656dfb2f0cee8f465ece7b6defb40f2f"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_platform_interface:
    dependency: transitive
    description:
      name: shared_preferences_platform_interface
      sha256: "57cbf196c486bc2cf1f02b85784932c6094376284b3ad5779d1b1c6c6a816b80"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_web:
    dependency: transitive
    description:
      name: shared_preferences_web
      sha256: c49bd060261c9a3f0ff445892695d6212ff603ef3115edbb448509d407600019
      url: "https://pub.dev"
    source: hosted
    version: "2.4.3"
  shared_preferences_windows:
    dependency: transitive
    description:
      name: shared_preferences_windows
      sha256: "94ef0f72b2d71bc3e700e025db3710911bd51a71cefb65cc609dd0d9a982e3c1"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shelf:
    dependency: transitive
    description:
      name: shelf
      sha256: e7dd780a7ffb623c57850b33f43309312fc863fb6aa3d276a754bb299839ef12
      url: "https://pub.dev"
    source: hosted
    version: "1.4.2"
  shelf_packages_handler:
    dependency: transitive
    description:
      name: shelf_packages_handler
      sha256: "89f967eca29607c933ba9571d838be31d67f53f6e4ee15147d5dc2934fee1b1e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  shelf_static:
    dependency: transitive
    description:
      name: shelf_static
      sha256: c87c3875f91262785dade62d135760c2c69cb217ac759485334c5857ad89f6e3
      url: "https://pub.dev"
    source: hosted
    version: "1.1.3"
  shelf_web_socket:
    dependency: transitive
    description:
      name: shelf_web_socket
      sha256: "3632775c8e90d6c9712f883e633716432a27758216dfb61bd86a8321c0580925"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  shimmer:
    dependency: "direct main"
    description:
      name: shimmer
      sha256: "5f88c883a22e9f9f299e5ba0e4f7e6054857224976a5d9f839d4ebdc94a14ac9"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  source_map_stack_trace:
    dependency: transitive
    description:
      name: source_map_stack_trace
      sha256: c0713a43e323c3302c2abe2a1cc89aa057a387101ebd280371d6a6c9fa68516b
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  source_maps:
    dependency: transitive
    description:
      name: source_maps
      sha256: "190222579a448b03896e0ca6eca5998fa810fda630c1d65e2f78b3f638f54812"
      url: "https://pub.dev"
    source: hosted
    version: "0.10.13"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "254ee5351d6cb365c859e20ee823c3bb479bf4a293c22d17a9f1bf144ce86f7c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.1"
  sprintf:
    dependency: transitive
    description:
      name: sprintf
      sha256: "1fc9ffe69d4df602376b52949af107d8f5703b77cda567c4d7d86a0693120f23"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "8b27215b45d22309b5cddda1aa2b19bdfec9df0e765f2de506401c071d38d1b1"
      url: "https://pub.dev"
    source: hosted
    version: "1.12.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: "969e04c80b8bcdf826f8f16579c7b14d780458bd97f56d107d3950fdbeef059d"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "921cd31725b72fe181906c6a94d987c78e3b98c2e205b397ea399d4054872b43"
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: "7f554798625ea768a7518313e58f83891c7f5024f88e46e7182a4558850a4b8e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  test:
    dependency: transitive
    description:
      name: test
      sha256: "301b213cd241ca982e9ba50266bd3f5bd1ea33f1455554c5abb85d1be0e2d87e"
      url: "https://pub.dev"
    source: hosted
    version: "1.25.15"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: fb31f383e2ee25fbbfe06b40fe21e1e458d14080e3c67e7ba0acfde4df4e0bbd
      url: "https://pub.dev"
    source: hosted
    version: "0.7.4"
  test_core:
    dependency: transitive
    description:
      name: test_core
      sha256: "84d17c3486c8dfdbe5e12a50c8ae176d15e2a771b96909a9442b40173649ccaa"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.8"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: f9049c039ebfeb4cf7a7104a675823cd72dba8297f264b6637062516699fa006
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  unicode:
    dependency: transitive
    description:
      name: unicode
      sha256: "0f69e46593d65245774d4f17125c6084d2c20b4e473a983f6e21b7d7762218f1"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.1"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: a5be9ef6618a7ac1e964353ef476418026db906c4facdedaa299b7a2e71690ff
      url: "https://pub.dev"
    source: hosted
    version: "4.5.1"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: ddfa8d30d89985b96407efce8acbdd124701f96741f2d981ca860662f1c0dc02
      url: "https://pub.dev"
    source: hosted
    version: "15.0.0"
  watcher:
    dependency: transitive
    description:
      name: watcher
      sha256: "0b7fd4a0bbc4b92641dbf20adfd7e3fd1398fe17102d94b674234563e110088a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  web:
    dependency: transitive
    description:
      name: web
      sha256: "868d88a33d8a87b18ffc05f9f030ba328ffefba92d6c127917a2ba740f9cfe4a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  web_socket:
    dependency: transitive
    description:
      name: web_socket
      sha256: "34d64019aa8e36bf9842ac014bb5d2f5586ca73df5e4d9bf5c936975cae6982c"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  web_socket_channel:
    dependency: transitive
    description:
      name: web_socket_channel
      sha256: d645757fb0f4773d602444000a8131ff5d48c9e47adfe9772652dd1a4f2d45c8
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  webkit_inspection_protocol:
    dependency: transitive
    description:
      name: webkit_inspection_protocol
      sha256: "87d3f2333bb240704cd3f1c6b5b7acd8a10e7f0bc28c28dcf14e782014f4a572"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  wkt_parser:
    dependency: transitive
    description:
      name: wkt_parser
      sha256: "8a555fc60de3116c00aad67891bcab20f81a958e4219cc106e3c037aa3937f13"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: b9da305ac7c39faa3f030eccd175340f968459dae4af175130b3fc47e40d76ce
      url: "https://pub.dev"
    source: hosted
    version: "3.1.3"
sdks:
  dart: ">=3.7.0 <4.0.0"
  flutter: ">=3.27.0"

  name: persia_markt
description: A mobile application for Persian products and stores in Germany.
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter

  # CORE UTILITIES
  cupertino_icons: ^1.0.2
  google_fonts: ^6.2.1
  equatable: ^2.0.5
  get_it: ^7.7.0
  fpdart: ^1.1.0

  # STATE MANAGEMENT
  flutter_bloc: ^8.1.5

  # ROUTING
  go_router: ^14.1.0

  # NETWORKING & DATA
  http: ^1.2.1
  shared_preferences: ^2.2.3

  # LOCATION & MAPS
  geolocator: ^12.0.0
  geocoding: ^3.0.0
  flutter_map: ^7.0.0
  latlong2: ^0.9.1

  # UI & UX
  shimmer: ^3.0.0
  scrollable_positioned_list: ^0.3.8

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0
  
  # TESTING LIBRARIES
  bloc_test: ^9.1.7
  mocktail: ^1.0.3

flutter:
  uses-material-design: true
  assets:
    - assets/images/appLogo.png
    - assets/images/supermarket.png
    - assets/images/banner1.png
    - assets/images/banner2.png
    - assets/images/banner3.png
    - assets/images/banner4.png

    plugins {
    id("com.android.application") 
    id("org.jetbrains.kotlin.android") 
    id("dev.flutter.flutter-plugin-loader") 
}

fun getLocalProperty(propertyName: String): String? { 
    val localProperties = java.util.Properties() 
    val localPropertiesFile = rootProject.file("local.properties") 
    if (localPropertiesFile.exists()) { 
        localPropertiesFile.inputStream().use { inputStream -> 
            localProperties.load(inputStream) 
        } 
    } 
    return localProperties.getProperty(propertyName) 
}

android {
    namespace = "com.example.persiamarkt" 
    compileSdk = 34 
    ndkVersion = "27.0.12077973" // تنظیم ورژن NDK برای رفع هشدار ناسازگاری
    defaultConfig {
        applicationId = "com.example.persiamarkt" 
        minSdk = 21 
        targetSdk = 34 
        versionCode = getLocalProperty("flutter.versionCode")?.toInt() ?: 1 
        versionName = getLocalProperty("flutter.versionName") ?: "1.0.0" 
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner" 
    }

    signingConfigs {
        create("release") {
            // Add your signing config here for release builds
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.getByName("release") 
            isShrinkResources = true 
            isMinifyEnabled = true 
        }
        debug {
            isShrinkResources = false 
            isMinifyEnabled = false 
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8 
        targetCompatibility = JavaVersion.VERSION_1_8 
    }

    kotlinOptions {
        jvmTarget = "1.8" 
    }
}

flutter {
    source = "../.." 
}